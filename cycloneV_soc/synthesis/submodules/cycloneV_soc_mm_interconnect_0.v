// cycloneV_soc_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module cycloneV_soc_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                                      //                                                    clk_0_clk.clk
		input  wire        homography_dma_0_reset_sink_reset_bridge_in_reset_reset,            //            homography_dma_0_reset_sink_reset_bridge_in_reset.reset
		input  wire        hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset, // hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset.reset
		input  wire [31:0] addVector_0_avalon_rd1_1_1_1_address,                               //                                 addVector_0_avalon_rd1_1_1_1.address
		output wire        addVector_0_avalon_rd1_1_1_1_waitrequest,                           //                                                             .waitrequest
		input  wire [3:0]  addVector_0_avalon_rd1_1_1_1_burstcount,                            //                                                             .burstcount
		input  wire        addVector_0_avalon_rd1_1_1_1_read,                                  //                                                             .read
		output wire [31:0] addVector_0_avalon_rd1_1_1_1_readdata,                              //                                                             .readdata
		output wire        addVector_0_avalon_rd1_1_1_1_readdatavalid,                         //                                                             .readdatavalid
		input  wire [31:0] addVector_0_avalon_rd2_address,                                     //                                       addVector_0_avalon_rd2.address
		output wire        addVector_0_avalon_rd2_waitrequest,                                 //                                                             .waitrequest
		input  wire [3:0]  addVector_0_avalon_rd2_burstcount,                                  //                                                             .burstcount
		input  wire        addVector_0_avalon_rd2_read,                                        //                                                             .read
		output wire [31:0] addVector_0_avalon_rd2_readdata,                                    //                                                             .readdata
		output wire        addVector_0_avalon_rd2_readdatavalid,                               //                                                             .readdatavalid
		input  wire [31:0] addVector_0_avalon_wr_address,                                      //                                        addVector_0_avalon_wr.address
		output wire        addVector_0_avalon_wr_waitrequest,                                  //                                                             .waitrequest
		input  wire        addVector_0_avalon_wr_write,                                        //                                                             .write
		input  wire [31:0] addVector_0_avalon_wr_writedata,                                    //                                                             .writedata
		input  wire [31:0] addVector_1_avalon_rd1_1_1_1_address,                               //                                 addVector_1_avalon_rd1_1_1_1.address
		output wire        addVector_1_avalon_rd1_1_1_1_waitrequest,                           //                                                             .waitrequest
		input  wire [3:0]  addVector_1_avalon_rd1_1_1_1_burstcount,                            //                                                             .burstcount
		input  wire        addVector_1_avalon_rd1_1_1_1_read,                                  //                                                             .read
		output wire [31:0] addVector_1_avalon_rd1_1_1_1_readdata,                              //                                                             .readdata
		output wire        addVector_1_avalon_rd1_1_1_1_readdatavalid,                         //                                                             .readdatavalid
		input  wire [31:0] addVector_1_avalon_rd2_address,                                     //                                       addVector_1_avalon_rd2.address
		output wire        addVector_1_avalon_rd2_waitrequest,                                 //                                                             .waitrequest
		input  wire [3:0]  addVector_1_avalon_rd2_burstcount,                                  //                                                             .burstcount
		input  wire        addVector_1_avalon_rd2_read,                                        //                                                             .read
		output wire [31:0] addVector_1_avalon_rd2_readdata,                                    //                                                             .readdata
		output wire        addVector_1_avalon_rd2_readdatavalid,                               //                                                             .readdatavalid
		input  wire [31:0] addVector_1_avalon_wr_address,                                      //                                        addVector_1_avalon_wr.address
		output wire        addVector_1_avalon_wr_waitrequest,                                  //                                                             .waitrequest
		input  wire        addVector_1_avalon_wr_write,                                        //                                                             .write
		input  wire [31:0] addVector_1_avalon_wr_writedata,                                    //                                                             .writedata
		input  wire [31:0] homography_dma_0_avalon_master_address,                             //                               homography_dma_0_avalon_master.address
		output wire        homography_dma_0_avalon_master_waitrequest,                         //                                                             .waitrequest
		input  wire        homography_dma_0_avalon_master_read,                                //                                                             .read
		output wire [7:0]  homography_dma_0_avalon_master_readdata,                            //                                                             .readdata
		output wire        homography_dma_0_avalon_master_readdatavalid,                       //                                                             .readdatavalid
		input  wire [31:0] homography_dma_0_avalon_master_1_address,                           //                             homography_dma_0_avalon_master_1.address
		output wire        homography_dma_0_avalon_master_1_waitrequest,                       //                                                             .waitrequest
		input  wire        homography_dma_0_avalon_master_1_write,                             //                                                             .write
		input  wire [7:0]  homography_dma_0_avalon_master_1_writedata,                         //                                                             .writedata
		output wire [28:0] hps_0_f2h_sdram0_data_address,                                      //                                        hps_0_f2h_sdram0_data.address
		output wire        hps_0_f2h_sdram0_data_write,                                        //                                                             .write
		output wire        hps_0_f2h_sdram0_data_read,                                         //                                                             .read
		input  wire [63:0] hps_0_f2h_sdram0_data_readdata,                                     //                                                             .readdata
		output wire [63:0] hps_0_f2h_sdram0_data_writedata,                                    //                                                             .writedata
		output wire [7:0]  hps_0_f2h_sdram0_data_burstcount,                                   //                                                             .burstcount
		output wire [7:0]  hps_0_f2h_sdram0_data_byteenable,                                   //                                                             .byteenable
		input  wire        hps_0_f2h_sdram0_data_readdatavalid,                                //                                                             .readdatavalid
		input  wire        hps_0_f2h_sdram0_data_waitrequest                                   //                                                             .waitrequest
	);

	wire          homography_dma_0_avalon_master_translator_avalon_universal_master_0_waitrequest;     // homography_dma_0_avalon_master_agent:av_waitrequest -> homography_dma_0_avalon_master_translator:uav_waitrequest
	wire    [7:0] homography_dma_0_avalon_master_translator_avalon_universal_master_0_readdata;        // homography_dma_0_avalon_master_agent:av_readdata -> homography_dma_0_avalon_master_translator:uav_readdata
	wire          homography_dma_0_avalon_master_translator_avalon_universal_master_0_debugaccess;     // homography_dma_0_avalon_master_translator:uav_debugaccess -> homography_dma_0_avalon_master_agent:av_debugaccess
	wire   [31:0] homography_dma_0_avalon_master_translator_avalon_universal_master_0_address;         // homography_dma_0_avalon_master_translator:uav_address -> homography_dma_0_avalon_master_agent:av_address
	wire          homography_dma_0_avalon_master_translator_avalon_universal_master_0_read;            // homography_dma_0_avalon_master_translator:uav_read -> homography_dma_0_avalon_master_agent:av_read
	wire    [0:0] homography_dma_0_avalon_master_translator_avalon_universal_master_0_byteenable;      // homography_dma_0_avalon_master_translator:uav_byteenable -> homography_dma_0_avalon_master_agent:av_byteenable
	wire          homography_dma_0_avalon_master_translator_avalon_universal_master_0_readdatavalid;   // homography_dma_0_avalon_master_agent:av_readdatavalid -> homography_dma_0_avalon_master_translator:uav_readdatavalid
	wire          homography_dma_0_avalon_master_translator_avalon_universal_master_0_lock;            // homography_dma_0_avalon_master_translator:uav_lock -> homography_dma_0_avalon_master_agent:av_lock
	wire          homography_dma_0_avalon_master_translator_avalon_universal_master_0_write;           // homography_dma_0_avalon_master_translator:uav_write -> homography_dma_0_avalon_master_agent:av_write
	wire    [7:0] homography_dma_0_avalon_master_translator_avalon_universal_master_0_writedata;       // homography_dma_0_avalon_master_translator:uav_writedata -> homography_dma_0_avalon_master_agent:av_writedata
	wire    [0:0] homography_dma_0_avalon_master_translator_avalon_universal_master_0_burstcount;      // homography_dma_0_avalon_master_translator:uav_burstcount -> homography_dma_0_avalon_master_agent:av_burstcount
	wire          homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_waitrequest;   // homography_dma_0_avalon_master_1_agent:av_waitrequest -> homography_dma_0_avalon_master_1_translator:uav_waitrequest
	wire    [7:0] homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_readdata;      // homography_dma_0_avalon_master_1_agent:av_readdata -> homography_dma_0_avalon_master_1_translator:uav_readdata
	wire          homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_debugaccess;   // homography_dma_0_avalon_master_1_translator:uav_debugaccess -> homography_dma_0_avalon_master_1_agent:av_debugaccess
	wire   [31:0] homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_address;       // homography_dma_0_avalon_master_1_translator:uav_address -> homography_dma_0_avalon_master_1_agent:av_address
	wire          homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_read;          // homography_dma_0_avalon_master_1_translator:uav_read -> homography_dma_0_avalon_master_1_agent:av_read
	wire    [0:0] homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_byteenable;    // homography_dma_0_avalon_master_1_translator:uav_byteenable -> homography_dma_0_avalon_master_1_agent:av_byteenable
	wire          homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_readdatavalid; // homography_dma_0_avalon_master_1_agent:av_readdatavalid -> homography_dma_0_avalon_master_1_translator:uav_readdatavalid
	wire          homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_lock;          // homography_dma_0_avalon_master_1_translator:uav_lock -> homography_dma_0_avalon_master_1_agent:av_lock
	wire          homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_write;         // homography_dma_0_avalon_master_1_translator:uav_write -> homography_dma_0_avalon_master_1_agent:av_write
	wire    [7:0] homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_writedata;     // homography_dma_0_avalon_master_1_translator:uav_writedata -> homography_dma_0_avalon_master_1_agent:av_writedata
	wire    [0:0] homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_burstcount;    // homography_dma_0_avalon_master_1_translator:uav_burstcount -> homography_dma_0_avalon_master_1_agent:av_burstcount
	wire          addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_waitrequest;       // addVector_0_avalon_rd1_1_1_1_agent:av_waitrequest -> addVector_0_avalon_rd1_1_1_1_translator:uav_waitrequest
	wire   [31:0] addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_readdata;          // addVector_0_avalon_rd1_1_1_1_agent:av_readdata -> addVector_0_avalon_rd1_1_1_1_translator:uav_readdata
	wire          addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_debugaccess;       // addVector_0_avalon_rd1_1_1_1_translator:uav_debugaccess -> addVector_0_avalon_rd1_1_1_1_agent:av_debugaccess
	wire   [31:0] addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_address;           // addVector_0_avalon_rd1_1_1_1_translator:uav_address -> addVector_0_avalon_rd1_1_1_1_agent:av_address
	wire          addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_read;              // addVector_0_avalon_rd1_1_1_1_translator:uav_read -> addVector_0_avalon_rd1_1_1_1_agent:av_read
	wire    [3:0] addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_byteenable;        // addVector_0_avalon_rd1_1_1_1_translator:uav_byteenable -> addVector_0_avalon_rd1_1_1_1_agent:av_byteenable
	wire          addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_readdatavalid;     // addVector_0_avalon_rd1_1_1_1_agent:av_readdatavalid -> addVector_0_avalon_rd1_1_1_1_translator:uav_readdatavalid
	wire          addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_lock;              // addVector_0_avalon_rd1_1_1_1_translator:uav_lock -> addVector_0_avalon_rd1_1_1_1_agent:av_lock
	wire          addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_write;             // addVector_0_avalon_rd1_1_1_1_translator:uav_write -> addVector_0_avalon_rd1_1_1_1_agent:av_write
	wire   [31:0] addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_writedata;         // addVector_0_avalon_rd1_1_1_1_translator:uav_writedata -> addVector_0_avalon_rd1_1_1_1_agent:av_writedata
	wire    [5:0] addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_burstcount;        // addVector_0_avalon_rd1_1_1_1_translator:uav_burstcount -> addVector_0_avalon_rd1_1_1_1_agent:av_burstcount
	wire          addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_waitrequest;       // addVector_1_avalon_rd1_1_1_1_agent:av_waitrequest -> addVector_1_avalon_rd1_1_1_1_translator:uav_waitrequest
	wire   [31:0] addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_readdata;          // addVector_1_avalon_rd1_1_1_1_agent:av_readdata -> addVector_1_avalon_rd1_1_1_1_translator:uav_readdata
	wire          addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_debugaccess;       // addVector_1_avalon_rd1_1_1_1_translator:uav_debugaccess -> addVector_1_avalon_rd1_1_1_1_agent:av_debugaccess
	wire   [31:0] addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_address;           // addVector_1_avalon_rd1_1_1_1_translator:uav_address -> addVector_1_avalon_rd1_1_1_1_agent:av_address
	wire          addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_read;              // addVector_1_avalon_rd1_1_1_1_translator:uav_read -> addVector_1_avalon_rd1_1_1_1_agent:av_read
	wire    [3:0] addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_byteenable;        // addVector_1_avalon_rd1_1_1_1_translator:uav_byteenable -> addVector_1_avalon_rd1_1_1_1_agent:av_byteenable
	wire          addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_readdatavalid;     // addVector_1_avalon_rd1_1_1_1_agent:av_readdatavalid -> addVector_1_avalon_rd1_1_1_1_translator:uav_readdatavalid
	wire          addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_lock;              // addVector_1_avalon_rd1_1_1_1_translator:uav_lock -> addVector_1_avalon_rd1_1_1_1_agent:av_lock
	wire          addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_write;             // addVector_1_avalon_rd1_1_1_1_translator:uav_write -> addVector_1_avalon_rd1_1_1_1_agent:av_write
	wire   [31:0] addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_writedata;         // addVector_1_avalon_rd1_1_1_1_translator:uav_writedata -> addVector_1_avalon_rd1_1_1_1_agent:av_writedata
	wire    [5:0] addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_burstcount;        // addVector_1_avalon_rd1_1_1_1_translator:uav_burstcount -> addVector_1_avalon_rd1_1_1_1_agent:av_burstcount
	wire          addvector_0_avalon_rd2_translator_avalon_universal_master_0_waitrequest;             // addVector_0_avalon_rd2_agent:av_waitrequest -> addVector_0_avalon_rd2_translator:uav_waitrequest
	wire   [31:0] addvector_0_avalon_rd2_translator_avalon_universal_master_0_readdata;                // addVector_0_avalon_rd2_agent:av_readdata -> addVector_0_avalon_rd2_translator:uav_readdata
	wire          addvector_0_avalon_rd2_translator_avalon_universal_master_0_debugaccess;             // addVector_0_avalon_rd2_translator:uav_debugaccess -> addVector_0_avalon_rd2_agent:av_debugaccess
	wire   [31:0] addvector_0_avalon_rd2_translator_avalon_universal_master_0_address;                 // addVector_0_avalon_rd2_translator:uav_address -> addVector_0_avalon_rd2_agent:av_address
	wire          addvector_0_avalon_rd2_translator_avalon_universal_master_0_read;                    // addVector_0_avalon_rd2_translator:uav_read -> addVector_0_avalon_rd2_agent:av_read
	wire    [3:0] addvector_0_avalon_rd2_translator_avalon_universal_master_0_byteenable;              // addVector_0_avalon_rd2_translator:uav_byteenable -> addVector_0_avalon_rd2_agent:av_byteenable
	wire          addvector_0_avalon_rd2_translator_avalon_universal_master_0_readdatavalid;           // addVector_0_avalon_rd2_agent:av_readdatavalid -> addVector_0_avalon_rd2_translator:uav_readdatavalid
	wire          addvector_0_avalon_rd2_translator_avalon_universal_master_0_lock;                    // addVector_0_avalon_rd2_translator:uav_lock -> addVector_0_avalon_rd2_agent:av_lock
	wire          addvector_0_avalon_rd2_translator_avalon_universal_master_0_write;                   // addVector_0_avalon_rd2_translator:uav_write -> addVector_0_avalon_rd2_agent:av_write
	wire   [31:0] addvector_0_avalon_rd2_translator_avalon_universal_master_0_writedata;               // addVector_0_avalon_rd2_translator:uav_writedata -> addVector_0_avalon_rd2_agent:av_writedata
	wire    [5:0] addvector_0_avalon_rd2_translator_avalon_universal_master_0_burstcount;              // addVector_0_avalon_rd2_translator:uav_burstcount -> addVector_0_avalon_rd2_agent:av_burstcount
	wire          addvector_1_avalon_rd2_translator_avalon_universal_master_0_waitrequest;             // addVector_1_avalon_rd2_agent:av_waitrequest -> addVector_1_avalon_rd2_translator:uav_waitrequest
	wire   [31:0] addvector_1_avalon_rd2_translator_avalon_universal_master_0_readdata;                // addVector_1_avalon_rd2_agent:av_readdata -> addVector_1_avalon_rd2_translator:uav_readdata
	wire          addvector_1_avalon_rd2_translator_avalon_universal_master_0_debugaccess;             // addVector_1_avalon_rd2_translator:uav_debugaccess -> addVector_1_avalon_rd2_agent:av_debugaccess
	wire   [31:0] addvector_1_avalon_rd2_translator_avalon_universal_master_0_address;                 // addVector_1_avalon_rd2_translator:uav_address -> addVector_1_avalon_rd2_agent:av_address
	wire          addvector_1_avalon_rd2_translator_avalon_universal_master_0_read;                    // addVector_1_avalon_rd2_translator:uav_read -> addVector_1_avalon_rd2_agent:av_read
	wire    [3:0] addvector_1_avalon_rd2_translator_avalon_universal_master_0_byteenable;              // addVector_1_avalon_rd2_translator:uav_byteenable -> addVector_1_avalon_rd2_agent:av_byteenable
	wire          addvector_1_avalon_rd2_translator_avalon_universal_master_0_readdatavalid;           // addVector_1_avalon_rd2_agent:av_readdatavalid -> addVector_1_avalon_rd2_translator:uav_readdatavalid
	wire          addvector_1_avalon_rd2_translator_avalon_universal_master_0_lock;                    // addVector_1_avalon_rd2_translator:uav_lock -> addVector_1_avalon_rd2_agent:av_lock
	wire          addvector_1_avalon_rd2_translator_avalon_universal_master_0_write;                   // addVector_1_avalon_rd2_translator:uav_write -> addVector_1_avalon_rd2_agent:av_write
	wire   [31:0] addvector_1_avalon_rd2_translator_avalon_universal_master_0_writedata;               // addVector_1_avalon_rd2_translator:uav_writedata -> addVector_1_avalon_rd2_agent:av_writedata
	wire    [5:0] addvector_1_avalon_rd2_translator_avalon_universal_master_0_burstcount;              // addVector_1_avalon_rd2_translator:uav_burstcount -> addVector_1_avalon_rd2_agent:av_burstcount
	wire          addvector_0_avalon_wr_translator_avalon_universal_master_0_waitrequest;              // addVector_0_avalon_wr_agent:av_waitrequest -> addVector_0_avalon_wr_translator:uav_waitrequest
	wire   [31:0] addvector_0_avalon_wr_translator_avalon_universal_master_0_readdata;                 // addVector_0_avalon_wr_agent:av_readdata -> addVector_0_avalon_wr_translator:uav_readdata
	wire          addvector_0_avalon_wr_translator_avalon_universal_master_0_debugaccess;              // addVector_0_avalon_wr_translator:uav_debugaccess -> addVector_0_avalon_wr_agent:av_debugaccess
	wire   [31:0] addvector_0_avalon_wr_translator_avalon_universal_master_0_address;                  // addVector_0_avalon_wr_translator:uav_address -> addVector_0_avalon_wr_agent:av_address
	wire          addvector_0_avalon_wr_translator_avalon_universal_master_0_read;                     // addVector_0_avalon_wr_translator:uav_read -> addVector_0_avalon_wr_agent:av_read
	wire    [3:0] addvector_0_avalon_wr_translator_avalon_universal_master_0_byteenable;               // addVector_0_avalon_wr_translator:uav_byteenable -> addVector_0_avalon_wr_agent:av_byteenable
	wire          addvector_0_avalon_wr_translator_avalon_universal_master_0_readdatavalid;            // addVector_0_avalon_wr_agent:av_readdatavalid -> addVector_0_avalon_wr_translator:uav_readdatavalid
	wire          addvector_0_avalon_wr_translator_avalon_universal_master_0_lock;                     // addVector_0_avalon_wr_translator:uav_lock -> addVector_0_avalon_wr_agent:av_lock
	wire          addvector_0_avalon_wr_translator_avalon_universal_master_0_write;                    // addVector_0_avalon_wr_translator:uav_write -> addVector_0_avalon_wr_agent:av_write
	wire   [31:0] addvector_0_avalon_wr_translator_avalon_universal_master_0_writedata;                // addVector_0_avalon_wr_translator:uav_writedata -> addVector_0_avalon_wr_agent:av_writedata
	wire    [2:0] addvector_0_avalon_wr_translator_avalon_universal_master_0_burstcount;               // addVector_0_avalon_wr_translator:uav_burstcount -> addVector_0_avalon_wr_agent:av_burstcount
	wire          addvector_1_avalon_wr_translator_avalon_universal_master_0_waitrequest;              // addVector_1_avalon_wr_agent:av_waitrequest -> addVector_1_avalon_wr_translator:uav_waitrequest
	wire   [31:0] addvector_1_avalon_wr_translator_avalon_universal_master_0_readdata;                 // addVector_1_avalon_wr_agent:av_readdata -> addVector_1_avalon_wr_translator:uav_readdata
	wire          addvector_1_avalon_wr_translator_avalon_universal_master_0_debugaccess;              // addVector_1_avalon_wr_translator:uav_debugaccess -> addVector_1_avalon_wr_agent:av_debugaccess
	wire   [31:0] addvector_1_avalon_wr_translator_avalon_universal_master_0_address;                  // addVector_1_avalon_wr_translator:uav_address -> addVector_1_avalon_wr_agent:av_address
	wire          addvector_1_avalon_wr_translator_avalon_universal_master_0_read;                     // addVector_1_avalon_wr_translator:uav_read -> addVector_1_avalon_wr_agent:av_read
	wire    [3:0] addvector_1_avalon_wr_translator_avalon_universal_master_0_byteenable;               // addVector_1_avalon_wr_translator:uav_byteenable -> addVector_1_avalon_wr_agent:av_byteenable
	wire          addvector_1_avalon_wr_translator_avalon_universal_master_0_readdatavalid;            // addVector_1_avalon_wr_agent:av_readdatavalid -> addVector_1_avalon_wr_translator:uav_readdatavalid
	wire          addvector_1_avalon_wr_translator_avalon_universal_master_0_lock;                     // addVector_1_avalon_wr_translator:uav_lock -> addVector_1_avalon_wr_agent:av_lock
	wire          addvector_1_avalon_wr_translator_avalon_universal_master_0_write;                    // addVector_1_avalon_wr_translator:uav_write -> addVector_1_avalon_wr_agent:av_write
	wire   [31:0] addvector_1_avalon_wr_translator_avalon_universal_master_0_writedata;                // addVector_1_avalon_wr_translator:uav_writedata -> addVector_1_avalon_wr_agent:av_writedata
	wire    [2:0] addvector_1_avalon_wr_translator_avalon_universal_master_0_burstcount;               // addVector_1_avalon_wr_translator:uav_burstcount -> addVector_1_avalon_wr_agent:av_burstcount
	wire   [63:0] hps_0_f2h_sdram0_data_agent_m0_readdata;                                             // hps_0_f2h_sdram0_data_translator:uav_readdata -> hps_0_f2h_sdram0_data_agent:m0_readdata
	wire          hps_0_f2h_sdram0_data_agent_m0_waitrequest;                                          // hps_0_f2h_sdram0_data_translator:uav_waitrequest -> hps_0_f2h_sdram0_data_agent:m0_waitrequest
	wire          hps_0_f2h_sdram0_data_agent_m0_debugaccess;                                          // hps_0_f2h_sdram0_data_agent:m0_debugaccess -> hps_0_f2h_sdram0_data_translator:uav_debugaccess
	wire   [31:0] hps_0_f2h_sdram0_data_agent_m0_address;                                              // hps_0_f2h_sdram0_data_agent:m0_address -> hps_0_f2h_sdram0_data_translator:uav_address
	wire    [7:0] hps_0_f2h_sdram0_data_agent_m0_byteenable;                                           // hps_0_f2h_sdram0_data_agent:m0_byteenable -> hps_0_f2h_sdram0_data_translator:uav_byteenable
	wire          hps_0_f2h_sdram0_data_agent_m0_read;                                                 // hps_0_f2h_sdram0_data_agent:m0_read -> hps_0_f2h_sdram0_data_translator:uav_read
	wire          hps_0_f2h_sdram0_data_agent_m0_readdatavalid;                                        // hps_0_f2h_sdram0_data_translator:uav_readdatavalid -> hps_0_f2h_sdram0_data_agent:m0_readdatavalid
	wire          hps_0_f2h_sdram0_data_agent_m0_lock;                                                 // hps_0_f2h_sdram0_data_agent:m0_lock -> hps_0_f2h_sdram0_data_translator:uav_lock
	wire   [63:0] hps_0_f2h_sdram0_data_agent_m0_writedata;                                            // hps_0_f2h_sdram0_data_agent:m0_writedata -> hps_0_f2h_sdram0_data_translator:uav_writedata
	wire          hps_0_f2h_sdram0_data_agent_m0_write;                                                // hps_0_f2h_sdram0_data_agent:m0_write -> hps_0_f2h_sdram0_data_translator:uav_write
	wire   [10:0] hps_0_f2h_sdram0_data_agent_m0_burstcount;                                           // hps_0_f2h_sdram0_data_agent:m0_burstcount -> hps_0_f2h_sdram0_data_translator:uav_burstcount
	wire          hps_0_f2h_sdram0_data_agent_rf_source_valid;                                         // hps_0_f2h_sdram0_data_agent:rf_source_valid -> hps_0_f2h_sdram0_data_agent_rsp_fifo:in_valid
	wire  [150:0] hps_0_f2h_sdram0_data_agent_rf_source_data;                                          // hps_0_f2h_sdram0_data_agent:rf_source_data -> hps_0_f2h_sdram0_data_agent_rsp_fifo:in_data
	wire          hps_0_f2h_sdram0_data_agent_rf_source_ready;                                         // hps_0_f2h_sdram0_data_agent_rsp_fifo:in_ready -> hps_0_f2h_sdram0_data_agent:rf_source_ready
	wire          hps_0_f2h_sdram0_data_agent_rf_source_startofpacket;                                 // hps_0_f2h_sdram0_data_agent:rf_source_startofpacket -> hps_0_f2h_sdram0_data_agent_rsp_fifo:in_startofpacket
	wire          hps_0_f2h_sdram0_data_agent_rf_source_endofpacket;                                   // hps_0_f2h_sdram0_data_agent:rf_source_endofpacket -> hps_0_f2h_sdram0_data_agent_rsp_fifo:in_endofpacket
	wire          hps_0_f2h_sdram0_data_agent_rsp_fifo_out_valid;                                      // hps_0_f2h_sdram0_data_agent_rsp_fifo:out_valid -> hps_0_f2h_sdram0_data_agent:rf_sink_valid
	wire  [150:0] hps_0_f2h_sdram0_data_agent_rsp_fifo_out_data;                                       // hps_0_f2h_sdram0_data_agent_rsp_fifo:out_data -> hps_0_f2h_sdram0_data_agent:rf_sink_data
	wire          hps_0_f2h_sdram0_data_agent_rsp_fifo_out_ready;                                      // hps_0_f2h_sdram0_data_agent:rf_sink_ready -> hps_0_f2h_sdram0_data_agent_rsp_fifo:out_ready
	wire          hps_0_f2h_sdram0_data_agent_rsp_fifo_out_startofpacket;                              // hps_0_f2h_sdram0_data_agent_rsp_fifo:out_startofpacket -> hps_0_f2h_sdram0_data_agent:rf_sink_startofpacket
	wire          hps_0_f2h_sdram0_data_agent_rsp_fifo_out_endofpacket;                                // hps_0_f2h_sdram0_data_agent_rsp_fifo:out_endofpacket -> hps_0_f2h_sdram0_data_agent:rf_sink_endofpacket
	wire          hps_0_f2h_sdram0_data_agent_rdata_fifo_src_valid;                                    // hps_0_f2h_sdram0_data_agent:rdata_fifo_src_valid -> hps_0_f2h_sdram0_data_agent_rdata_fifo:in_valid
	wire   [65:0] hps_0_f2h_sdram0_data_agent_rdata_fifo_src_data;                                     // hps_0_f2h_sdram0_data_agent:rdata_fifo_src_data -> hps_0_f2h_sdram0_data_agent_rdata_fifo:in_data
	wire          hps_0_f2h_sdram0_data_agent_rdata_fifo_src_ready;                                    // hps_0_f2h_sdram0_data_agent_rdata_fifo:in_ready -> hps_0_f2h_sdram0_data_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                                   // cmd_mux:src_valid -> hps_0_f2h_sdram0_data_agent:cp_valid
	wire  [149:0] cmd_mux_src_data;                                                                    // cmd_mux:src_data -> hps_0_f2h_sdram0_data_agent:cp_data
	wire          cmd_mux_src_ready;                                                                   // hps_0_f2h_sdram0_data_agent:cp_ready -> cmd_mux:src_ready
	wire    [7:0] cmd_mux_src_channel;                                                                 // cmd_mux:src_channel -> hps_0_f2h_sdram0_data_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                           // cmd_mux:src_startofpacket -> hps_0_f2h_sdram0_data_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                             // cmd_mux:src_endofpacket -> hps_0_f2h_sdram0_data_agent:cp_endofpacket
	wire          homography_dma_0_avalon_master_agent_cp_valid;                                       // homography_dma_0_avalon_master_agent:cp_valid -> router:sink_valid
	wire   [86:0] homography_dma_0_avalon_master_agent_cp_data;                                        // homography_dma_0_avalon_master_agent:cp_data -> router:sink_data
	wire          homography_dma_0_avalon_master_agent_cp_ready;                                       // router:sink_ready -> homography_dma_0_avalon_master_agent:cp_ready
	wire          homography_dma_0_avalon_master_agent_cp_startofpacket;                               // homography_dma_0_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          homography_dma_0_avalon_master_agent_cp_endofpacket;                                 // homography_dma_0_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          homography_dma_0_avalon_master_1_agent_cp_valid;                                     // homography_dma_0_avalon_master_1_agent:cp_valid -> router_001:sink_valid
	wire   [86:0] homography_dma_0_avalon_master_1_agent_cp_data;                                      // homography_dma_0_avalon_master_1_agent:cp_data -> router_001:sink_data
	wire          homography_dma_0_avalon_master_1_agent_cp_ready;                                     // router_001:sink_ready -> homography_dma_0_avalon_master_1_agent:cp_ready
	wire          homography_dma_0_avalon_master_1_agent_cp_startofpacket;                             // homography_dma_0_avalon_master_1_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          homography_dma_0_avalon_master_1_agent_cp_endofpacket;                               // homography_dma_0_avalon_master_1_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          addvector_0_avalon_rd1_1_1_1_agent_cp_valid;                                         // addVector_0_avalon_rd1_1_1_1_agent:cp_valid -> router_002:sink_valid
	wire  [113:0] addvector_0_avalon_rd1_1_1_1_agent_cp_data;                                          // addVector_0_avalon_rd1_1_1_1_agent:cp_data -> router_002:sink_data
	wire          addvector_0_avalon_rd1_1_1_1_agent_cp_ready;                                         // router_002:sink_ready -> addVector_0_avalon_rd1_1_1_1_agent:cp_ready
	wire          addvector_0_avalon_rd1_1_1_1_agent_cp_startofpacket;                                 // addVector_0_avalon_rd1_1_1_1_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          addvector_0_avalon_rd1_1_1_1_agent_cp_endofpacket;                                   // addVector_0_avalon_rd1_1_1_1_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          addvector_1_avalon_rd1_1_1_1_agent_cp_valid;                                         // addVector_1_avalon_rd1_1_1_1_agent:cp_valid -> router_003:sink_valid
	wire  [113:0] addvector_1_avalon_rd1_1_1_1_agent_cp_data;                                          // addVector_1_avalon_rd1_1_1_1_agent:cp_data -> router_003:sink_data
	wire          addvector_1_avalon_rd1_1_1_1_agent_cp_ready;                                         // router_003:sink_ready -> addVector_1_avalon_rd1_1_1_1_agent:cp_ready
	wire          addvector_1_avalon_rd1_1_1_1_agent_cp_startofpacket;                                 // addVector_1_avalon_rd1_1_1_1_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          addvector_1_avalon_rd1_1_1_1_agent_cp_endofpacket;                                   // addVector_1_avalon_rd1_1_1_1_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          addvector_0_avalon_rd2_agent_cp_valid;                                               // addVector_0_avalon_rd2_agent:cp_valid -> router_004:sink_valid
	wire  [113:0] addvector_0_avalon_rd2_agent_cp_data;                                                // addVector_0_avalon_rd2_agent:cp_data -> router_004:sink_data
	wire          addvector_0_avalon_rd2_agent_cp_ready;                                               // router_004:sink_ready -> addVector_0_avalon_rd2_agent:cp_ready
	wire          addvector_0_avalon_rd2_agent_cp_startofpacket;                                       // addVector_0_avalon_rd2_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          addvector_0_avalon_rd2_agent_cp_endofpacket;                                         // addVector_0_avalon_rd2_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          addvector_1_avalon_rd2_agent_cp_valid;                                               // addVector_1_avalon_rd2_agent:cp_valid -> router_005:sink_valid
	wire  [113:0] addvector_1_avalon_rd2_agent_cp_data;                                                // addVector_1_avalon_rd2_agent:cp_data -> router_005:sink_data
	wire          addvector_1_avalon_rd2_agent_cp_ready;                                               // router_005:sink_ready -> addVector_1_avalon_rd2_agent:cp_ready
	wire          addvector_1_avalon_rd2_agent_cp_startofpacket;                                       // addVector_1_avalon_rd2_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          addvector_1_avalon_rd2_agent_cp_endofpacket;                                         // addVector_1_avalon_rd2_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          addvector_0_avalon_wr_agent_cp_valid;                                                // addVector_0_avalon_wr_agent:cp_valid -> router_006:sink_valid
	wire  [113:0] addvector_0_avalon_wr_agent_cp_data;                                                 // addVector_0_avalon_wr_agent:cp_data -> router_006:sink_data
	wire          addvector_0_avalon_wr_agent_cp_ready;                                                // router_006:sink_ready -> addVector_0_avalon_wr_agent:cp_ready
	wire          addvector_0_avalon_wr_agent_cp_startofpacket;                                        // addVector_0_avalon_wr_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire          addvector_0_avalon_wr_agent_cp_endofpacket;                                          // addVector_0_avalon_wr_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          addvector_1_avalon_wr_agent_cp_valid;                                                // addVector_1_avalon_wr_agent:cp_valid -> router_007:sink_valid
	wire  [113:0] addvector_1_avalon_wr_agent_cp_data;                                                 // addVector_1_avalon_wr_agent:cp_data -> router_007:sink_data
	wire          addvector_1_avalon_wr_agent_cp_ready;                                                // router_007:sink_ready -> addVector_1_avalon_wr_agent:cp_ready
	wire          addvector_1_avalon_wr_agent_cp_startofpacket;                                        // addVector_1_avalon_wr_agent:cp_startofpacket -> router_007:sink_startofpacket
	wire          addvector_1_avalon_wr_agent_cp_endofpacket;                                          // addVector_1_avalon_wr_agent:cp_endofpacket -> router_007:sink_endofpacket
	wire          hps_0_f2h_sdram0_data_agent_rp_valid;                                                // hps_0_f2h_sdram0_data_agent:rp_valid -> router_008:sink_valid
	wire  [149:0] hps_0_f2h_sdram0_data_agent_rp_data;                                                 // hps_0_f2h_sdram0_data_agent:rp_data -> router_008:sink_data
	wire          hps_0_f2h_sdram0_data_agent_rp_ready;                                                // router_008:sink_ready -> hps_0_f2h_sdram0_data_agent:rp_ready
	wire          hps_0_f2h_sdram0_data_agent_rp_startofpacket;                                        // hps_0_f2h_sdram0_data_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          hps_0_f2h_sdram0_data_agent_rp_endofpacket;                                          // hps_0_f2h_sdram0_data_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                // router_008:src_valid -> rsp_demux:sink_valid
	wire  [149:0] router_008_src_data;                                                                 // router_008:src_data -> rsp_demux:sink_data
	wire          router_008_src_ready;                                                                // rsp_demux:sink_ready -> router_008:src_ready
	wire    [7:0] router_008_src_channel;                                                              // router_008:src_channel -> rsp_demux:sink_channel
	wire          router_008_src_startofpacket;                                                        // router_008:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_008_src_endofpacket;                                                          // router_008:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                                // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [149:0] cmd_demux_src0_data;                                                                 // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [7:0] cmd_demux_src0_channel;                                                              // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                        // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                          // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                            // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [149:0] cmd_demux_001_src0_data;                                                             // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                            // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [7:0] cmd_demux_001_src0_channel;                                                          // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                    // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                      // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                            // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [149:0] cmd_demux_002_src0_data;                                                             // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                            // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire    [7:0] cmd_demux_002_src0_channel;                                                          // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                    // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                      // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                            // cmd_demux_003:src0_valid -> cmd_mux:sink3_valid
	wire  [149:0] cmd_demux_003_src0_data;                                                             // cmd_demux_003:src0_data -> cmd_mux:sink3_data
	wire          cmd_demux_003_src0_ready;                                                            // cmd_mux:sink3_ready -> cmd_demux_003:src0_ready
	wire    [7:0] cmd_demux_003_src0_channel;                                                          // cmd_demux_003:src0_channel -> cmd_mux:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                                    // cmd_demux_003:src0_startofpacket -> cmd_mux:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                      // cmd_demux_003:src0_endofpacket -> cmd_mux:sink3_endofpacket
	wire          cmd_demux_004_src0_valid;                                                            // cmd_demux_004:src0_valid -> cmd_mux:sink4_valid
	wire  [149:0] cmd_demux_004_src0_data;                                                             // cmd_demux_004:src0_data -> cmd_mux:sink4_data
	wire          cmd_demux_004_src0_ready;                                                            // cmd_mux:sink4_ready -> cmd_demux_004:src0_ready
	wire    [7:0] cmd_demux_004_src0_channel;                                                          // cmd_demux_004:src0_channel -> cmd_mux:sink4_channel
	wire          cmd_demux_004_src0_startofpacket;                                                    // cmd_demux_004:src0_startofpacket -> cmd_mux:sink4_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                      // cmd_demux_004:src0_endofpacket -> cmd_mux:sink4_endofpacket
	wire          cmd_demux_005_src0_valid;                                                            // cmd_demux_005:src0_valid -> cmd_mux:sink5_valid
	wire  [149:0] cmd_demux_005_src0_data;                                                             // cmd_demux_005:src0_data -> cmd_mux:sink5_data
	wire          cmd_demux_005_src0_ready;                                                            // cmd_mux:sink5_ready -> cmd_demux_005:src0_ready
	wire    [7:0] cmd_demux_005_src0_channel;                                                          // cmd_demux_005:src0_channel -> cmd_mux:sink5_channel
	wire          cmd_demux_005_src0_startofpacket;                                                    // cmd_demux_005:src0_startofpacket -> cmd_mux:sink5_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                      // cmd_demux_005:src0_endofpacket -> cmd_mux:sink5_endofpacket
	wire          cmd_demux_006_src0_valid;                                                            // cmd_demux_006:src0_valid -> cmd_mux:sink6_valid
	wire  [149:0] cmd_demux_006_src0_data;                                                             // cmd_demux_006:src0_data -> cmd_mux:sink6_data
	wire          cmd_demux_006_src0_ready;                                                            // cmd_mux:sink6_ready -> cmd_demux_006:src0_ready
	wire    [7:0] cmd_demux_006_src0_channel;                                                          // cmd_demux_006:src0_channel -> cmd_mux:sink6_channel
	wire          cmd_demux_006_src0_startofpacket;                                                    // cmd_demux_006:src0_startofpacket -> cmd_mux:sink6_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                      // cmd_demux_006:src0_endofpacket -> cmd_mux:sink6_endofpacket
	wire          cmd_demux_007_src0_valid;                                                            // cmd_demux_007:src0_valid -> cmd_mux:sink7_valid
	wire  [149:0] cmd_demux_007_src0_data;                                                             // cmd_demux_007:src0_data -> cmd_mux:sink7_data
	wire          cmd_demux_007_src0_ready;                                                            // cmd_mux:sink7_ready -> cmd_demux_007:src0_ready
	wire    [7:0] cmd_demux_007_src0_channel;                                                          // cmd_demux_007:src0_channel -> cmd_mux:sink7_channel
	wire          cmd_demux_007_src0_startofpacket;                                                    // cmd_demux_007:src0_startofpacket -> cmd_mux:sink7_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                                      // cmd_demux_007:src0_endofpacket -> cmd_mux:sink7_endofpacket
	wire          rsp_demux_src0_valid;                                                                // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [149:0] rsp_demux_src0_data;                                                                 // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [7:0] rsp_demux_src0_channel;                                                              // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                        // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                          // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [149:0] rsp_demux_src1_data;                                                                 // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                                // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [7:0] rsp_demux_src1_channel;                                                              // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                        // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                          // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                                // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [149:0] rsp_demux_src2_data;                                                                 // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                                // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire    [7:0] rsp_demux_src2_channel;                                                              // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                        // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                          // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                                // rsp_demux:src3_valid -> rsp_mux_003:sink0_valid
	wire  [149:0] rsp_demux_src3_data;                                                                 // rsp_demux:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_src3_ready;                                                                // rsp_mux_003:sink0_ready -> rsp_demux:src3_ready
	wire    [7:0] rsp_demux_src3_channel;                                                              // rsp_demux:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_src3_startofpacket;                                                        // rsp_demux:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_src3_endofpacket;                                                          // rsp_demux:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_src4_valid;                                                                // rsp_demux:src4_valid -> rsp_mux_004:sink0_valid
	wire  [149:0] rsp_demux_src4_data;                                                                 // rsp_demux:src4_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_src4_ready;                                                                // rsp_mux_004:sink0_ready -> rsp_demux:src4_ready
	wire    [7:0] rsp_demux_src4_channel;                                                              // rsp_demux:src4_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_src4_startofpacket;                                                        // rsp_demux:src4_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_src4_endofpacket;                                                          // rsp_demux:src4_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_src5_valid;                                                                // rsp_demux:src5_valid -> rsp_mux_005:sink0_valid
	wire  [149:0] rsp_demux_src5_data;                                                                 // rsp_demux:src5_data -> rsp_mux_005:sink0_data
	wire          rsp_demux_src5_ready;                                                                // rsp_mux_005:sink0_ready -> rsp_demux:src5_ready
	wire    [7:0] rsp_demux_src5_channel;                                                              // rsp_demux:src5_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_src5_startofpacket;                                                        // rsp_demux:src5_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          rsp_demux_src5_endofpacket;                                                          // rsp_demux:src5_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_src6_valid;                                                                // rsp_demux:src6_valid -> rsp_mux_006:sink0_valid
	wire  [149:0] rsp_demux_src6_data;                                                                 // rsp_demux:src6_data -> rsp_mux_006:sink0_data
	wire          rsp_demux_src6_ready;                                                                // rsp_mux_006:sink0_ready -> rsp_demux:src6_ready
	wire    [7:0] rsp_demux_src6_channel;                                                              // rsp_demux:src6_channel -> rsp_mux_006:sink0_channel
	wire          rsp_demux_src6_startofpacket;                                                        // rsp_demux:src6_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          rsp_demux_src6_endofpacket;                                                          // rsp_demux:src6_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_src7_valid;                                                                // rsp_demux:src7_valid -> rsp_mux_007:sink0_valid
	wire  [149:0] rsp_demux_src7_data;                                                                 // rsp_demux:src7_data -> rsp_mux_007:sink0_data
	wire          rsp_demux_src7_ready;                                                                // rsp_mux_007:sink0_ready -> rsp_demux:src7_ready
	wire    [7:0] rsp_demux_src7_channel;                                                              // rsp_demux:src7_channel -> rsp_mux_007:sink0_channel
	wire          rsp_demux_src7_startofpacket;                                                        // rsp_demux:src7_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          rsp_demux_src7_endofpacket;                                                          // rsp_demux:src7_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          rsp_mux_src_valid;                                                                   // rsp_mux:src_valid -> homography_dma_0_avalon_master_rsp_width_adapter:in_valid
	wire  [149:0] rsp_mux_src_data;                                                                    // rsp_mux:src_data -> homography_dma_0_avalon_master_rsp_width_adapter:in_data
	wire          rsp_mux_src_ready;                                                                   // homography_dma_0_avalon_master_rsp_width_adapter:in_ready -> rsp_mux:src_ready
	wire    [7:0] rsp_mux_src_channel;                                                                 // rsp_mux:src_channel -> homography_dma_0_avalon_master_rsp_width_adapter:in_channel
	wire          rsp_mux_src_startofpacket;                                                           // rsp_mux:src_startofpacket -> homography_dma_0_avalon_master_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                             // rsp_mux:src_endofpacket -> homography_dma_0_avalon_master_rsp_width_adapter:in_endofpacket
	wire          homography_dma_0_avalon_master_rsp_width_adapter_src_valid;                          // homography_dma_0_avalon_master_rsp_width_adapter:out_valid -> homography_dma_0_avalon_master_agent:rp_valid
	wire   [86:0] homography_dma_0_avalon_master_rsp_width_adapter_src_data;                           // homography_dma_0_avalon_master_rsp_width_adapter:out_data -> homography_dma_0_avalon_master_agent:rp_data
	wire          homography_dma_0_avalon_master_rsp_width_adapter_src_ready;                          // homography_dma_0_avalon_master_agent:rp_ready -> homography_dma_0_avalon_master_rsp_width_adapter:out_ready
	wire    [7:0] homography_dma_0_avalon_master_rsp_width_adapter_src_channel;                        // homography_dma_0_avalon_master_rsp_width_adapter:out_channel -> homography_dma_0_avalon_master_agent:rp_channel
	wire          homography_dma_0_avalon_master_rsp_width_adapter_src_startofpacket;                  // homography_dma_0_avalon_master_rsp_width_adapter:out_startofpacket -> homography_dma_0_avalon_master_agent:rp_startofpacket
	wire          homography_dma_0_avalon_master_rsp_width_adapter_src_endofpacket;                    // homography_dma_0_avalon_master_rsp_width_adapter:out_endofpacket -> homography_dma_0_avalon_master_agent:rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                               // rsp_mux_001:src_valid -> homography_dma_0_avalon_master_1_rsp_width_adapter:in_valid
	wire  [149:0] rsp_mux_001_src_data;                                                                // rsp_mux_001:src_data -> homography_dma_0_avalon_master_1_rsp_width_adapter:in_data
	wire          rsp_mux_001_src_ready;                                                               // homography_dma_0_avalon_master_1_rsp_width_adapter:in_ready -> rsp_mux_001:src_ready
	wire    [7:0] rsp_mux_001_src_channel;                                                             // rsp_mux_001:src_channel -> homography_dma_0_avalon_master_1_rsp_width_adapter:in_channel
	wire          rsp_mux_001_src_startofpacket;                                                       // rsp_mux_001:src_startofpacket -> homography_dma_0_avalon_master_1_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                         // rsp_mux_001:src_endofpacket -> homography_dma_0_avalon_master_1_rsp_width_adapter:in_endofpacket
	wire          homography_dma_0_avalon_master_1_rsp_width_adapter_src_valid;                        // homography_dma_0_avalon_master_1_rsp_width_adapter:out_valid -> homography_dma_0_avalon_master_1_agent:rp_valid
	wire   [86:0] homography_dma_0_avalon_master_1_rsp_width_adapter_src_data;                         // homography_dma_0_avalon_master_1_rsp_width_adapter:out_data -> homography_dma_0_avalon_master_1_agent:rp_data
	wire          homography_dma_0_avalon_master_1_rsp_width_adapter_src_ready;                        // homography_dma_0_avalon_master_1_agent:rp_ready -> homography_dma_0_avalon_master_1_rsp_width_adapter:out_ready
	wire    [7:0] homography_dma_0_avalon_master_1_rsp_width_adapter_src_channel;                      // homography_dma_0_avalon_master_1_rsp_width_adapter:out_channel -> homography_dma_0_avalon_master_1_agent:rp_channel
	wire          homography_dma_0_avalon_master_1_rsp_width_adapter_src_startofpacket;                // homography_dma_0_avalon_master_1_rsp_width_adapter:out_startofpacket -> homography_dma_0_avalon_master_1_agent:rp_startofpacket
	wire          homography_dma_0_avalon_master_1_rsp_width_adapter_src_endofpacket;                  // homography_dma_0_avalon_master_1_rsp_width_adapter:out_endofpacket -> homography_dma_0_avalon_master_1_agent:rp_endofpacket
	wire          rsp_mux_002_src_valid;                                                               // rsp_mux_002:src_valid -> addVector_0_avalon_rd1_1_1_1_rsp_width_adapter:in_valid
	wire  [149:0] rsp_mux_002_src_data;                                                                // rsp_mux_002:src_data -> addVector_0_avalon_rd1_1_1_1_rsp_width_adapter:in_data
	wire          rsp_mux_002_src_ready;                                                               // addVector_0_avalon_rd1_1_1_1_rsp_width_adapter:in_ready -> rsp_mux_002:src_ready
	wire    [7:0] rsp_mux_002_src_channel;                                                             // rsp_mux_002:src_channel -> addVector_0_avalon_rd1_1_1_1_rsp_width_adapter:in_channel
	wire          rsp_mux_002_src_startofpacket;                                                       // rsp_mux_002:src_startofpacket -> addVector_0_avalon_rd1_1_1_1_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                         // rsp_mux_002:src_endofpacket -> addVector_0_avalon_rd1_1_1_1_rsp_width_adapter:in_endofpacket
	wire          addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_valid;                            // addVector_0_avalon_rd1_1_1_1_rsp_width_adapter:out_valid -> addVector_0_avalon_rd1_1_1_1_agent:rp_valid
	wire  [113:0] addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_data;                             // addVector_0_avalon_rd1_1_1_1_rsp_width_adapter:out_data -> addVector_0_avalon_rd1_1_1_1_agent:rp_data
	wire          addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_ready;                            // addVector_0_avalon_rd1_1_1_1_agent:rp_ready -> addVector_0_avalon_rd1_1_1_1_rsp_width_adapter:out_ready
	wire    [7:0] addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_channel;                          // addVector_0_avalon_rd1_1_1_1_rsp_width_adapter:out_channel -> addVector_0_avalon_rd1_1_1_1_agent:rp_channel
	wire          addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_startofpacket;                    // addVector_0_avalon_rd1_1_1_1_rsp_width_adapter:out_startofpacket -> addVector_0_avalon_rd1_1_1_1_agent:rp_startofpacket
	wire          addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_endofpacket;                      // addVector_0_avalon_rd1_1_1_1_rsp_width_adapter:out_endofpacket -> addVector_0_avalon_rd1_1_1_1_agent:rp_endofpacket
	wire          rsp_mux_003_src_valid;                                                               // rsp_mux_003:src_valid -> addVector_1_avalon_rd1_1_1_1_rsp_width_adapter:in_valid
	wire  [149:0] rsp_mux_003_src_data;                                                                // rsp_mux_003:src_data -> addVector_1_avalon_rd1_1_1_1_rsp_width_adapter:in_data
	wire          rsp_mux_003_src_ready;                                                               // addVector_1_avalon_rd1_1_1_1_rsp_width_adapter:in_ready -> rsp_mux_003:src_ready
	wire    [7:0] rsp_mux_003_src_channel;                                                             // rsp_mux_003:src_channel -> addVector_1_avalon_rd1_1_1_1_rsp_width_adapter:in_channel
	wire          rsp_mux_003_src_startofpacket;                                                       // rsp_mux_003:src_startofpacket -> addVector_1_avalon_rd1_1_1_1_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                         // rsp_mux_003:src_endofpacket -> addVector_1_avalon_rd1_1_1_1_rsp_width_adapter:in_endofpacket
	wire          addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_valid;                            // addVector_1_avalon_rd1_1_1_1_rsp_width_adapter:out_valid -> addVector_1_avalon_rd1_1_1_1_agent:rp_valid
	wire  [113:0] addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_data;                             // addVector_1_avalon_rd1_1_1_1_rsp_width_adapter:out_data -> addVector_1_avalon_rd1_1_1_1_agent:rp_data
	wire          addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_ready;                            // addVector_1_avalon_rd1_1_1_1_agent:rp_ready -> addVector_1_avalon_rd1_1_1_1_rsp_width_adapter:out_ready
	wire    [7:0] addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_channel;                          // addVector_1_avalon_rd1_1_1_1_rsp_width_adapter:out_channel -> addVector_1_avalon_rd1_1_1_1_agent:rp_channel
	wire          addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_startofpacket;                    // addVector_1_avalon_rd1_1_1_1_rsp_width_adapter:out_startofpacket -> addVector_1_avalon_rd1_1_1_1_agent:rp_startofpacket
	wire          addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_endofpacket;                      // addVector_1_avalon_rd1_1_1_1_rsp_width_adapter:out_endofpacket -> addVector_1_avalon_rd1_1_1_1_agent:rp_endofpacket
	wire          rsp_mux_004_src_valid;                                                               // rsp_mux_004:src_valid -> addVector_0_avalon_rd2_rsp_width_adapter:in_valid
	wire  [149:0] rsp_mux_004_src_data;                                                                // rsp_mux_004:src_data -> addVector_0_avalon_rd2_rsp_width_adapter:in_data
	wire          rsp_mux_004_src_ready;                                                               // addVector_0_avalon_rd2_rsp_width_adapter:in_ready -> rsp_mux_004:src_ready
	wire    [7:0] rsp_mux_004_src_channel;                                                             // rsp_mux_004:src_channel -> addVector_0_avalon_rd2_rsp_width_adapter:in_channel
	wire          rsp_mux_004_src_startofpacket;                                                       // rsp_mux_004:src_startofpacket -> addVector_0_avalon_rd2_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                         // rsp_mux_004:src_endofpacket -> addVector_0_avalon_rd2_rsp_width_adapter:in_endofpacket
	wire          addvector_0_avalon_rd2_rsp_width_adapter_src_valid;                                  // addVector_0_avalon_rd2_rsp_width_adapter:out_valid -> addVector_0_avalon_rd2_agent:rp_valid
	wire  [113:0] addvector_0_avalon_rd2_rsp_width_adapter_src_data;                                   // addVector_0_avalon_rd2_rsp_width_adapter:out_data -> addVector_0_avalon_rd2_agent:rp_data
	wire          addvector_0_avalon_rd2_rsp_width_adapter_src_ready;                                  // addVector_0_avalon_rd2_agent:rp_ready -> addVector_0_avalon_rd2_rsp_width_adapter:out_ready
	wire    [7:0] addvector_0_avalon_rd2_rsp_width_adapter_src_channel;                                // addVector_0_avalon_rd2_rsp_width_adapter:out_channel -> addVector_0_avalon_rd2_agent:rp_channel
	wire          addvector_0_avalon_rd2_rsp_width_adapter_src_startofpacket;                          // addVector_0_avalon_rd2_rsp_width_adapter:out_startofpacket -> addVector_0_avalon_rd2_agent:rp_startofpacket
	wire          addvector_0_avalon_rd2_rsp_width_adapter_src_endofpacket;                            // addVector_0_avalon_rd2_rsp_width_adapter:out_endofpacket -> addVector_0_avalon_rd2_agent:rp_endofpacket
	wire          rsp_mux_005_src_valid;                                                               // rsp_mux_005:src_valid -> addVector_1_avalon_rd2_rsp_width_adapter:in_valid
	wire  [149:0] rsp_mux_005_src_data;                                                                // rsp_mux_005:src_data -> addVector_1_avalon_rd2_rsp_width_adapter:in_data
	wire          rsp_mux_005_src_ready;                                                               // addVector_1_avalon_rd2_rsp_width_adapter:in_ready -> rsp_mux_005:src_ready
	wire    [7:0] rsp_mux_005_src_channel;                                                             // rsp_mux_005:src_channel -> addVector_1_avalon_rd2_rsp_width_adapter:in_channel
	wire          rsp_mux_005_src_startofpacket;                                                       // rsp_mux_005:src_startofpacket -> addVector_1_avalon_rd2_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                         // rsp_mux_005:src_endofpacket -> addVector_1_avalon_rd2_rsp_width_adapter:in_endofpacket
	wire          addvector_1_avalon_rd2_rsp_width_adapter_src_valid;                                  // addVector_1_avalon_rd2_rsp_width_adapter:out_valid -> addVector_1_avalon_rd2_agent:rp_valid
	wire  [113:0] addvector_1_avalon_rd2_rsp_width_adapter_src_data;                                   // addVector_1_avalon_rd2_rsp_width_adapter:out_data -> addVector_1_avalon_rd2_agent:rp_data
	wire          addvector_1_avalon_rd2_rsp_width_adapter_src_ready;                                  // addVector_1_avalon_rd2_agent:rp_ready -> addVector_1_avalon_rd2_rsp_width_adapter:out_ready
	wire    [7:0] addvector_1_avalon_rd2_rsp_width_adapter_src_channel;                                // addVector_1_avalon_rd2_rsp_width_adapter:out_channel -> addVector_1_avalon_rd2_agent:rp_channel
	wire          addvector_1_avalon_rd2_rsp_width_adapter_src_startofpacket;                          // addVector_1_avalon_rd2_rsp_width_adapter:out_startofpacket -> addVector_1_avalon_rd2_agent:rp_startofpacket
	wire          addvector_1_avalon_rd2_rsp_width_adapter_src_endofpacket;                            // addVector_1_avalon_rd2_rsp_width_adapter:out_endofpacket -> addVector_1_avalon_rd2_agent:rp_endofpacket
	wire          rsp_mux_006_src_valid;                                                               // rsp_mux_006:src_valid -> addVector_0_avalon_wr_rsp_width_adapter:in_valid
	wire  [149:0] rsp_mux_006_src_data;                                                                // rsp_mux_006:src_data -> addVector_0_avalon_wr_rsp_width_adapter:in_data
	wire          rsp_mux_006_src_ready;                                                               // addVector_0_avalon_wr_rsp_width_adapter:in_ready -> rsp_mux_006:src_ready
	wire    [7:0] rsp_mux_006_src_channel;                                                             // rsp_mux_006:src_channel -> addVector_0_avalon_wr_rsp_width_adapter:in_channel
	wire          rsp_mux_006_src_startofpacket;                                                       // rsp_mux_006:src_startofpacket -> addVector_0_avalon_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                         // rsp_mux_006:src_endofpacket -> addVector_0_avalon_wr_rsp_width_adapter:in_endofpacket
	wire          addvector_0_avalon_wr_rsp_width_adapter_src_valid;                                   // addVector_0_avalon_wr_rsp_width_adapter:out_valid -> addVector_0_avalon_wr_agent:rp_valid
	wire  [113:0] addvector_0_avalon_wr_rsp_width_adapter_src_data;                                    // addVector_0_avalon_wr_rsp_width_adapter:out_data -> addVector_0_avalon_wr_agent:rp_data
	wire          addvector_0_avalon_wr_rsp_width_adapter_src_ready;                                   // addVector_0_avalon_wr_agent:rp_ready -> addVector_0_avalon_wr_rsp_width_adapter:out_ready
	wire    [7:0] addvector_0_avalon_wr_rsp_width_adapter_src_channel;                                 // addVector_0_avalon_wr_rsp_width_adapter:out_channel -> addVector_0_avalon_wr_agent:rp_channel
	wire          addvector_0_avalon_wr_rsp_width_adapter_src_startofpacket;                           // addVector_0_avalon_wr_rsp_width_adapter:out_startofpacket -> addVector_0_avalon_wr_agent:rp_startofpacket
	wire          addvector_0_avalon_wr_rsp_width_adapter_src_endofpacket;                             // addVector_0_avalon_wr_rsp_width_adapter:out_endofpacket -> addVector_0_avalon_wr_agent:rp_endofpacket
	wire          rsp_mux_007_src_valid;                                                               // rsp_mux_007:src_valid -> addVector_1_avalon_wr_rsp_width_adapter:in_valid
	wire  [149:0] rsp_mux_007_src_data;                                                                // rsp_mux_007:src_data -> addVector_1_avalon_wr_rsp_width_adapter:in_data
	wire          rsp_mux_007_src_ready;                                                               // addVector_1_avalon_wr_rsp_width_adapter:in_ready -> rsp_mux_007:src_ready
	wire    [7:0] rsp_mux_007_src_channel;                                                             // rsp_mux_007:src_channel -> addVector_1_avalon_wr_rsp_width_adapter:in_channel
	wire          rsp_mux_007_src_startofpacket;                                                       // rsp_mux_007:src_startofpacket -> addVector_1_avalon_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                         // rsp_mux_007:src_endofpacket -> addVector_1_avalon_wr_rsp_width_adapter:in_endofpacket
	wire          addvector_1_avalon_wr_rsp_width_adapter_src_valid;                                   // addVector_1_avalon_wr_rsp_width_adapter:out_valid -> addVector_1_avalon_wr_agent:rp_valid
	wire  [113:0] addvector_1_avalon_wr_rsp_width_adapter_src_data;                                    // addVector_1_avalon_wr_rsp_width_adapter:out_data -> addVector_1_avalon_wr_agent:rp_data
	wire          addvector_1_avalon_wr_rsp_width_adapter_src_ready;                                   // addVector_1_avalon_wr_agent:rp_ready -> addVector_1_avalon_wr_rsp_width_adapter:out_ready
	wire    [7:0] addvector_1_avalon_wr_rsp_width_adapter_src_channel;                                 // addVector_1_avalon_wr_rsp_width_adapter:out_channel -> addVector_1_avalon_wr_agent:rp_channel
	wire          addvector_1_avalon_wr_rsp_width_adapter_src_startofpacket;                           // addVector_1_avalon_wr_rsp_width_adapter:out_startofpacket -> addVector_1_avalon_wr_agent:rp_startofpacket
	wire          addvector_1_avalon_wr_rsp_width_adapter_src_endofpacket;                             // addVector_1_avalon_wr_rsp_width_adapter:out_endofpacket -> addVector_1_avalon_wr_agent:rp_endofpacket
	wire          router_src_valid;                                                                    // router:src_valid -> homography_dma_0_avalon_master_cmd_width_adapter:in_valid
	wire   [86:0] router_src_data;                                                                     // router:src_data -> homography_dma_0_avalon_master_cmd_width_adapter:in_data
	wire          router_src_ready;                                                                    // homography_dma_0_avalon_master_cmd_width_adapter:in_ready -> router:src_ready
	wire    [7:0] router_src_channel;                                                                  // router:src_channel -> homography_dma_0_avalon_master_cmd_width_adapter:in_channel
	wire          router_src_startofpacket;                                                            // router:src_startofpacket -> homography_dma_0_avalon_master_cmd_width_adapter:in_startofpacket
	wire          router_src_endofpacket;                                                              // router:src_endofpacket -> homography_dma_0_avalon_master_cmd_width_adapter:in_endofpacket
	wire          homography_dma_0_avalon_master_cmd_width_adapter_src_valid;                          // homography_dma_0_avalon_master_cmd_width_adapter:out_valid -> cmd_demux:sink_valid
	wire  [149:0] homography_dma_0_avalon_master_cmd_width_adapter_src_data;                           // homography_dma_0_avalon_master_cmd_width_adapter:out_data -> cmd_demux:sink_data
	wire          homography_dma_0_avalon_master_cmd_width_adapter_src_ready;                          // cmd_demux:sink_ready -> homography_dma_0_avalon_master_cmd_width_adapter:out_ready
	wire    [7:0] homography_dma_0_avalon_master_cmd_width_adapter_src_channel;                        // homography_dma_0_avalon_master_cmd_width_adapter:out_channel -> cmd_demux:sink_channel
	wire          homography_dma_0_avalon_master_cmd_width_adapter_src_startofpacket;                  // homography_dma_0_avalon_master_cmd_width_adapter:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          homography_dma_0_avalon_master_cmd_width_adapter_src_endofpacket;                    // homography_dma_0_avalon_master_cmd_width_adapter:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          router_001_src_valid;                                                                // router_001:src_valid -> homography_dma_0_avalon_master_1_cmd_width_adapter:in_valid
	wire   [86:0] router_001_src_data;                                                                 // router_001:src_data -> homography_dma_0_avalon_master_1_cmd_width_adapter:in_data
	wire          router_001_src_ready;                                                                // homography_dma_0_avalon_master_1_cmd_width_adapter:in_ready -> router_001:src_ready
	wire    [7:0] router_001_src_channel;                                                              // router_001:src_channel -> homography_dma_0_avalon_master_1_cmd_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                                        // router_001:src_startofpacket -> homography_dma_0_avalon_master_1_cmd_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                                          // router_001:src_endofpacket -> homography_dma_0_avalon_master_1_cmd_width_adapter:in_endofpacket
	wire          homography_dma_0_avalon_master_1_cmd_width_adapter_src_valid;                        // homography_dma_0_avalon_master_1_cmd_width_adapter:out_valid -> cmd_demux_001:sink_valid
	wire  [149:0] homography_dma_0_avalon_master_1_cmd_width_adapter_src_data;                         // homography_dma_0_avalon_master_1_cmd_width_adapter:out_data -> cmd_demux_001:sink_data
	wire          homography_dma_0_avalon_master_1_cmd_width_adapter_src_ready;                        // cmd_demux_001:sink_ready -> homography_dma_0_avalon_master_1_cmd_width_adapter:out_ready
	wire    [7:0] homography_dma_0_avalon_master_1_cmd_width_adapter_src_channel;                      // homography_dma_0_avalon_master_1_cmd_width_adapter:out_channel -> cmd_demux_001:sink_channel
	wire          homography_dma_0_avalon_master_1_cmd_width_adapter_src_startofpacket;                // homography_dma_0_avalon_master_1_cmd_width_adapter:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          homography_dma_0_avalon_master_1_cmd_width_adapter_src_endofpacket;                  // homography_dma_0_avalon_master_1_cmd_width_adapter:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          router_002_src_valid;                                                                // router_002:src_valid -> addVector_0_avalon_rd1_1_1_1_cmd_width_adapter:in_valid
	wire  [113:0] router_002_src_data;                                                                 // router_002:src_data -> addVector_0_avalon_rd1_1_1_1_cmd_width_adapter:in_data
	wire          router_002_src_ready;                                                                // addVector_0_avalon_rd1_1_1_1_cmd_width_adapter:in_ready -> router_002:src_ready
	wire    [7:0] router_002_src_channel;                                                              // router_002:src_channel -> addVector_0_avalon_rd1_1_1_1_cmd_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                        // router_002:src_startofpacket -> addVector_0_avalon_rd1_1_1_1_cmd_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                          // router_002:src_endofpacket -> addVector_0_avalon_rd1_1_1_1_cmd_width_adapter:in_endofpacket
	wire          addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_valid;                            // addVector_0_avalon_rd1_1_1_1_cmd_width_adapter:out_valid -> cmd_demux_002:sink_valid
	wire  [149:0] addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_data;                             // addVector_0_avalon_rd1_1_1_1_cmd_width_adapter:out_data -> cmd_demux_002:sink_data
	wire          addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_ready;                            // cmd_demux_002:sink_ready -> addVector_0_avalon_rd1_1_1_1_cmd_width_adapter:out_ready
	wire    [7:0] addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_channel;                          // addVector_0_avalon_rd1_1_1_1_cmd_width_adapter:out_channel -> cmd_demux_002:sink_channel
	wire          addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_startofpacket;                    // addVector_0_avalon_rd1_1_1_1_cmd_width_adapter:out_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_endofpacket;                      // addVector_0_avalon_rd1_1_1_1_cmd_width_adapter:out_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          router_003_src_valid;                                                                // router_003:src_valid -> addVector_1_avalon_rd1_1_1_1_cmd_width_adapter:in_valid
	wire  [113:0] router_003_src_data;                                                                 // router_003:src_data -> addVector_1_avalon_rd1_1_1_1_cmd_width_adapter:in_data
	wire          router_003_src_ready;                                                                // addVector_1_avalon_rd1_1_1_1_cmd_width_adapter:in_ready -> router_003:src_ready
	wire    [7:0] router_003_src_channel;                                                              // router_003:src_channel -> addVector_1_avalon_rd1_1_1_1_cmd_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                                        // router_003:src_startofpacket -> addVector_1_avalon_rd1_1_1_1_cmd_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                                          // router_003:src_endofpacket -> addVector_1_avalon_rd1_1_1_1_cmd_width_adapter:in_endofpacket
	wire          addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_valid;                            // addVector_1_avalon_rd1_1_1_1_cmd_width_adapter:out_valid -> cmd_demux_003:sink_valid
	wire  [149:0] addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_data;                             // addVector_1_avalon_rd1_1_1_1_cmd_width_adapter:out_data -> cmd_demux_003:sink_data
	wire          addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_ready;                            // cmd_demux_003:sink_ready -> addVector_1_avalon_rd1_1_1_1_cmd_width_adapter:out_ready
	wire    [7:0] addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_channel;                          // addVector_1_avalon_rd1_1_1_1_cmd_width_adapter:out_channel -> cmd_demux_003:sink_channel
	wire          addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_startofpacket;                    // addVector_1_avalon_rd1_1_1_1_cmd_width_adapter:out_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_endofpacket;                      // addVector_1_avalon_rd1_1_1_1_cmd_width_adapter:out_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          router_004_src_valid;                                                                // router_004:src_valid -> addVector_0_avalon_rd2_cmd_width_adapter:in_valid
	wire  [113:0] router_004_src_data;                                                                 // router_004:src_data -> addVector_0_avalon_rd2_cmd_width_adapter:in_data
	wire          router_004_src_ready;                                                                // addVector_0_avalon_rd2_cmd_width_adapter:in_ready -> router_004:src_ready
	wire    [7:0] router_004_src_channel;                                                              // router_004:src_channel -> addVector_0_avalon_rd2_cmd_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                                        // router_004:src_startofpacket -> addVector_0_avalon_rd2_cmd_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                                          // router_004:src_endofpacket -> addVector_0_avalon_rd2_cmd_width_adapter:in_endofpacket
	wire          addvector_0_avalon_rd2_cmd_width_adapter_src_valid;                                  // addVector_0_avalon_rd2_cmd_width_adapter:out_valid -> cmd_demux_004:sink_valid
	wire  [149:0] addvector_0_avalon_rd2_cmd_width_adapter_src_data;                                   // addVector_0_avalon_rd2_cmd_width_adapter:out_data -> cmd_demux_004:sink_data
	wire          addvector_0_avalon_rd2_cmd_width_adapter_src_ready;                                  // cmd_demux_004:sink_ready -> addVector_0_avalon_rd2_cmd_width_adapter:out_ready
	wire    [7:0] addvector_0_avalon_rd2_cmd_width_adapter_src_channel;                                // addVector_0_avalon_rd2_cmd_width_adapter:out_channel -> cmd_demux_004:sink_channel
	wire          addvector_0_avalon_rd2_cmd_width_adapter_src_startofpacket;                          // addVector_0_avalon_rd2_cmd_width_adapter:out_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          addvector_0_avalon_rd2_cmd_width_adapter_src_endofpacket;                            // addVector_0_avalon_rd2_cmd_width_adapter:out_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          router_005_src_valid;                                                                // router_005:src_valid -> addVector_1_avalon_rd2_cmd_width_adapter:in_valid
	wire  [113:0] router_005_src_data;                                                                 // router_005:src_data -> addVector_1_avalon_rd2_cmd_width_adapter:in_data
	wire          router_005_src_ready;                                                                // addVector_1_avalon_rd2_cmd_width_adapter:in_ready -> router_005:src_ready
	wire    [7:0] router_005_src_channel;                                                              // router_005:src_channel -> addVector_1_avalon_rd2_cmd_width_adapter:in_channel
	wire          router_005_src_startofpacket;                                                        // router_005:src_startofpacket -> addVector_1_avalon_rd2_cmd_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                                          // router_005:src_endofpacket -> addVector_1_avalon_rd2_cmd_width_adapter:in_endofpacket
	wire          addvector_1_avalon_rd2_cmd_width_adapter_src_valid;                                  // addVector_1_avalon_rd2_cmd_width_adapter:out_valid -> cmd_demux_005:sink_valid
	wire  [149:0] addvector_1_avalon_rd2_cmd_width_adapter_src_data;                                   // addVector_1_avalon_rd2_cmd_width_adapter:out_data -> cmd_demux_005:sink_data
	wire          addvector_1_avalon_rd2_cmd_width_adapter_src_ready;                                  // cmd_demux_005:sink_ready -> addVector_1_avalon_rd2_cmd_width_adapter:out_ready
	wire    [7:0] addvector_1_avalon_rd2_cmd_width_adapter_src_channel;                                // addVector_1_avalon_rd2_cmd_width_adapter:out_channel -> cmd_demux_005:sink_channel
	wire          addvector_1_avalon_rd2_cmd_width_adapter_src_startofpacket;                          // addVector_1_avalon_rd2_cmd_width_adapter:out_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          addvector_1_avalon_rd2_cmd_width_adapter_src_endofpacket;                            // addVector_1_avalon_rd2_cmd_width_adapter:out_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          router_006_src_valid;                                                                // router_006:src_valid -> addVector_0_avalon_wr_cmd_width_adapter:in_valid
	wire  [113:0] router_006_src_data;                                                                 // router_006:src_data -> addVector_0_avalon_wr_cmd_width_adapter:in_data
	wire          router_006_src_ready;                                                                // addVector_0_avalon_wr_cmd_width_adapter:in_ready -> router_006:src_ready
	wire    [7:0] router_006_src_channel;                                                              // router_006:src_channel -> addVector_0_avalon_wr_cmd_width_adapter:in_channel
	wire          router_006_src_startofpacket;                                                        // router_006:src_startofpacket -> addVector_0_avalon_wr_cmd_width_adapter:in_startofpacket
	wire          router_006_src_endofpacket;                                                          // router_006:src_endofpacket -> addVector_0_avalon_wr_cmd_width_adapter:in_endofpacket
	wire          addvector_0_avalon_wr_cmd_width_adapter_src_valid;                                   // addVector_0_avalon_wr_cmd_width_adapter:out_valid -> cmd_demux_006:sink_valid
	wire  [149:0] addvector_0_avalon_wr_cmd_width_adapter_src_data;                                    // addVector_0_avalon_wr_cmd_width_adapter:out_data -> cmd_demux_006:sink_data
	wire          addvector_0_avalon_wr_cmd_width_adapter_src_ready;                                   // cmd_demux_006:sink_ready -> addVector_0_avalon_wr_cmd_width_adapter:out_ready
	wire    [7:0] addvector_0_avalon_wr_cmd_width_adapter_src_channel;                                 // addVector_0_avalon_wr_cmd_width_adapter:out_channel -> cmd_demux_006:sink_channel
	wire          addvector_0_avalon_wr_cmd_width_adapter_src_startofpacket;                           // addVector_0_avalon_wr_cmd_width_adapter:out_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          addvector_0_avalon_wr_cmd_width_adapter_src_endofpacket;                             // addVector_0_avalon_wr_cmd_width_adapter:out_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          router_007_src_valid;                                                                // router_007:src_valid -> addVector_1_avalon_wr_cmd_width_adapter:in_valid
	wire  [113:0] router_007_src_data;                                                                 // router_007:src_data -> addVector_1_avalon_wr_cmd_width_adapter:in_data
	wire          router_007_src_ready;                                                                // addVector_1_avalon_wr_cmd_width_adapter:in_ready -> router_007:src_ready
	wire    [7:0] router_007_src_channel;                                                              // router_007:src_channel -> addVector_1_avalon_wr_cmd_width_adapter:in_channel
	wire          router_007_src_startofpacket;                                                        // router_007:src_startofpacket -> addVector_1_avalon_wr_cmd_width_adapter:in_startofpacket
	wire          router_007_src_endofpacket;                                                          // router_007:src_endofpacket -> addVector_1_avalon_wr_cmd_width_adapter:in_endofpacket
	wire          addvector_1_avalon_wr_cmd_width_adapter_src_valid;                                   // addVector_1_avalon_wr_cmd_width_adapter:out_valid -> cmd_demux_007:sink_valid
	wire  [149:0] addvector_1_avalon_wr_cmd_width_adapter_src_data;                                    // addVector_1_avalon_wr_cmd_width_adapter:out_data -> cmd_demux_007:sink_data
	wire          addvector_1_avalon_wr_cmd_width_adapter_src_ready;                                   // cmd_demux_007:sink_ready -> addVector_1_avalon_wr_cmd_width_adapter:out_ready
	wire    [7:0] addvector_1_avalon_wr_cmd_width_adapter_src_channel;                                 // addVector_1_avalon_wr_cmd_width_adapter:out_channel -> cmd_demux_007:sink_channel
	wire          addvector_1_avalon_wr_cmd_width_adapter_src_startofpacket;                           // addVector_1_avalon_wr_cmd_width_adapter:out_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          addvector_1_avalon_wr_cmd_width_adapter_src_endofpacket;                             // addVector_1_avalon_wr_cmd_width_adapter:out_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          hps_0_f2h_sdram0_data_agent_rdata_fifo_out_valid;                                    // hps_0_f2h_sdram0_data_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [65:0] hps_0_f2h_sdram0_data_agent_rdata_fifo_out_data;                                     // hps_0_f2h_sdram0_data_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          hps_0_f2h_sdram0_data_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter:in_0_ready -> hps_0_f2h_sdram0_data_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                       // avalon_st_adapter:out_0_valid -> hps_0_f2h_sdram0_data_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_out_0_data;                                                        // avalon_st_adapter:out_0_data -> hps_0_f2h_sdram0_data_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                       // hps_0_f2h_sdram0_data_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                       // avalon_st_adapter:out_0_error -> hps_0_f2h_sdram0_data_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) homography_dma_0_avalon_master_translator (
		.clk                    (clk_0_clk_clk),                                                                     //                       clk.clk
		.reset                  (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),                           //                     reset.reset
		.uav_address            (homography_dma_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (homography_dma_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (homography_dma_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (homography_dma_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (homography_dma_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (homography_dma_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (homography_dma_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (homography_dma_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (homography_dma_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (homography_dma_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (homography_dma_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (homography_dma_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (homography_dma_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_read                (homography_dma_0_avalon_master_read),                                               //                          .read
		.av_readdata            (homography_dma_0_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (homography_dma_0_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                              //               (terminated)
		.av_byteenable          (1'b1),                                                                              //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                                              //               (terminated)
		.av_write               (1'b0),                                                                              //               (terminated)
		.av_writedata           (8'b00000000),                                                                       //               (terminated)
		.av_lock                (1'b0),                                                                              //               (terminated)
		.av_debugaccess         (1'b0),                                                                              //               (terminated)
		.uav_clken              (),                                                                                  //               (terminated)
		.av_clken               (1'b1),                                                                              //               (terminated)
		.uav_response           (2'b00),                                                                             //               (terminated)
		.av_response            (),                                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) homography_dma_0_avalon_master_1_translator (
		.clk                    (clk_0_clk_clk),                                                                       //                       clk.clk
		.reset                  (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),                             //                     reset.reset
		.uav_address            (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (homography_dma_0_avalon_master_1_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (homography_dma_0_avalon_master_1_waitrequest),                                        //                          .waitrequest
		.av_write               (homography_dma_0_avalon_master_1_write),                                              //                          .write
		.av_writedata           (homography_dma_0_avalon_master_1_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                //               (terminated)
		.av_byteenable          (1'b1),                                                                                //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                                //               (terminated)
		.av_read                (1'b0),                                                                                //               (terminated)
		.av_readdata            (),                                                                                    //               (terminated)
		.av_readdatavalid       (),                                                                                    //               (terminated)
		.av_lock                (1'b0),                                                                                //               (terminated)
		.av_debugaccess         (1'b0),                                                                                //               (terminated)
		.uav_clken              (),                                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                                //               (terminated)
		.uav_response           (2'b00),                                                                               //               (terminated)
		.av_response            (),                                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) addvector_0_avalon_rd1_1_1_1_translator (
		.clk                    (clk_0_clk_clk),                                                                   //                       clk.clk
		.reset                  (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (addVector_0_avalon_rd1_1_1_1_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (addVector_0_avalon_rd1_1_1_1_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (addVector_0_avalon_rd1_1_1_1_burstcount),                                         //                          .burstcount
		.av_read                (addVector_0_avalon_rd1_1_1_1_read),                                               //                          .read
		.av_readdata            (addVector_0_avalon_rd1_1_1_1_readdata),                                           //                          .readdata
		.av_readdatavalid       (addVector_0_avalon_rd1_1_1_1_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable          (4'b1111),                                                                         //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                                            //               (terminated)
		.av_write               (1'b0),                                                                            //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                            //               (terminated)
		.av_lock                (1'b0),                                                                            //               (terminated)
		.av_debugaccess         (1'b0),                                                                            //               (terminated)
		.uav_clken              (),                                                                                //               (terminated)
		.av_clken               (1'b1),                                                                            //               (terminated)
		.uav_response           (2'b00),                                                                           //               (terminated)
		.av_response            (),                                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) addvector_1_avalon_rd1_1_1_1_translator (
		.clk                    (clk_0_clk_clk),                                                                   //                       clk.clk
		.reset                  (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (addVector_1_avalon_rd1_1_1_1_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (addVector_1_avalon_rd1_1_1_1_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (addVector_1_avalon_rd1_1_1_1_burstcount),                                         //                          .burstcount
		.av_read                (addVector_1_avalon_rd1_1_1_1_read),                                               //                          .read
		.av_readdata            (addVector_1_avalon_rd1_1_1_1_readdata),                                           //                          .readdata
		.av_readdatavalid       (addVector_1_avalon_rd1_1_1_1_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable          (4'b1111),                                                                         //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                                            //               (terminated)
		.av_write               (1'b0),                                                                            //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                            //               (terminated)
		.av_lock                (1'b0),                                                                            //               (terminated)
		.av_debugaccess         (1'b0),                                                                            //               (terminated)
		.uav_clken              (),                                                                                //               (terminated)
		.av_clken               (1'b1),                                                                            //               (terminated)
		.uav_response           (2'b00),                                                                           //               (terminated)
		.av_response            (),                                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) addvector_0_avalon_rd2_translator (
		.clk                    (clk_0_clk_clk),                                                             //                       clk.clk
		.reset                  (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (addvector_0_avalon_rd2_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (addvector_0_avalon_rd2_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (addvector_0_avalon_rd2_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (addvector_0_avalon_rd2_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (addvector_0_avalon_rd2_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (addvector_0_avalon_rd2_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (addvector_0_avalon_rd2_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (addvector_0_avalon_rd2_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (addvector_0_avalon_rd2_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (addvector_0_avalon_rd2_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (addvector_0_avalon_rd2_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (addVector_0_avalon_rd2_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (addVector_0_avalon_rd2_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (addVector_0_avalon_rd2_burstcount),                                         //                          .burstcount
		.av_read                (addVector_0_avalon_rd2_read),                                               //                          .read
		.av_readdata            (addVector_0_avalon_rd2_readdata),                                           //                          .readdata
		.av_readdatavalid       (addVector_0_avalon_rd2_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) addvector_1_avalon_rd2_translator (
		.clk                    (clk_0_clk_clk),                                                             //                       clk.clk
		.reset                  (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (addvector_1_avalon_rd2_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (addvector_1_avalon_rd2_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (addvector_1_avalon_rd2_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (addvector_1_avalon_rd2_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (addvector_1_avalon_rd2_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (addvector_1_avalon_rd2_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (addvector_1_avalon_rd2_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (addvector_1_avalon_rd2_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (addvector_1_avalon_rd2_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (addvector_1_avalon_rd2_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (addvector_1_avalon_rd2_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (addVector_1_avalon_rd2_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (addVector_1_avalon_rd2_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (addVector_1_avalon_rd2_burstcount),                                         //                          .burstcount
		.av_read                (addVector_1_avalon_rd2_read),                                               //                          .read
		.av_readdata            (addVector_1_avalon_rd2_readdata),                                           //                          .readdata
		.av_readdatavalid       (addVector_1_avalon_rd2_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) addvector_0_avalon_wr_translator (
		.clk                    (clk_0_clk_clk),                                                            //                       clk.clk
		.reset                  (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (addvector_0_avalon_wr_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (addvector_0_avalon_wr_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (addvector_0_avalon_wr_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (addvector_0_avalon_wr_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (addvector_0_avalon_wr_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (addvector_0_avalon_wr_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (addvector_0_avalon_wr_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (addvector_0_avalon_wr_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (addvector_0_avalon_wr_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (addvector_0_avalon_wr_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (addvector_0_avalon_wr_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (addVector_0_avalon_wr_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (addVector_0_avalon_wr_waitrequest),                                        //                          .waitrequest
		.av_write               (addVector_0_avalon_wr_write),                                              //                          .write
		.av_writedata           (addVector_0_avalon_wr_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_byteenable          (4'b1111),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_read                (1'b0),                                                                     //               (terminated)
		.av_readdata            (),                                                                         //               (terminated)
		.av_readdatavalid       (),                                                                         //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.av_debugaccess         (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) addvector_1_avalon_wr_translator (
		.clk                    (clk_0_clk_clk),                                                            //                       clk.clk
		.reset                  (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (addvector_1_avalon_wr_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (addvector_1_avalon_wr_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (addvector_1_avalon_wr_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (addvector_1_avalon_wr_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (addvector_1_avalon_wr_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (addvector_1_avalon_wr_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (addvector_1_avalon_wr_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (addvector_1_avalon_wr_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (addvector_1_avalon_wr_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (addvector_1_avalon_wr_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (addvector_1_avalon_wr_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (addVector_1_avalon_wr_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (addVector_1_avalon_wr_waitrequest),                                        //                          .waitrequest
		.av_write               (addVector_1_avalon_wr_write),                                              //                          .write
		.av_writedata           (addVector_1_avalon_wr_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_byteenable          (4'b1111),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_read                (1'b0),                                                                     //               (terminated)
		.av_readdata            (),                                                                         //               (terminated)
		.av_readdatavalid       (),                                                                         //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.av_debugaccess         (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (29),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (11),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hps_0_f2h_sdram0_data_translator (
		.clk                    (clk_0_clk_clk),                                                      //                      clk.clk
		.reset                  (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hps_0_f2h_sdram0_data_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (hps_0_f2h_sdram0_data_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (hps_0_f2h_sdram0_data_agent_m0_read),                                //                         .read
		.uav_write              (hps_0_f2h_sdram0_data_agent_m0_write),                               //                         .write
		.uav_waitrequest        (hps_0_f2h_sdram0_data_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (hps_0_f2h_sdram0_data_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (hps_0_f2h_sdram0_data_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (hps_0_f2h_sdram0_data_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (hps_0_f2h_sdram0_data_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (hps_0_f2h_sdram0_data_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (hps_0_f2h_sdram0_data_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (hps_0_f2h_sdram0_data_address),                                      //      avalon_anti_slave_0.address
		.av_write               (hps_0_f2h_sdram0_data_write),                                        //                         .write
		.av_read                (hps_0_f2h_sdram0_data_read),                                         //                         .read
		.av_readdata            (hps_0_f2h_sdram0_data_readdata),                                     //                         .readdata
		.av_writedata           (hps_0_f2h_sdram0_data_writedata),                                    //                         .writedata
		.av_burstcount          (hps_0_f2h_sdram0_data_burstcount),                                   //                         .burstcount
		.av_byteenable          (hps_0_f2h_sdram0_data_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (hps_0_f2h_sdram0_data_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (hps_0_f2h_sdram0_data_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                                   //              (terminated)
		.av_writebyteenable     (),                                                                   //              (terminated)
		.av_lock                (),                                                                   //              (terminated)
		.av_chipselect          (),                                                                   //              (terminated)
		.av_clken               (),                                                                   //              (terminated)
		.uav_clken              (1'b0),                                                               //              (terminated)
		.av_debugaccess         (),                                                                   //              (terminated)
		.av_outputenable        (),                                                                   //              (terminated)
		.uav_response           (),                                                                   //              (terminated)
		.av_response            (2'b00),                                                              //              (terminated)
		.uav_writeresponsevalid (),                                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_QOS_H                 (67),
		.PKT_QOS_L                 (67),
		.PKT_DATA_SIDEBAND_H       (65),
		.PKT_DATA_SIDEBAND_L       (65),
		.PKT_ADDR_SIDEBAND_H       (64),
		.PKT_ADDR_SIDEBAND_L       (64),
		.PKT_BURST_TYPE_H          (63),
		.PKT_BURST_TYPE_L          (62),
		.PKT_CACHE_H               (81),
		.PKT_CACHE_L               (78),
		.PKT_THREAD_ID_H           (74),
		.PKT_THREAD_ID_L           (74),
		.PKT_BURST_SIZE_H          (61),
		.PKT_BURST_SIZE_L          (59),
		.PKT_TRANS_EXCLUSIVE       (46),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (66),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (58),
		.PKT_BURSTWRAP_L           (58),
		.PKT_BYTE_CNT_H            (57),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (68),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (71),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (7),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) homography_dma_0_avalon_master_agent (
		.clk                   (clk_0_clk_clk),                                                                     //       clk.clk
		.reset                 (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.av_address            (homography_dma_0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (homography_dma_0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (homography_dma_0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (homography_dma_0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (homography_dma_0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (homography_dma_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (homography_dma_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (homography_dma_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (homography_dma_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (homography_dma_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (homography_dma_0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (homography_dma_0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (homography_dma_0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (homography_dma_0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (homography_dma_0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (homography_dma_0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (homography_dma_0_avalon_master_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (homography_dma_0_avalon_master_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (homography_dma_0_avalon_master_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (homography_dma_0_avalon_master_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (homography_dma_0_avalon_master_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (homography_dma_0_avalon_master_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                                   // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_QOS_H                 (67),
		.PKT_QOS_L                 (67),
		.PKT_DATA_SIDEBAND_H       (65),
		.PKT_DATA_SIDEBAND_L       (65),
		.PKT_ADDR_SIDEBAND_H       (64),
		.PKT_ADDR_SIDEBAND_L       (64),
		.PKT_BURST_TYPE_H          (63),
		.PKT_BURST_TYPE_L          (62),
		.PKT_CACHE_H               (81),
		.PKT_CACHE_L               (78),
		.PKT_THREAD_ID_H           (74),
		.PKT_THREAD_ID_L           (74),
		.PKT_BURST_SIZE_H          (61),
		.PKT_BURST_SIZE_L          (59),
		.PKT_TRANS_EXCLUSIVE       (46),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (66),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (58),
		.PKT_BURSTWRAP_L           (58),
		.PKT_BYTE_CNT_H            (57),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (68),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (71),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (6),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) homography_dma_0_avalon_master_1_agent (
		.clk                   (clk_0_clk_clk),                                                                       //       clk.clk
		.reset                 (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address            (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (homography_dma_0_avalon_master_1_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (homography_dma_0_avalon_master_1_agent_cp_valid),                                     //        cp.valid
		.cp_data               (homography_dma_0_avalon_master_1_agent_cp_data),                                      //          .data
		.cp_startofpacket      (homography_dma_0_avalon_master_1_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (homography_dma_0_avalon_master_1_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (homography_dma_0_avalon_master_1_agent_cp_ready),                                     //          .ready
		.rp_valid              (homography_dma_0_avalon_master_1_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (homography_dma_0_avalon_master_1_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (homography_dma_0_avalon_master_1_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (homography_dma_0_avalon_master_1_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (homography_dma_0_avalon_master_1_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (homography_dma_0_avalon_master_1_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) addvector_0_avalon_rd1_1_1_1_agent (
		.clk                   (clk_0_clk_clk),                                                                   //       clk.clk
		.reset                 (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (addvector_0_avalon_rd1_1_1_1_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (addvector_0_avalon_rd1_1_1_1_agent_cp_valid),                                     //        cp.valid
		.cp_data               (addvector_0_avalon_rd1_1_1_1_agent_cp_data),                                      //          .data
		.cp_startofpacket      (addvector_0_avalon_rd1_1_1_1_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (addvector_0_avalon_rd1_1_1_1_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (addvector_0_avalon_rd1_1_1_1_agent_cp_ready),                                     //          .ready
		.rp_valid              (addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                                // (terminated)
		.av_writeresponsevalid ()                                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) addvector_1_avalon_rd1_1_1_1_agent (
		.clk                   (clk_0_clk_clk),                                                                   //       clk.clk
		.reset                 (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (addvector_1_avalon_rd1_1_1_1_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (addvector_1_avalon_rd1_1_1_1_agent_cp_valid),                                     //        cp.valid
		.cp_data               (addvector_1_avalon_rd1_1_1_1_agent_cp_data),                                      //          .data
		.cp_startofpacket      (addvector_1_avalon_rd1_1_1_1_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (addvector_1_avalon_rd1_1_1_1_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (addvector_1_avalon_rd1_1_1_1_agent_cp_ready),                                     //          .ready
		.rp_valid              (addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                                // (terminated)
		.av_writeresponsevalid ()                                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) addvector_0_avalon_rd2_agent (
		.clk                   (clk_0_clk_clk),                                                             //       clk.clk
		.reset                 (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (addvector_0_avalon_rd2_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (addvector_0_avalon_rd2_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (addvector_0_avalon_rd2_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (addvector_0_avalon_rd2_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (addvector_0_avalon_rd2_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (addvector_0_avalon_rd2_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (addvector_0_avalon_rd2_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (addvector_0_avalon_rd2_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (addvector_0_avalon_rd2_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (addvector_0_avalon_rd2_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (addvector_0_avalon_rd2_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (addvector_0_avalon_rd2_agent_cp_valid),                                     //        cp.valid
		.cp_data               (addvector_0_avalon_rd2_agent_cp_data),                                      //          .data
		.cp_startofpacket      (addvector_0_avalon_rd2_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (addvector_0_avalon_rd2_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (addvector_0_avalon_rd2_agent_cp_ready),                                     //          .ready
		.rp_valid              (addvector_0_avalon_rd2_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (addvector_0_avalon_rd2_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (addvector_0_avalon_rd2_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (addvector_0_avalon_rd2_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (addvector_0_avalon_rd2_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (addvector_0_avalon_rd2_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (4),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) addvector_1_avalon_rd2_agent (
		.clk                   (clk_0_clk_clk),                                                             //       clk.clk
		.reset                 (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (addvector_1_avalon_rd2_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (addvector_1_avalon_rd2_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (addvector_1_avalon_rd2_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (addvector_1_avalon_rd2_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (addvector_1_avalon_rd2_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (addvector_1_avalon_rd2_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (addvector_1_avalon_rd2_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (addvector_1_avalon_rd2_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (addvector_1_avalon_rd2_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (addvector_1_avalon_rd2_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (addvector_1_avalon_rd2_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (addvector_1_avalon_rd2_agent_cp_valid),                                     //        cp.valid
		.cp_data               (addvector_1_avalon_rd2_agent_cp_data),                                      //          .data
		.cp_startofpacket      (addvector_1_avalon_rd2_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (addvector_1_avalon_rd2_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (addvector_1_avalon_rd2_agent_cp_ready),                                     //          .ready
		.rp_valid              (addvector_1_avalon_rd2_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (addvector_1_avalon_rd2_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (addvector_1_avalon_rd2_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (addvector_1_avalon_rd2_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (addvector_1_avalon_rd2_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (addvector_1_avalon_rd2_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) addvector_0_avalon_wr_agent (
		.clk                   (clk_0_clk_clk),                                                            //       clk.clk
		.reset                 (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (addvector_0_avalon_wr_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (addvector_0_avalon_wr_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (addvector_0_avalon_wr_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (addvector_0_avalon_wr_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (addvector_0_avalon_wr_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (addvector_0_avalon_wr_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (addvector_0_avalon_wr_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (addvector_0_avalon_wr_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (addvector_0_avalon_wr_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (addvector_0_avalon_wr_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (addvector_0_avalon_wr_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (addvector_0_avalon_wr_agent_cp_valid),                                     //        cp.valid
		.cp_data               (addvector_0_avalon_wr_agent_cp_data),                                      //          .data
		.cp_startofpacket      (addvector_0_avalon_wr_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (addvector_0_avalon_wr_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (addvector_0_avalon_wr_agent_cp_ready),                                     //          .ready
		.rp_valid              (addvector_0_avalon_wr_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (addvector_0_avalon_wr_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (addvector_0_avalon_wr_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (addvector_0_avalon_wr_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (addvector_0_avalon_wr_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (addvector_0_avalon_wr_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (98),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (5),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) addvector_1_avalon_wr_agent (
		.clk                   (clk_0_clk_clk),                                                            //       clk.clk
		.reset                 (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (addvector_1_avalon_wr_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (addvector_1_avalon_wr_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (addvector_1_avalon_wr_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (addvector_1_avalon_wr_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (addvector_1_avalon_wr_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (addvector_1_avalon_wr_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (addvector_1_avalon_wr_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (addvector_1_avalon_wr_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (addvector_1_avalon_wr_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (addvector_1_avalon_wr_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (addvector_1_avalon_wr_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (addvector_1_avalon_wr_agent_cp_valid),                                     //        cp.valid
		.cp_data               (addvector_1_avalon_wr_agent_cp_data),                                      //          .data
		.cp_startofpacket      (addvector_1_avalon_wr_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (addvector_1_avalon_wr_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (addvector_1_avalon_wr_agent_cp_ready),                                     //          .ready
		.rp_valid              (addvector_1_avalon_wr_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (addvector_1_avalon_wr_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (addvector_1_avalon_wr_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (addvector_1_avalon_wr_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (addvector_1_avalon_wr_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (addvector_1_avalon_wr_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (149),
		.PKT_ORI_BURST_SIZE_L      (147),
		.PKT_RESPONSE_STATUS_H     (146),
		.PKT_RESPONSE_STATUS_L     (145),
		.PKT_BURST_SIZE_H          (124),
		.PKT_BURST_SIZE_L          (122),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (129),
		.PKT_PROTECTION_H          (140),
		.PKT_PROTECTION_L          (138),
		.PKT_BURSTWRAP_H           (121),
		.PKT_BURSTWRAP_L           (121),
		.PKT_BYTE_CNT_H            (120),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (133),
		.PKT_SRC_ID_L              (131),
		.PKT_DEST_ID_H             (136),
		.PKT_DEST_ID_L             (134),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (150),
		.AVS_BURSTCOUNT_W          (11),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hps_0_f2h_sdram0_data_agent (
		.clk                     (clk_0_clk_clk),                                                      //             clk.clk
		.reset                   (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hps_0_f2h_sdram0_data_agent_m0_address),                             //              m0.address
		.m0_burstcount           (hps_0_f2h_sdram0_data_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (hps_0_f2h_sdram0_data_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (hps_0_f2h_sdram0_data_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (hps_0_f2h_sdram0_data_agent_m0_lock),                                //                .lock
		.m0_readdata             (hps_0_f2h_sdram0_data_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (hps_0_f2h_sdram0_data_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (hps_0_f2h_sdram0_data_agent_m0_read),                                //                .read
		.m0_waitrequest          (hps_0_f2h_sdram0_data_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (hps_0_f2h_sdram0_data_agent_m0_writedata),                           //                .writedata
		.m0_write                (hps_0_f2h_sdram0_data_agent_m0_write),                               //                .write
		.rp_endofpacket          (hps_0_f2h_sdram0_data_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (hps_0_f2h_sdram0_data_agent_rp_ready),                               //                .ready
		.rp_valid                (hps_0_f2h_sdram0_data_agent_rp_valid),                               //                .valid
		.rp_data                 (hps_0_f2h_sdram0_data_agent_rp_data),                                //                .data
		.rp_startofpacket        (hps_0_f2h_sdram0_data_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                  //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                  //                .valid
		.cp_data                 (cmd_mux_src_data),                                                   //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                            //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                                //                .channel
		.rf_sink_ready           (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (hps_0_f2h_sdram0_data_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (hps_0_f2h_sdram0_data_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (hps_0_f2h_sdram0_data_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (hps_0_f2h_sdram0_data_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (hps_0_f2h_sdram0_data_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (151),
		.FIFO_DEPTH          (15),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_0_f2h_sdram0_data_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                      //       clk.clk
		.reset             (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hps_0_f2h_sdram0_data_agent_rf_source_data),                         //        in.data
		.in_valid          (hps_0_f2h_sdram0_data_agent_rf_source_valid),                        //          .valid
		.in_ready          (hps_0_f2h_sdram0_data_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (hps_0_f2h_sdram0_data_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (hps_0_f2h_sdram0_data_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (128),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_0_f2h_sdram0_data_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                      //       clk.clk
		.reset             (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_startofpacket  (1'b0),                                                               // (terminated)
		.in_endofpacket    (1'b0),                                                               // (terminated)
		.out_startofpacket (),                                                                   // (terminated)
		.out_endofpacket   (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	cycloneV_soc_mm_interconnect_0_router router (
		.sink_ready         (homography_dma_0_avalon_master_agent_cp_ready),           //      sink.ready
		.sink_valid         (homography_dma_0_avalon_master_agent_cp_valid),           //          .valid
		.sink_data          (homography_dma_0_avalon_master_agent_cp_data),            //          .data
		.sink_startofpacket (homography_dma_0_avalon_master_agent_cp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (homography_dma_0_avalon_master_agent_cp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (homography_dma_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                        //       src.ready
		.src_valid          (router_src_valid),                                        //          .valid
		.src_data           (router_src_data),                                         //          .data
		.src_channel        (router_src_channel),                                      //          .channel
		.src_startofpacket  (router_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                   //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_router router_001 (
		.sink_ready         (homography_dma_0_avalon_master_1_agent_cp_ready),         //      sink.ready
		.sink_valid         (homography_dma_0_avalon_master_1_agent_cp_valid),         //          .valid
		.sink_data          (homography_dma_0_avalon_master_1_agent_cp_data),          //          .data
		.sink_startofpacket (homography_dma_0_avalon_master_1_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (homography_dma_0_avalon_master_1_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (homography_dma_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                    //       src.ready
		.src_valid          (router_001_src_valid),                                    //          .valid
		.src_data           (router_001_src_data),                                     //          .data
		.src_channel        (router_001_src_channel),                                  //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                               //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (addvector_0_avalon_rd1_1_1_1_agent_cp_ready),             //      sink.ready
		.sink_valid         (addvector_0_avalon_rd1_1_1_1_agent_cp_valid),             //          .valid
		.sink_data          (addvector_0_avalon_rd1_1_1_1_agent_cp_data),              //          .data
		.sink_startofpacket (addvector_0_avalon_rd1_1_1_1_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (addvector_0_avalon_rd1_1_1_1_agent_cp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (homography_dma_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                    //       src.ready
		.src_valid          (router_002_src_valid),                                    //          .valid
		.src_data           (router_002_src_data),                                     //          .data
		.src_channel        (router_002_src_channel),                                  //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                               //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (addvector_1_avalon_rd1_1_1_1_agent_cp_ready),             //      sink.ready
		.sink_valid         (addvector_1_avalon_rd1_1_1_1_agent_cp_valid),             //          .valid
		.sink_data          (addvector_1_avalon_rd1_1_1_1_agent_cp_data),              //          .data
		.sink_startofpacket (addvector_1_avalon_rd1_1_1_1_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (addvector_1_avalon_rd1_1_1_1_agent_cp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (homography_dma_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                    //       src.ready
		.src_valid          (router_003_src_valid),                                    //          .valid
		.src_data           (router_003_src_data),                                     //          .data
		.src_channel        (router_003_src_channel),                                  //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                               //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (addvector_0_avalon_rd2_agent_cp_ready),                   //      sink.ready
		.sink_valid         (addvector_0_avalon_rd2_agent_cp_valid),                   //          .valid
		.sink_data          (addvector_0_avalon_rd2_agent_cp_data),                    //          .data
		.sink_startofpacket (addvector_0_avalon_rd2_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (addvector_0_avalon_rd2_agent_cp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (homography_dma_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                    //       src.ready
		.src_valid          (router_004_src_valid),                                    //          .valid
		.src_data           (router_004_src_data),                                     //          .data
		.src_channel        (router_004_src_channel),                                  //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                               //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (addvector_1_avalon_rd2_agent_cp_ready),                   //      sink.ready
		.sink_valid         (addvector_1_avalon_rd2_agent_cp_valid),                   //          .valid
		.sink_data          (addvector_1_avalon_rd2_agent_cp_data),                    //          .data
		.sink_startofpacket (addvector_1_avalon_rd2_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (addvector_1_avalon_rd2_agent_cp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (homography_dma_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                    //       src.ready
		.src_valid          (router_005_src_valid),                                    //          .valid
		.src_data           (router_005_src_data),                                     //          .data
		.src_channel        (router_005_src_channel),                                  //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                               //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (addvector_0_avalon_wr_agent_cp_ready),                    //      sink.ready
		.sink_valid         (addvector_0_avalon_wr_agent_cp_valid),                    //          .valid
		.sink_data          (addvector_0_avalon_wr_agent_cp_data),                     //          .data
		.sink_startofpacket (addvector_0_avalon_wr_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (addvector_0_avalon_wr_agent_cp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (homography_dma_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                    //       src.ready
		.src_valid          (router_006_src_valid),                                    //          .valid
		.src_data           (router_006_src_data),                                     //          .data
		.src_channel        (router_006_src_channel),                                  //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                               //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (addvector_1_avalon_wr_agent_cp_ready),                    //      sink.ready
		.sink_valid         (addvector_1_avalon_wr_agent_cp_valid),                    //          .valid
		.sink_data          (addvector_1_avalon_wr_agent_cp_data),                     //          .data
		.sink_startofpacket (addvector_1_avalon_wr_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (addvector_1_avalon_wr_agent_cp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (homography_dma_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                    //       src.ready
		.src_valid          (router_007_src_valid),                                    //          .valid
		.src_data           (router_007_src_data),                                     //          .data
		.src_channel        (router_007_src_channel),                                  //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                               //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (hps_0_f2h_sdram0_data_agent_rp_ready),                               //      sink.ready
		.sink_valid         (hps_0_f2h_sdram0_data_agent_rp_valid),                               //          .valid
		.sink_data          (hps_0_f2h_sdram0_data_agent_rp_data),                                //          .data
		.sink_startofpacket (hps_0_f2h_sdram0_data_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (hps_0_f2h_sdram0_data_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                               //       src.ready
		.src_valid          (router_008_src_valid),                                               //          .valid
		.src_data           (router_008_src_data),                                                //          .data
		.src_channel        (router_008_src_channel),                                             //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                          //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),            // clk_reset.reset
		.sink_ready         (homography_dma_0_avalon_master_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (homography_dma_0_avalon_master_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (homography_dma_0_avalon_master_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (homography_dma_0_avalon_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (homography_dma_0_avalon_master_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (homography_dma_0_avalon_master_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                               //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                               //          .valid
		.src0_data          (cmd_demux_src0_data),                                                //          .data
		.src0_channel       (cmd_demux_src0_channel),                                             //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                       //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                          //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                                        //       clk.clk
		.reset              (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),              // clk_reset.reset
		.sink_ready         (homography_dma_0_avalon_master_1_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (homography_dma_0_avalon_master_1_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (homography_dma_0_avalon_master_1_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (homography_dma_0_avalon_master_1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (homography_dma_0_avalon_master_1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (homography_dma_0_avalon_master_1_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                             //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                             //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                              //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                           //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                        //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_cmd_demux cmd_demux_002 (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),          // clk_reset.reset
		.sink_ready         (addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                         //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                         //          .valid
		.src0_data          (cmd_demux_002_src0_data),                                          //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                                       //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                                    //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_cmd_demux cmd_demux_003 (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),          // clk_reset.reset
		.sink_ready         (addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                                         //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                         //          .valid
		.src0_data          (cmd_demux_003_src0_data),                                          //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                                       //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)                                    //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_cmd_demux cmd_demux_004 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.sink_ready         (addvector_0_avalon_rd2_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (addvector_0_avalon_rd2_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (addvector_0_avalon_rd2_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (addvector_0_avalon_rd2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (addvector_0_avalon_rd2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (addvector_0_avalon_rd2_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                                   //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                                   //          .valid
		.src0_data          (cmd_demux_004_src0_data),                                    //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                                 //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)                              //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_cmd_demux cmd_demux_005 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.sink_ready         (addvector_1_avalon_rd2_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (addvector_1_avalon_rd2_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (addvector_1_avalon_rd2_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (addvector_1_avalon_rd2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (addvector_1_avalon_rd2_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (addvector_1_avalon_rd2_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_005_src0_ready),                                   //      src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                                   //          .valid
		.src0_data          (cmd_demux_005_src0_data),                                    //          .data
		.src0_channel       (cmd_demux_005_src0_channel),                                 //          .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket)                              //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_cmd_demux cmd_demux_006 (
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (addvector_0_avalon_wr_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (addvector_0_avalon_wr_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (addvector_0_avalon_wr_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (addvector_0_avalon_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (addvector_0_avalon_wr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (addvector_0_avalon_wr_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_006_src0_ready),                                  //      src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                                  //          .valid
		.src0_data          (cmd_demux_006_src0_data),                                   //          .data
		.src0_channel       (cmd_demux_006_src0_channel),                                //          .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket)                             //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_cmd_demux cmd_demux_007 (
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (addvector_1_avalon_wr_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (addvector_1_avalon_wr_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (addvector_1_avalon_wr_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (addvector_1_avalon_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (addvector_1_avalon_wr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (addvector_1_avalon_wr_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_007_src0_ready),                                  //      src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),                                  //          .valid
		.src0_data          (cmd_demux_007_src0_data),                                   //          .data
		.src0_channel       (cmd_demux_007_src0_channel),                                //          .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket)                             //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                      //       clk.clk
		.reset               (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                  //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                  //          .valid
		.src_data            (cmd_mux_src_data),                                                   //          .data
		.src_channel         (cmd_mux_src_channel),                                                //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                            //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                               //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                               //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                             //          .channel
		.sink0_data          (cmd_demux_src0_data),                                                //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                           //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                         //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                            //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                                     //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                                           //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                                           //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                                         //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                                            //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),                                     //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                                           //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                                           //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                                         //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                                            //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                                   //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket),                                     //          .endofpacket
		.sink4_ready         (cmd_demux_004_src0_ready),                                           //     sink4.ready
		.sink4_valid         (cmd_demux_004_src0_valid),                                           //          .valid
		.sink4_channel       (cmd_demux_004_src0_channel),                                         //          .channel
		.sink4_data          (cmd_demux_004_src0_data),                                            //          .data
		.sink4_startofpacket (cmd_demux_004_src0_startofpacket),                                   //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src0_endofpacket),                                     //          .endofpacket
		.sink5_ready         (cmd_demux_005_src0_ready),                                           //     sink5.ready
		.sink5_valid         (cmd_demux_005_src0_valid),                                           //          .valid
		.sink5_channel       (cmd_demux_005_src0_channel),                                         //          .channel
		.sink5_data          (cmd_demux_005_src0_data),                                            //          .data
		.sink5_startofpacket (cmd_demux_005_src0_startofpacket),                                   //          .startofpacket
		.sink5_endofpacket   (cmd_demux_005_src0_endofpacket),                                     //          .endofpacket
		.sink6_ready         (cmd_demux_006_src0_ready),                                           //     sink6.ready
		.sink6_valid         (cmd_demux_006_src0_valid),                                           //          .valid
		.sink6_channel       (cmd_demux_006_src0_channel),                                         //          .channel
		.sink6_data          (cmd_demux_006_src0_data),                                            //          .data
		.sink6_startofpacket (cmd_demux_006_src0_startofpacket),                                   //          .startofpacket
		.sink6_endofpacket   (cmd_demux_006_src0_endofpacket),                                     //          .endofpacket
		.sink7_ready         (cmd_demux_007_src0_ready),                                           //     sink7.ready
		.sink7_valid         (cmd_demux_007_src0_valid),                                           //          .valid
		.sink7_channel       (cmd_demux_007_src0_channel),                                         //          .channel
		.sink7_data          (cmd_demux_007_src0_data),                                            //          .data
		.sink7_startofpacket (cmd_demux_007_src0_startofpacket),                                   //          .startofpacket
		.sink7_endofpacket   (cmd_demux_007_src0_endofpacket)                                      //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                               //      sink.ready
		.sink_channel       (router_008_src_channel),                                             //          .channel
		.sink_data          (router_008_src_data),                                                //          .data
		.sink_startofpacket (router_008_src_startofpacket),                                       //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                                         //          .endofpacket
		.sink_valid         (router_008_src_valid),                                               //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                               //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                               //          .valid
		.src0_data          (rsp_demux_src0_data),                                                //          .data
		.src0_channel       (rsp_demux_src0_channel),                                             //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                         //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                               //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                               //          .valid
		.src1_data          (rsp_demux_src1_data),                                                //          .data
		.src1_channel       (rsp_demux_src1_channel),                                             //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                       //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                         //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                               //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                               //          .valid
		.src2_data          (rsp_demux_src2_data),                                                //          .data
		.src2_channel       (rsp_demux_src2_channel),                                             //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                                       //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),                                         //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                                               //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                                               //          .valid
		.src3_data          (rsp_demux_src3_data),                                                //          .data
		.src3_channel       (rsp_demux_src3_channel),                                             //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),                                       //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket),                                         //          .endofpacket
		.src4_ready         (rsp_demux_src4_ready),                                               //      src4.ready
		.src4_valid         (rsp_demux_src4_valid),                                               //          .valid
		.src4_data          (rsp_demux_src4_data),                                                //          .data
		.src4_channel       (rsp_demux_src4_channel),                                             //          .channel
		.src4_startofpacket (rsp_demux_src4_startofpacket),                                       //          .startofpacket
		.src4_endofpacket   (rsp_demux_src4_endofpacket),                                         //          .endofpacket
		.src5_ready         (rsp_demux_src5_ready),                                               //      src5.ready
		.src5_valid         (rsp_demux_src5_valid),                                               //          .valid
		.src5_data          (rsp_demux_src5_data),                                                //          .data
		.src5_channel       (rsp_demux_src5_channel),                                             //          .channel
		.src5_startofpacket (rsp_demux_src5_startofpacket),                                       //          .startofpacket
		.src5_endofpacket   (rsp_demux_src5_endofpacket),                                         //          .endofpacket
		.src6_ready         (rsp_demux_src6_ready),                                               //      src6.ready
		.src6_valid         (rsp_demux_src6_valid),                                               //          .valid
		.src6_data          (rsp_demux_src6_data),                                                //          .data
		.src6_channel       (rsp_demux_src6_channel),                                             //          .channel
		.src6_startofpacket (rsp_demux_src6_startofpacket),                                       //          .startofpacket
		.src6_endofpacket   (rsp_demux_src6_endofpacket),                                         //          .endofpacket
		.src7_ready         (rsp_demux_src7_ready),                                               //      src7.ready
		.src7_valid         (rsp_demux_src7_valid),                                               //          .valid
		.src7_data          (rsp_demux_src7_data),                                                //          .data
		.src7_channel       (rsp_demux_src7_channel),                                             //          .channel
		.src7_startofpacket (rsp_demux_src7_startofpacket),                                       //          .startofpacket
		.src7_endofpacket   (rsp_demux_src7_endofpacket)                                          //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (homography_dma_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_src_valid),                                       //          .valid
		.src_data            (rsp_mux_src_data),                                        //          .data
		.src_channel         (rsp_mux_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                    //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                    //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                  //          .channel
		.sink0_data          (rsp_demux_src0_data),                                     //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                               //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (homography_dma_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                   //          .valid
		.src_data            (rsp_mux_001_src_data),                                    //          .data
		.src_channel         (rsp_mux_001_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                    //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                    //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                  //          .channel
		.sink0_data          (rsp_demux_src1_data),                                     //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                               //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_rsp_mux rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (homography_dma_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                   //          .valid
		.src_data            (rsp_mux_002_src_data),                                    //          .data
		.src_channel         (rsp_mux_002_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                                    //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                                    //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                                  //          .channel
		.sink0_data          (rsp_demux_src2_data),                                     //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket)                               //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_rsp_mux rsp_mux_003 (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (homography_dma_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                   //          .valid
		.src_data            (rsp_mux_003_src_data),                                    //          .data
		.src_channel         (rsp_mux_003_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (rsp_demux_src3_ready),                                    //     sink0.ready
		.sink0_valid         (rsp_demux_src3_valid),                                    //          .valid
		.sink0_channel       (rsp_demux_src3_channel),                                  //          .channel
		.sink0_data          (rsp_demux_src3_data),                                     //          .data
		.sink0_startofpacket (rsp_demux_src3_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src3_endofpacket)                               //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_rsp_mux rsp_mux_004 (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (homography_dma_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                   //          .valid
		.src_data            (rsp_mux_004_src_data),                                    //          .data
		.src_channel         (rsp_mux_004_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (rsp_demux_src4_ready),                                    //     sink0.ready
		.sink0_valid         (rsp_demux_src4_valid),                                    //          .valid
		.sink0_channel       (rsp_demux_src4_channel),                                  //          .channel
		.sink0_data          (rsp_demux_src4_data),                                     //          .data
		.sink0_startofpacket (rsp_demux_src4_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src4_endofpacket)                               //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_rsp_mux rsp_mux_005 (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (homography_dma_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                                   //          .valid
		.src_data            (rsp_mux_005_src_data),                                    //          .data
		.src_channel         (rsp_mux_005_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (rsp_demux_src5_ready),                                    //     sink0.ready
		.sink0_valid         (rsp_demux_src5_valid),                                    //          .valid
		.sink0_channel       (rsp_demux_src5_channel),                                  //          .channel
		.sink0_data          (rsp_demux_src5_data),                                     //          .data
		.sink0_startofpacket (rsp_demux_src5_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src5_endofpacket)                               //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_rsp_mux rsp_mux_006 (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (homography_dma_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                                   //          .valid
		.src_data            (rsp_mux_006_src_data),                                    //          .data
		.src_channel         (rsp_mux_006_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (rsp_demux_src6_ready),                                    //     sink0.ready
		.sink0_valid         (rsp_demux_src6_valid),                                    //          .valid
		.sink0_channel       (rsp_demux_src6_channel),                                  //          .channel
		.sink0_data          (rsp_demux_src6_data),                                     //          .data
		.sink0_startofpacket (rsp_demux_src6_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src6_endofpacket)                               //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_0_rsp_mux rsp_mux_007 (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (homography_dma_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_007_src_valid),                                   //          .valid
		.src_data            (rsp_mux_007_src_data),                                    //          .data
		.src_channel         (rsp_mux_007_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (rsp_demux_src7_ready),                                    //     sink0.ready
		.sink0_valid         (rsp_demux_src7_valid),                                    //          .valid
		.sink0_channel       (rsp_demux_src7_channel),                                  //          .channel
		.sink0_data          (rsp_demux_src7_data),                                     //          .data
		.sink0_startofpacket (rsp_demux_src7_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src7_endofpacket)                               //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (146),
		.IN_PKT_RESPONSE_STATUS_L      (145),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (147),
		.IN_PKT_ORI_BURST_SIZE_H       (149),
		.IN_ST_DATA_W                  (150),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (57),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (61),
		.OUT_PKT_BURST_SIZE_L          (59),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (63),
		.OUT_PKT_BURST_TYPE_L          (62),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) homography_dma_0_avalon_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //       clk.clk
		.reset                (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (rsp_mux_src_valid),                                                  //      sink.valid
		.in_channel           (rsp_mux_src_channel),                                                //          .channel
		.in_startofpacket     (rsp_mux_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (rsp_mux_src_endofpacket),                                            //          .endofpacket
		.in_ready             (rsp_mux_src_ready),                                                  //          .ready
		.in_data              (rsp_mux_src_data),                                                   //          .data
		.out_endofpacket      (homography_dma_0_avalon_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (homography_dma_0_avalon_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (homography_dma_0_avalon_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (homography_dma_0_avalon_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (homography_dma_0_avalon_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (homography_dma_0_avalon_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (146),
		.IN_PKT_RESPONSE_STATUS_L      (145),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (147),
		.IN_PKT_ORI_BURST_SIZE_H       (149),
		.IN_ST_DATA_W                  (150),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (57),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (61),
		.OUT_PKT_BURST_SIZE_L          (59),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (63),
		.OUT_PKT_BURST_TYPE_L          (62),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) homography_dma_0_avalon_master_1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                        //       clk.clk
		.reset                (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_valid             (rsp_mux_001_src_valid),                                                //      sink.valid
		.in_channel           (rsp_mux_001_src_channel),                                              //          .channel
		.in_startofpacket     (rsp_mux_001_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (rsp_mux_001_src_endofpacket),                                          //          .endofpacket
		.in_ready             (rsp_mux_001_src_ready),                                                //          .ready
		.in_data              (rsp_mux_001_src_data),                                                 //          .data
		.out_endofpacket      (homography_dma_0_avalon_master_1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (homography_dma_0_avalon_master_1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (homography_dma_0_avalon_master_1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (homography_dma_0_avalon_master_1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (homography_dma_0_avalon_master_1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (homography_dma_0_avalon_master_1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (146),
		.IN_PKT_RESPONSE_STATUS_L      (145),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (147),
		.IN_PKT_ORI_BURST_SIZE_H       (149),
		.IN_ST_DATA_W                  (150),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (84),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) addvector_0_avalon_rd1_1_1_1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (rsp_mux_002_src_valid),                                            //      sink.valid
		.in_channel           (rsp_mux_002_src_channel),                                          //          .channel
		.in_startofpacket     (rsp_mux_002_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (rsp_mux_002_src_endofpacket),                                      //          .endofpacket
		.in_ready             (rsp_mux_002_src_ready),                                            //          .ready
		.in_data              (rsp_mux_002_src_data),                                             //          .data
		.out_endofpacket      (addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (addvector_0_avalon_rd1_1_1_1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (146),
		.IN_PKT_RESPONSE_STATUS_L      (145),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (147),
		.IN_PKT_ORI_BURST_SIZE_H       (149),
		.IN_ST_DATA_W                  (150),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (84),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) addvector_1_avalon_rd1_1_1_1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (rsp_mux_003_src_valid),                                            //      sink.valid
		.in_channel           (rsp_mux_003_src_channel),                                          //          .channel
		.in_startofpacket     (rsp_mux_003_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (rsp_mux_003_src_endofpacket),                                      //          .endofpacket
		.in_ready             (rsp_mux_003_src_ready),                                            //          .ready
		.in_data              (rsp_mux_003_src_data),                                             //          .data
		.out_endofpacket      (addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (addvector_1_avalon_rd1_1_1_1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (146),
		.IN_PKT_RESPONSE_STATUS_L      (145),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (147),
		.IN_PKT_ORI_BURST_SIZE_H       (149),
		.IN_ST_DATA_W                  (150),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (84),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) addvector_0_avalon_rd2_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_valid             (rsp_mux_004_src_valid),                                      //      sink.valid
		.in_channel           (rsp_mux_004_src_channel),                                    //          .channel
		.in_startofpacket     (rsp_mux_004_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (rsp_mux_004_src_endofpacket),                                //          .endofpacket
		.in_ready             (rsp_mux_004_src_ready),                                      //          .ready
		.in_data              (rsp_mux_004_src_data),                                       //          .data
		.out_endofpacket      (addvector_0_avalon_rd2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (addvector_0_avalon_rd2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (addvector_0_avalon_rd2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (addvector_0_avalon_rd2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (addvector_0_avalon_rd2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (addvector_0_avalon_rd2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (146),
		.IN_PKT_RESPONSE_STATUS_L      (145),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (147),
		.IN_PKT_ORI_BURST_SIZE_H       (149),
		.IN_ST_DATA_W                  (150),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (84),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) addvector_1_avalon_rd2_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_valid             (rsp_mux_005_src_valid),                                      //      sink.valid
		.in_channel           (rsp_mux_005_src_channel),                                    //          .channel
		.in_startofpacket     (rsp_mux_005_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (rsp_mux_005_src_endofpacket),                                //          .endofpacket
		.in_ready             (rsp_mux_005_src_ready),                                      //          .ready
		.in_data              (rsp_mux_005_src_data),                                       //          .data
		.out_endofpacket      (addvector_1_avalon_rd2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (addvector_1_avalon_rd2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (addvector_1_avalon_rd2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (addvector_1_avalon_rd2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (addvector_1_avalon_rd2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (addvector_1_avalon_rd2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (146),
		.IN_PKT_RESPONSE_STATUS_L      (145),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (147),
		.IN_PKT_ORI_BURST_SIZE_H       (149),
		.IN_ST_DATA_W                  (150),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (84),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) addvector_0_avalon_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                             //       clk.clk
		.reset                (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (rsp_mux_006_src_valid),                                     //      sink.valid
		.in_channel           (rsp_mux_006_src_channel),                                   //          .channel
		.in_startofpacket     (rsp_mux_006_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (rsp_mux_006_src_endofpacket),                               //          .endofpacket
		.in_ready             (rsp_mux_006_src_ready),                                     //          .ready
		.in_data              (rsp_mux_006_src_data),                                      //          .data
		.out_endofpacket      (addvector_0_avalon_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (addvector_0_avalon_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (addvector_0_avalon_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (addvector_0_avalon_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (addvector_0_avalon_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (addvector_0_avalon_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (146),
		.IN_PKT_RESPONSE_STATUS_L      (145),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (147),
		.IN_PKT_ORI_BURST_SIZE_H       (149),
		.IN_ST_DATA_W                  (150),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (84),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (114),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) addvector_1_avalon_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                             //       clk.clk
		.reset                (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (rsp_mux_007_src_valid),                                     //      sink.valid
		.in_channel           (rsp_mux_007_src_channel),                                   //          .channel
		.in_startofpacket     (rsp_mux_007_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (rsp_mux_007_src_endofpacket),                               //          .endofpacket
		.in_ready             (rsp_mux_007_src_ready),                                     //          .ready
		.in_data              (rsp_mux_007_src_data),                                      //          .data
		.out_endofpacket      (addvector_1_avalon_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (addvector_1_avalon_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (addvector_1_avalon_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (addvector_1_avalon_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (addvector_1_avalon_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (addvector_1_avalon_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (57),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (58),
		.IN_PKT_BURSTWRAP_L            (58),
		.IN_PKT_BURST_SIZE_H           (61),
		.IN_PKT_BURST_SIZE_L           (59),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (63),
		.IN_PKT_BURST_TYPE_L           (62),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (146),
		.OUT_PKT_RESPONSE_STATUS_L     (145),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (147),
		.OUT_PKT_ORI_BURST_SIZE_H      (149),
		.OUT_ST_DATA_W                 (150),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) homography_dma_0_avalon_master_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //       clk.clk
		.reset                (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (router_src_valid),                                                   //      sink.valid
		.in_channel           (router_src_channel),                                                 //          .channel
		.in_startofpacket     (router_src_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (router_src_endofpacket),                                             //          .endofpacket
		.in_ready             (router_src_ready),                                                   //          .ready
		.in_data              (router_src_data),                                                    //          .data
		.out_endofpacket      (homography_dma_0_avalon_master_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (homography_dma_0_avalon_master_cmd_width_adapter_src_data),          //          .data
		.out_channel          (homography_dma_0_avalon_master_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (homography_dma_0_avalon_master_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (homography_dma_0_avalon_master_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (homography_dma_0_avalon_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (57),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (58),
		.IN_PKT_BURSTWRAP_L            (58),
		.IN_PKT_BURST_SIZE_H           (61),
		.IN_PKT_BURST_SIZE_L           (59),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (63),
		.IN_PKT_BURST_TYPE_L           (62),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (146),
		.OUT_PKT_RESPONSE_STATUS_L     (145),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (147),
		.OUT_PKT_ORI_BURST_SIZE_H      (149),
		.OUT_ST_DATA_W                 (150),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) homography_dma_0_avalon_master_1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                        //       clk.clk
		.reset                (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_valid             (router_001_src_valid),                                                 //      sink.valid
		.in_channel           (router_001_src_channel),                                               //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                           //          .endofpacket
		.in_ready             (router_001_src_ready),                                                 //          .ready
		.in_data              (router_001_src_data),                                                  //          .data
		.out_endofpacket      (homography_dma_0_avalon_master_1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (homography_dma_0_avalon_master_1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (homography_dma_0_avalon_master_1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (homography_dma_0_avalon_master_1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (homography_dma_0_avalon_master_1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (homography_dma_0_avalon_master_1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (84),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (85),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (146),
		.OUT_PKT_RESPONSE_STATUS_L     (145),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (147),
		.OUT_PKT_ORI_BURST_SIZE_H      (149),
		.OUT_ST_DATA_W                 (150),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) addvector_0_avalon_rd1_1_1_1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (router_002_src_valid),                                             //      sink.valid
		.in_channel           (router_002_src_channel),                                           //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                       //          .endofpacket
		.in_ready             (router_002_src_ready),                                             //          .ready
		.in_data              (router_002_src_data),                                              //          .data
		.out_endofpacket      (addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (addvector_0_avalon_rd1_1_1_1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (84),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (85),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (146),
		.OUT_PKT_RESPONSE_STATUS_L     (145),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (147),
		.OUT_PKT_ORI_BURST_SIZE_H      (149),
		.OUT_ST_DATA_W                 (150),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) addvector_1_avalon_rd1_1_1_1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (router_003_src_valid),                                             //      sink.valid
		.in_channel           (router_003_src_channel),                                           //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                       //          .endofpacket
		.in_ready             (router_003_src_ready),                                             //          .ready
		.in_data              (router_003_src_data),                                              //          .data
		.out_endofpacket      (addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (addvector_1_avalon_rd1_1_1_1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (84),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (85),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (146),
		.OUT_PKT_RESPONSE_STATUS_L     (145),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (147),
		.OUT_PKT_ORI_BURST_SIZE_H      (149),
		.OUT_ST_DATA_W                 (150),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) addvector_0_avalon_rd2_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_valid             (router_004_src_valid),                                       //      sink.valid
		.in_channel           (router_004_src_channel),                                     //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                                 //          .endofpacket
		.in_ready             (router_004_src_ready),                                       //          .ready
		.in_data              (router_004_src_data),                                        //          .data
		.out_endofpacket      (addvector_0_avalon_rd2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (addvector_0_avalon_rd2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (addvector_0_avalon_rd2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (addvector_0_avalon_rd2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (addvector_0_avalon_rd2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (addvector_0_avalon_rd2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (84),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (85),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (146),
		.OUT_PKT_RESPONSE_STATUS_L     (145),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (147),
		.OUT_PKT_ORI_BURST_SIZE_H      (149),
		.OUT_ST_DATA_W                 (150),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) addvector_1_avalon_rd2_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_valid             (router_005_src_valid),                                       //      sink.valid
		.in_channel           (router_005_src_channel),                                     //          .channel
		.in_startofpacket     (router_005_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                                 //          .endofpacket
		.in_ready             (router_005_src_ready),                                       //          .ready
		.in_data              (router_005_src_data),                                        //          .data
		.out_endofpacket      (addvector_1_avalon_rd2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (addvector_1_avalon_rd2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (addvector_1_avalon_rd2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (addvector_1_avalon_rd2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (addvector_1_avalon_rd2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (addvector_1_avalon_rd2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (84),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (85),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (146),
		.OUT_PKT_RESPONSE_STATUS_L     (145),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (147),
		.OUT_PKT_ORI_BURST_SIZE_H      (149),
		.OUT_ST_DATA_W                 (150),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) addvector_0_avalon_wr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                             //       clk.clk
		.reset                (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_006_src_valid),                                      //      sink.valid
		.in_channel           (router_006_src_channel),                                    //          .channel
		.in_startofpacket     (router_006_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_006_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_006_src_ready),                                      //          .ready
		.in_data              (router_006_src_data),                                       //          .data
		.out_endofpacket      (addvector_0_avalon_wr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (addvector_0_avalon_wr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (addvector_0_avalon_wr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (addvector_0_avalon_wr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (addvector_0_avalon_wr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (addvector_0_avalon_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (84),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (85),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (114),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (146),
		.OUT_PKT_RESPONSE_STATUS_L     (145),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (147),
		.OUT_PKT_ORI_BURST_SIZE_H      (149),
		.OUT_ST_DATA_W                 (150),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) addvector_1_avalon_wr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                             //       clk.clk
		.reset                (homography_dma_0_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_007_src_valid),                                      //      sink.valid
		.in_channel           (router_007_src_channel),                                    //          .channel
		.in_startofpacket     (router_007_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_007_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_007_src_ready),                                      //          .ready
		.in_data              (router_007_src_data),                                       //          .data
		.out_endofpacket      (addvector_1_avalon_wr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (addvector_1_avalon_wr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (addvector_1_avalon_wr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (addvector_1_avalon_wr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (addvector_1_avalon_wr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (addvector_1_avalon_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	cycloneV_soc_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                                      // in_clk_0.clk
		.in_rst_0_reset (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                      //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                      //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                       //         .error
	);

endmodule
