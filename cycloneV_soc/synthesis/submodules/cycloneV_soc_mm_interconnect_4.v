// cycloneV_soc_mm_interconnect_4.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module cycloneV_soc_mm_interconnect_4 (
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		input  wire        clk_0_clk_clk,                                                       //                                                     clk_0_clk.clk
		input  wire        pll_0_outclk0_clk,                                                   //                                                 pll_0_outclk0.clk
		input  wire        pll_0_outclk1_clk,                                                   //                                                 pll_0_outclk1.clk
		input  wire        hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        led_reset_reset_bridge_in_reset_reset,                               //                               led_reset_reset_bridge_in_reset.reset
		input  wire        lwir_ul0304_0_reset_sink_reset_bridge_in_reset_reset,                //                lwir_ul0304_0_reset_sink_reset_bridge_in_reset.reset
		input  wire        swir_v400_0_reset_sink_reset_bridge_in_reset_reset,                  //                  swir_v400_0_reset_sink_reset_bridge_in_reset.reset
		output wire [2:0]  addVector_0_slave_1_address,                                         //                                           addVector_0_slave_1.address
		output wire        addVector_0_slave_1_write,                                           //                                                              .write
		output wire        addVector_0_slave_1_read,                                            //                                                              .read
		input  wire [31:0] addVector_0_slave_1_readdata,                                        //                                                              .readdata
		output wire [31:0] addVector_0_slave_1_writedata,                                       //                                                              .writedata
		output wire [3:0]  addVector_0_slave_1_byteenable,                                      //                                                              .byteenable
		input  wire        addVector_0_slave_1_readdatavalid,                                   //                                                              .readdatavalid
		input  wire        addVector_0_slave_1_waitrequest,                                     //                                                              .waitrequest
		output wire        addVector_0_slave_1_chipselect,                                      //                                                              .chipselect
		output wire [2:0]  addVector_1_slave_1_address,                                         //                                           addVector_1_slave_1.address
		output wire        addVector_1_slave_1_write,                                           //                                                              .write
		output wire        addVector_1_slave_1_read,                                            //                                                              .read
		input  wire [31:0] addVector_1_slave_1_readdata,                                        //                                                              .readdata
		output wire [31:0] addVector_1_slave_1_writedata,                                       //                                                              .writedata
		output wire [3:0]  addVector_1_slave_1_byteenable,                                      //                                                              .byteenable
		input  wire        addVector_1_slave_1_readdatavalid,                                   //                                                              .readdatavalid
		input  wire        addVector_1_slave_1_waitrequest,                                     //                                                              .waitrequest
		output wire        addVector_1_slave_1_chipselect,                                      //                                                              .chipselect
		output wire [1:0]  bridge_stSrcMmMaster_0_slave_address,                                //                                  bridge_stSrcMmMaster_0_slave.address
		output wire        bridge_stSrcMmMaster_0_slave_write,                                  //                                                              .write
		output wire        bridge_stSrcMmMaster_0_slave_read,                                   //                                                              .read
		input  wire [31:0] bridge_stSrcMmMaster_0_slave_readdata,                               //                                                              .readdata
		output wire [31:0] bridge_stSrcMmMaster_0_slave_writedata,                              //                                                              .writedata
		input  wire        bridge_stSrcMmMaster_0_slave_readdatavalid,                          //                                                              .readdatavalid
		input  wire        bridge_stSrcMmMaster_0_slave_waitrequest,                            //                                                              .waitrequest
		output wire        bridge_stSrcMmMaster_0_slave_chipselect,                             //                                                              .chipselect
		output wire [1:0]  bridge_stSrcMmMaster_1_slave_address,                                //                                  bridge_stSrcMmMaster_1_slave.address
		output wire        bridge_stSrcMmMaster_1_slave_write,                                  //                                                              .write
		output wire        bridge_stSrcMmMaster_1_slave_read,                                   //                                                              .read
		input  wire [31:0] bridge_stSrcMmMaster_1_slave_readdata,                               //                                                              .readdata
		output wire [31:0] bridge_stSrcMmMaster_1_slave_writedata,                              //                                                              .writedata
		input  wire        bridge_stSrcMmMaster_1_slave_readdatavalid,                          //                                                              .readdatavalid
		input  wire        bridge_stSrcMmMaster_1_slave_waitrequest,                            //                                                              .waitrequest
		output wire        bridge_stSrcMmMaster_1_slave_chipselect,                             //                                                              .chipselect
		output wire [3:0]  homography_dma_0_slave_address,                                      //                                        homography_dma_0_slave.address
		output wire        homography_dma_0_slave_write,                                        //                                                              .write
		output wire        homography_dma_0_slave_read,                                         //                                                              .read
		input  wire [31:0] homography_dma_0_slave_readdata,                                     //                                                              .readdata
		output wire [31:0] homography_dma_0_slave_writedata,                                    //                                                              .writedata
		input  wire        homography_dma_0_slave_readdatavalid,                                //                                                              .readdatavalid
		input  wire        homography_dma_0_slave_waitrequest,                                  //                                                              .waitrequest
		output wire        homography_dma_0_slave_chipselect,                                   //                                                              .chipselect
		output wire [1:0]  led_s1_address,                                                      //                                                        led_s1.address
		output wire        led_s1_write,                                                        //                                                              .write
		input  wire [31:0] led_s1_readdata,                                                     //                                                              .readdata
		output wire [31:0] led_s1_writedata,                                                    //                                                              .writedata
		output wire        led_s1_chipselect,                                                   //                                                              .chipselect
		output wire [0:0]  lwir_ul0304_0_slave_address,                                         //                                           lwir_ul0304_0_slave.address
		output wire        lwir_ul0304_0_slave_write,                                           //                                                              .write
		output wire        lwir_ul0304_0_slave_read,                                            //                                                              .read
		input  wire [31:0] lwir_ul0304_0_slave_readdata,                                        //                                                              .readdata
		output wire [31:0] lwir_ul0304_0_slave_writedata,                                       //                                                              .writedata
		output wire [3:0]  lwir_ul0304_0_slave_byteenable,                                      //                                                              .byteenable
		input  wire        lwir_ul0304_0_slave_readdatavalid,                                   //                                                              .readdatavalid
		input  wire        lwir_ul0304_0_slave_waitrequest,                                     //                                                              .waitrequest
		output wire        lwir_ul0304_0_slave_chipselect,                                      //                                                              .chipselect
		output wire [1:0]  sw_s1_address,                                                       //                                                         sw_s1.address
		input  wire [31:0] sw_s1_readdata,                                                      //                                                              .readdata
		output wire [0:0]  swir_v400_0_slave_address,                                           //                                             swir_v400_0_slave.address
		output wire        swir_v400_0_slave_write,                                             //                                                              .write
		output wire        swir_v400_0_slave_read,                                              //                                                              .read
		input  wire [31:0] swir_v400_0_slave_readdata,                                          //                                                              .readdata
		output wire [31:0] swir_v400_0_slave_writedata,                                         //                                                              .writedata
		output wire [3:0]  swir_v400_0_slave_byteenable,                                        //                                                              .byteenable
		input  wire        swir_v400_0_slave_readdatavalid,                                     //                                                              .readdatavalid
		input  wire        swir_v400_0_slave_waitrequest,                                       //                                                              .waitrequest
		output wire        swir_v400_0_slave_chipselect                                         //                                                              .chipselect
	);

	wire   [31:0] led_s1_agent_m0_readdata;                                         // led_s1_translator:uav_readdata -> led_s1_agent:m0_readdata
	wire          led_s1_agent_m0_waitrequest;                                      // led_s1_translator:uav_waitrequest -> led_s1_agent:m0_waitrequest
	wire          led_s1_agent_m0_debugaccess;                                      // led_s1_agent:m0_debugaccess -> led_s1_translator:uav_debugaccess
	wire   [20:0] led_s1_agent_m0_address;                                          // led_s1_agent:m0_address -> led_s1_translator:uav_address
	wire    [3:0] led_s1_agent_m0_byteenable;                                       // led_s1_agent:m0_byteenable -> led_s1_translator:uav_byteenable
	wire          led_s1_agent_m0_read;                                             // led_s1_agent:m0_read -> led_s1_translator:uav_read
	wire          led_s1_agent_m0_readdatavalid;                                    // led_s1_translator:uav_readdatavalid -> led_s1_agent:m0_readdatavalid
	wire          led_s1_agent_m0_lock;                                             // led_s1_agent:m0_lock -> led_s1_translator:uav_lock
	wire   [31:0] led_s1_agent_m0_writedata;                                        // led_s1_agent:m0_writedata -> led_s1_translator:uav_writedata
	wire          led_s1_agent_m0_write;                                            // led_s1_agent:m0_write -> led_s1_translator:uav_write
	wire    [2:0] led_s1_agent_m0_burstcount;                                       // led_s1_agent:m0_burstcount -> led_s1_translator:uav_burstcount
	wire          led_s1_agent_rf_source_valid;                                     // led_s1_agent:rf_source_valid -> led_s1_agent_rsp_fifo:in_valid
	wire  [118:0] led_s1_agent_rf_source_data;                                      // led_s1_agent:rf_source_data -> led_s1_agent_rsp_fifo:in_data
	wire          led_s1_agent_rf_source_ready;                                     // led_s1_agent_rsp_fifo:in_ready -> led_s1_agent:rf_source_ready
	wire          led_s1_agent_rf_source_startofpacket;                             // led_s1_agent:rf_source_startofpacket -> led_s1_agent_rsp_fifo:in_startofpacket
	wire          led_s1_agent_rf_source_endofpacket;                               // led_s1_agent:rf_source_endofpacket -> led_s1_agent_rsp_fifo:in_endofpacket
	wire          led_s1_agent_rsp_fifo_out_valid;                                  // led_s1_agent_rsp_fifo:out_valid -> led_s1_agent:rf_sink_valid
	wire  [118:0] led_s1_agent_rsp_fifo_out_data;                                   // led_s1_agent_rsp_fifo:out_data -> led_s1_agent:rf_sink_data
	wire          led_s1_agent_rsp_fifo_out_ready;                                  // led_s1_agent:rf_sink_ready -> led_s1_agent_rsp_fifo:out_ready
	wire          led_s1_agent_rsp_fifo_out_startofpacket;                          // led_s1_agent_rsp_fifo:out_startofpacket -> led_s1_agent:rf_sink_startofpacket
	wire          led_s1_agent_rsp_fifo_out_endofpacket;                            // led_s1_agent_rsp_fifo:out_endofpacket -> led_s1_agent:rf_sink_endofpacket
	wire          led_s1_agent_rdata_fifo_src_valid;                                // led_s1_agent:rdata_fifo_src_valid -> led_s1_agent_rdata_fifo:in_valid
	wire   [33:0] led_s1_agent_rdata_fifo_src_data;                                 // led_s1_agent:rdata_fifo_src_data -> led_s1_agent_rdata_fifo:in_data
	wire          led_s1_agent_rdata_fifo_src_ready;                                // led_s1_agent_rdata_fifo:in_ready -> led_s1_agent:rdata_fifo_src_ready
	wire   [31:0] sw_s1_agent_m0_readdata;                                          // sw_s1_translator:uav_readdata -> sw_s1_agent:m0_readdata
	wire          sw_s1_agent_m0_waitrequest;                                       // sw_s1_translator:uav_waitrequest -> sw_s1_agent:m0_waitrequest
	wire          sw_s1_agent_m0_debugaccess;                                       // sw_s1_agent:m0_debugaccess -> sw_s1_translator:uav_debugaccess
	wire   [20:0] sw_s1_agent_m0_address;                                           // sw_s1_agent:m0_address -> sw_s1_translator:uav_address
	wire    [3:0] sw_s1_agent_m0_byteenable;                                        // sw_s1_agent:m0_byteenable -> sw_s1_translator:uav_byteenable
	wire          sw_s1_agent_m0_read;                                              // sw_s1_agent:m0_read -> sw_s1_translator:uav_read
	wire          sw_s1_agent_m0_readdatavalid;                                     // sw_s1_translator:uav_readdatavalid -> sw_s1_agent:m0_readdatavalid
	wire          sw_s1_agent_m0_lock;                                              // sw_s1_agent:m0_lock -> sw_s1_translator:uav_lock
	wire   [31:0] sw_s1_agent_m0_writedata;                                         // sw_s1_agent:m0_writedata -> sw_s1_translator:uav_writedata
	wire          sw_s1_agent_m0_write;                                             // sw_s1_agent:m0_write -> sw_s1_translator:uav_write
	wire    [2:0] sw_s1_agent_m0_burstcount;                                        // sw_s1_agent:m0_burstcount -> sw_s1_translator:uav_burstcount
	wire          sw_s1_agent_rf_source_valid;                                      // sw_s1_agent:rf_source_valid -> sw_s1_agent_rsp_fifo:in_valid
	wire  [118:0] sw_s1_agent_rf_source_data;                                       // sw_s1_agent:rf_source_data -> sw_s1_agent_rsp_fifo:in_data
	wire          sw_s1_agent_rf_source_ready;                                      // sw_s1_agent_rsp_fifo:in_ready -> sw_s1_agent:rf_source_ready
	wire          sw_s1_agent_rf_source_startofpacket;                              // sw_s1_agent:rf_source_startofpacket -> sw_s1_agent_rsp_fifo:in_startofpacket
	wire          sw_s1_agent_rf_source_endofpacket;                                // sw_s1_agent:rf_source_endofpacket -> sw_s1_agent_rsp_fifo:in_endofpacket
	wire          sw_s1_agent_rsp_fifo_out_valid;                                   // sw_s1_agent_rsp_fifo:out_valid -> sw_s1_agent:rf_sink_valid
	wire  [118:0] sw_s1_agent_rsp_fifo_out_data;                                    // sw_s1_agent_rsp_fifo:out_data -> sw_s1_agent:rf_sink_data
	wire          sw_s1_agent_rsp_fifo_out_ready;                                   // sw_s1_agent:rf_sink_ready -> sw_s1_agent_rsp_fifo:out_ready
	wire          sw_s1_agent_rsp_fifo_out_startofpacket;                           // sw_s1_agent_rsp_fifo:out_startofpacket -> sw_s1_agent:rf_sink_startofpacket
	wire          sw_s1_agent_rsp_fifo_out_endofpacket;                             // sw_s1_agent_rsp_fifo:out_endofpacket -> sw_s1_agent:rf_sink_endofpacket
	wire          sw_s1_agent_rdata_fifo_src_valid;                                 // sw_s1_agent:rdata_fifo_src_valid -> sw_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sw_s1_agent_rdata_fifo_src_data;                                  // sw_s1_agent:rdata_fifo_src_data -> sw_s1_agent_rdata_fifo:in_data
	wire          sw_s1_agent_rdata_fifo_src_ready;                                 // sw_s1_agent_rdata_fifo:in_ready -> sw_s1_agent:rdata_fifo_src_ready
	wire   [31:0] bridge_stsrcmmmaster_0_slave_agent_m0_readdata;                   // bridge_stSrcMmMaster_0_slave_translator:uav_readdata -> bridge_stSrcMmMaster_0_slave_agent:m0_readdata
	wire          bridge_stsrcmmmaster_0_slave_agent_m0_waitrequest;                // bridge_stSrcMmMaster_0_slave_translator:uav_waitrequest -> bridge_stSrcMmMaster_0_slave_agent:m0_waitrequest
	wire          bridge_stsrcmmmaster_0_slave_agent_m0_debugaccess;                // bridge_stSrcMmMaster_0_slave_agent:m0_debugaccess -> bridge_stSrcMmMaster_0_slave_translator:uav_debugaccess
	wire   [20:0] bridge_stsrcmmmaster_0_slave_agent_m0_address;                    // bridge_stSrcMmMaster_0_slave_agent:m0_address -> bridge_stSrcMmMaster_0_slave_translator:uav_address
	wire    [3:0] bridge_stsrcmmmaster_0_slave_agent_m0_byteenable;                 // bridge_stSrcMmMaster_0_slave_agent:m0_byteenable -> bridge_stSrcMmMaster_0_slave_translator:uav_byteenable
	wire          bridge_stsrcmmmaster_0_slave_agent_m0_read;                       // bridge_stSrcMmMaster_0_slave_agent:m0_read -> bridge_stSrcMmMaster_0_slave_translator:uav_read
	wire          bridge_stsrcmmmaster_0_slave_agent_m0_readdatavalid;              // bridge_stSrcMmMaster_0_slave_translator:uav_readdatavalid -> bridge_stSrcMmMaster_0_slave_agent:m0_readdatavalid
	wire          bridge_stsrcmmmaster_0_slave_agent_m0_lock;                       // bridge_stSrcMmMaster_0_slave_agent:m0_lock -> bridge_stSrcMmMaster_0_slave_translator:uav_lock
	wire   [31:0] bridge_stsrcmmmaster_0_slave_agent_m0_writedata;                  // bridge_stSrcMmMaster_0_slave_agent:m0_writedata -> bridge_stSrcMmMaster_0_slave_translator:uav_writedata
	wire          bridge_stsrcmmmaster_0_slave_agent_m0_write;                      // bridge_stSrcMmMaster_0_slave_agent:m0_write -> bridge_stSrcMmMaster_0_slave_translator:uav_write
	wire    [2:0] bridge_stsrcmmmaster_0_slave_agent_m0_burstcount;                 // bridge_stSrcMmMaster_0_slave_agent:m0_burstcount -> bridge_stSrcMmMaster_0_slave_translator:uav_burstcount
	wire          bridge_stsrcmmmaster_0_slave_agent_rf_source_valid;               // bridge_stSrcMmMaster_0_slave_agent:rf_source_valid -> bridge_stSrcMmMaster_0_slave_agent_rsp_fifo:in_valid
	wire  [118:0] bridge_stsrcmmmaster_0_slave_agent_rf_source_data;                // bridge_stSrcMmMaster_0_slave_agent:rf_source_data -> bridge_stSrcMmMaster_0_slave_agent_rsp_fifo:in_data
	wire          bridge_stsrcmmmaster_0_slave_agent_rf_source_ready;               // bridge_stSrcMmMaster_0_slave_agent_rsp_fifo:in_ready -> bridge_stSrcMmMaster_0_slave_agent:rf_source_ready
	wire          bridge_stsrcmmmaster_0_slave_agent_rf_source_startofpacket;       // bridge_stSrcMmMaster_0_slave_agent:rf_source_startofpacket -> bridge_stSrcMmMaster_0_slave_agent_rsp_fifo:in_startofpacket
	wire          bridge_stsrcmmmaster_0_slave_agent_rf_source_endofpacket;         // bridge_stSrcMmMaster_0_slave_agent:rf_source_endofpacket -> bridge_stSrcMmMaster_0_slave_agent_rsp_fifo:in_endofpacket
	wire          bridge_stsrcmmmaster_0_slave_agent_rsp_fifo_out_valid;            // bridge_stSrcMmMaster_0_slave_agent_rsp_fifo:out_valid -> bridge_stSrcMmMaster_0_slave_agent:rf_sink_valid
	wire  [118:0] bridge_stsrcmmmaster_0_slave_agent_rsp_fifo_out_data;             // bridge_stSrcMmMaster_0_slave_agent_rsp_fifo:out_data -> bridge_stSrcMmMaster_0_slave_agent:rf_sink_data
	wire          bridge_stsrcmmmaster_0_slave_agent_rsp_fifo_out_ready;            // bridge_stSrcMmMaster_0_slave_agent:rf_sink_ready -> bridge_stSrcMmMaster_0_slave_agent_rsp_fifo:out_ready
	wire          bridge_stsrcmmmaster_0_slave_agent_rsp_fifo_out_startofpacket;    // bridge_stSrcMmMaster_0_slave_agent_rsp_fifo:out_startofpacket -> bridge_stSrcMmMaster_0_slave_agent:rf_sink_startofpacket
	wire          bridge_stsrcmmmaster_0_slave_agent_rsp_fifo_out_endofpacket;      // bridge_stSrcMmMaster_0_slave_agent_rsp_fifo:out_endofpacket -> bridge_stSrcMmMaster_0_slave_agent:rf_sink_endofpacket
	wire          bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_src_valid;          // bridge_stSrcMmMaster_0_slave_agent:rdata_fifo_src_valid -> bridge_stSrcMmMaster_0_slave_agent_rdata_fifo:in_valid
	wire   [33:0] bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_src_data;           // bridge_stSrcMmMaster_0_slave_agent:rdata_fifo_src_data -> bridge_stSrcMmMaster_0_slave_agent_rdata_fifo:in_data
	wire          bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_src_ready;          // bridge_stSrcMmMaster_0_slave_agent_rdata_fifo:in_ready -> bridge_stSrcMmMaster_0_slave_agent:rdata_fifo_src_ready
	wire   [31:0] swir_v400_0_slave_agent_m0_readdata;                              // swir_v400_0_slave_translator:uav_readdata -> swir_v400_0_slave_agent:m0_readdata
	wire          swir_v400_0_slave_agent_m0_waitrequest;                           // swir_v400_0_slave_translator:uav_waitrequest -> swir_v400_0_slave_agent:m0_waitrequest
	wire          swir_v400_0_slave_agent_m0_debugaccess;                           // swir_v400_0_slave_agent:m0_debugaccess -> swir_v400_0_slave_translator:uav_debugaccess
	wire   [20:0] swir_v400_0_slave_agent_m0_address;                               // swir_v400_0_slave_agent:m0_address -> swir_v400_0_slave_translator:uav_address
	wire    [3:0] swir_v400_0_slave_agent_m0_byteenable;                            // swir_v400_0_slave_agent:m0_byteenable -> swir_v400_0_slave_translator:uav_byteenable
	wire          swir_v400_0_slave_agent_m0_read;                                  // swir_v400_0_slave_agent:m0_read -> swir_v400_0_slave_translator:uav_read
	wire          swir_v400_0_slave_agent_m0_readdatavalid;                         // swir_v400_0_slave_translator:uav_readdatavalid -> swir_v400_0_slave_agent:m0_readdatavalid
	wire          swir_v400_0_slave_agent_m0_lock;                                  // swir_v400_0_slave_agent:m0_lock -> swir_v400_0_slave_translator:uav_lock
	wire   [31:0] swir_v400_0_slave_agent_m0_writedata;                             // swir_v400_0_slave_agent:m0_writedata -> swir_v400_0_slave_translator:uav_writedata
	wire          swir_v400_0_slave_agent_m0_write;                                 // swir_v400_0_slave_agent:m0_write -> swir_v400_0_slave_translator:uav_write
	wire    [2:0] swir_v400_0_slave_agent_m0_burstcount;                            // swir_v400_0_slave_agent:m0_burstcount -> swir_v400_0_slave_translator:uav_burstcount
	wire          swir_v400_0_slave_agent_rf_source_valid;                          // swir_v400_0_slave_agent:rf_source_valid -> swir_v400_0_slave_agent_rsp_fifo:in_valid
	wire  [118:0] swir_v400_0_slave_agent_rf_source_data;                           // swir_v400_0_slave_agent:rf_source_data -> swir_v400_0_slave_agent_rsp_fifo:in_data
	wire          swir_v400_0_slave_agent_rf_source_ready;                          // swir_v400_0_slave_agent_rsp_fifo:in_ready -> swir_v400_0_slave_agent:rf_source_ready
	wire          swir_v400_0_slave_agent_rf_source_startofpacket;                  // swir_v400_0_slave_agent:rf_source_startofpacket -> swir_v400_0_slave_agent_rsp_fifo:in_startofpacket
	wire          swir_v400_0_slave_agent_rf_source_endofpacket;                    // swir_v400_0_slave_agent:rf_source_endofpacket -> swir_v400_0_slave_agent_rsp_fifo:in_endofpacket
	wire          swir_v400_0_slave_agent_rsp_fifo_out_valid;                       // swir_v400_0_slave_agent_rsp_fifo:out_valid -> swir_v400_0_slave_agent:rf_sink_valid
	wire  [118:0] swir_v400_0_slave_agent_rsp_fifo_out_data;                        // swir_v400_0_slave_agent_rsp_fifo:out_data -> swir_v400_0_slave_agent:rf_sink_data
	wire          swir_v400_0_slave_agent_rsp_fifo_out_ready;                       // swir_v400_0_slave_agent:rf_sink_ready -> swir_v400_0_slave_agent_rsp_fifo:out_ready
	wire          swir_v400_0_slave_agent_rsp_fifo_out_startofpacket;               // swir_v400_0_slave_agent_rsp_fifo:out_startofpacket -> swir_v400_0_slave_agent:rf_sink_startofpacket
	wire          swir_v400_0_slave_agent_rsp_fifo_out_endofpacket;                 // swir_v400_0_slave_agent_rsp_fifo:out_endofpacket -> swir_v400_0_slave_agent:rf_sink_endofpacket
	wire          swir_v400_0_slave_agent_rdata_fifo_src_valid;                     // swir_v400_0_slave_agent:rdata_fifo_src_valid -> swir_v400_0_slave_agent_rdata_fifo:in_valid
	wire   [33:0] swir_v400_0_slave_agent_rdata_fifo_src_data;                      // swir_v400_0_slave_agent:rdata_fifo_src_data -> swir_v400_0_slave_agent_rdata_fifo:in_data
	wire          swir_v400_0_slave_agent_rdata_fifo_src_ready;                     // swir_v400_0_slave_agent_rdata_fifo:in_ready -> swir_v400_0_slave_agent:rdata_fifo_src_ready
	wire   [31:0] bridge_stsrcmmmaster_1_slave_agent_m0_readdata;                   // bridge_stSrcMmMaster_1_slave_translator:uav_readdata -> bridge_stSrcMmMaster_1_slave_agent:m0_readdata
	wire          bridge_stsrcmmmaster_1_slave_agent_m0_waitrequest;                // bridge_stSrcMmMaster_1_slave_translator:uav_waitrequest -> bridge_stSrcMmMaster_1_slave_agent:m0_waitrequest
	wire          bridge_stsrcmmmaster_1_slave_agent_m0_debugaccess;                // bridge_stSrcMmMaster_1_slave_agent:m0_debugaccess -> bridge_stSrcMmMaster_1_slave_translator:uav_debugaccess
	wire   [20:0] bridge_stsrcmmmaster_1_slave_agent_m0_address;                    // bridge_stSrcMmMaster_1_slave_agent:m0_address -> bridge_stSrcMmMaster_1_slave_translator:uav_address
	wire    [3:0] bridge_stsrcmmmaster_1_slave_agent_m0_byteenable;                 // bridge_stSrcMmMaster_1_slave_agent:m0_byteenable -> bridge_stSrcMmMaster_1_slave_translator:uav_byteenable
	wire          bridge_stsrcmmmaster_1_slave_agent_m0_read;                       // bridge_stSrcMmMaster_1_slave_agent:m0_read -> bridge_stSrcMmMaster_1_slave_translator:uav_read
	wire          bridge_stsrcmmmaster_1_slave_agent_m0_readdatavalid;              // bridge_stSrcMmMaster_1_slave_translator:uav_readdatavalid -> bridge_stSrcMmMaster_1_slave_agent:m0_readdatavalid
	wire          bridge_stsrcmmmaster_1_slave_agent_m0_lock;                       // bridge_stSrcMmMaster_1_slave_agent:m0_lock -> bridge_stSrcMmMaster_1_slave_translator:uav_lock
	wire   [31:0] bridge_stsrcmmmaster_1_slave_agent_m0_writedata;                  // bridge_stSrcMmMaster_1_slave_agent:m0_writedata -> bridge_stSrcMmMaster_1_slave_translator:uav_writedata
	wire          bridge_stsrcmmmaster_1_slave_agent_m0_write;                      // bridge_stSrcMmMaster_1_slave_agent:m0_write -> bridge_stSrcMmMaster_1_slave_translator:uav_write
	wire    [2:0] bridge_stsrcmmmaster_1_slave_agent_m0_burstcount;                 // bridge_stSrcMmMaster_1_slave_agent:m0_burstcount -> bridge_stSrcMmMaster_1_slave_translator:uav_burstcount
	wire          bridge_stsrcmmmaster_1_slave_agent_rf_source_valid;               // bridge_stSrcMmMaster_1_slave_agent:rf_source_valid -> bridge_stSrcMmMaster_1_slave_agent_rsp_fifo:in_valid
	wire  [118:0] bridge_stsrcmmmaster_1_slave_agent_rf_source_data;                // bridge_stSrcMmMaster_1_slave_agent:rf_source_data -> bridge_stSrcMmMaster_1_slave_agent_rsp_fifo:in_data
	wire          bridge_stsrcmmmaster_1_slave_agent_rf_source_ready;               // bridge_stSrcMmMaster_1_slave_agent_rsp_fifo:in_ready -> bridge_stSrcMmMaster_1_slave_agent:rf_source_ready
	wire          bridge_stsrcmmmaster_1_slave_agent_rf_source_startofpacket;       // bridge_stSrcMmMaster_1_slave_agent:rf_source_startofpacket -> bridge_stSrcMmMaster_1_slave_agent_rsp_fifo:in_startofpacket
	wire          bridge_stsrcmmmaster_1_slave_agent_rf_source_endofpacket;         // bridge_stSrcMmMaster_1_slave_agent:rf_source_endofpacket -> bridge_stSrcMmMaster_1_slave_agent_rsp_fifo:in_endofpacket
	wire          bridge_stsrcmmmaster_1_slave_agent_rsp_fifo_out_valid;            // bridge_stSrcMmMaster_1_slave_agent_rsp_fifo:out_valid -> bridge_stSrcMmMaster_1_slave_agent:rf_sink_valid
	wire  [118:0] bridge_stsrcmmmaster_1_slave_agent_rsp_fifo_out_data;             // bridge_stSrcMmMaster_1_slave_agent_rsp_fifo:out_data -> bridge_stSrcMmMaster_1_slave_agent:rf_sink_data
	wire          bridge_stsrcmmmaster_1_slave_agent_rsp_fifo_out_ready;            // bridge_stSrcMmMaster_1_slave_agent:rf_sink_ready -> bridge_stSrcMmMaster_1_slave_agent_rsp_fifo:out_ready
	wire          bridge_stsrcmmmaster_1_slave_agent_rsp_fifo_out_startofpacket;    // bridge_stSrcMmMaster_1_slave_agent_rsp_fifo:out_startofpacket -> bridge_stSrcMmMaster_1_slave_agent:rf_sink_startofpacket
	wire          bridge_stsrcmmmaster_1_slave_agent_rsp_fifo_out_endofpacket;      // bridge_stSrcMmMaster_1_slave_agent_rsp_fifo:out_endofpacket -> bridge_stSrcMmMaster_1_slave_agent:rf_sink_endofpacket
	wire          bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_src_valid;          // bridge_stSrcMmMaster_1_slave_agent:rdata_fifo_src_valid -> bridge_stSrcMmMaster_1_slave_agent_rdata_fifo:in_valid
	wire   [33:0] bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_src_data;           // bridge_stSrcMmMaster_1_slave_agent:rdata_fifo_src_data -> bridge_stSrcMmMaster_1_slave_agent_rdata_fifo:in_data
	wire          bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_src_ready;          // bridge_stSrcMmMaster_1_slave_agent_rdata_fifo:in_ready -> bridge_stSrcMmMaster_1_slave_agent:rdata_fifo_src_ready
	wire   [31:0] homography_dma_0_slave_agent_m0_readdata;                         // homography_dma_0_slave_translator:uav_readdata -> homography_dma_0_slave_agent:m0_readdata
	wire          homography_dma_0_slave_agent_m0_waitrequest;                      // homography_dma_0_slave_translator:uav_waitrequest -> homography_dma_0_slave_agent:m0_waitrequest
	wire          homography_dma_0_slave_agent_m0_debugaccess;                      // homography_dma_0_slave_agent:m0_debugaccess -> homography_dma_0_slave_translator:uav_debugaccess
	wire   [20:0] homography_dma_0_slave_agent_m0_address;                          // homography_dma_0_slave_agent:m0_address -> homography_dma_0_slave_translator:uav_address
	wire    [3:0] homography_dma_0_slave_agent_m0_byteenable;                       // homography_dma_0_slave_agent:m0_byteenable -> homography_dma_0_slave_translator:uav_byteenable
	wire          homography_dma_0_slave_agent_m0_read;                             // homography_dma_0_slave_agent:m0_read -> homography_dma_0_slave_translator:uav_read
	wire          homography_dma_0_slave_agent_m0_readdatavalid;                    // homography_dma_0_slave_translator:uav_readdatavalid -> homography_dma_0_slave_agent:m0_readdatavalid
	wire          homography_dma_0_slave_agent_m0_lock;                             // homography_dma_0_slave_agent:m0_lock -> homography_dma_0_slave_translator:uav_lock
	wire   [31:0] homography_dma_0_slave_agent_m0_writedata;                        // homography_dma_0_slave_agent:m0_writedata -> homography_dma_0_slave_translator:uav_writedata
	wire          homography_dma_0_slave_agent_m0_write;                            // homography_dma_0_slave_agent:m0_write -> homography_dma_0_slave_translator:uav_write
	wire    [2:0] homography_dma_0_slave_agent_m0_burstcount;                       // homography_dma_0_slave_agent:m0_burstcount -> homography_dma_0_slave_translator:uav_burstcount
	wire          homography_dma_0_slave_agent_rf_source_valid;                     // homography_dma_0_slave_agent:rf_source_valid -> homography_dma_0_slave_agent_rsp_fifo:in_valid
	wire  [118:0] homography_dma_0_slave_agent_rf_source_data;                      // homography_dma_0_slave_agent:rf_source_data -> homography_dma_0_slave_agent_rsp_fifo:in_data
	wire          homography_dma_0_slave_agent_rf_source_ready;                     // homography_dma_0_slave_agent_rsp_fifo:in_ready -> homography_dma_0_slave_agent:rf_source_ready
	wire          homography_dma_0_slave_agent_rf_source_startofpacket;             // homography_dma_0_slave_agent:rf_source_startofpacket -> homography_dma_0_slave_agent_rsp_fifo:in_startofpacket
	wire          homography_dma_0_slave_agent_rf_source_endofpacket;               // homography_dma_0_slave_agent:rf_source_endofpacket -> homography_dma_0_slave_agent_rsp_fifo:in_endofpacket
	wire          homography_dma_0_slave_agent_rsp_fifo_out_valid;                  // homography_dma_0_slave_agent_rsp_fifo:out_valid -> homography_dma_0_slave_agent:rf_sink_valid
	wire  [118:0] homography_dma_0_slave_agent_rsp_fifo_out_data;                   // homography_dma_0_slave_agent_rsp_fifo:out_data -> homography_dma_0_slave_agent:rf_sink_data
	wire          homography_dma_0_slave_agent_rsp_fifo_out_ready;                  // homography_dma_0_slave_agent:rf_sink_ready -> homography_dma_0_slave_agent_rsp_fifo:out_ready
	wire          homography_dma_0_slave_agent_rsp_fifo_out_startofpacket;          // homography_dma_0_slave_agent_rsp_fifo:out_startofpacket -> homography_dma_0_slave_agent:rf_sink_startofpacket
	wire          homography_dma_0_slave_agent_rsp_fifo_out_endofpacket;            // homography_dma_0_slave_agent_rsp_fifo:out_endofpacket -> homography_dma_0_slave_agent:rf_sink_endofpacket
	wire          homography_dma_0_slave_agent_rdata_fifo_src_valid;                // homography_dma_0_slave_agent:rdata_fifo_src_valid -> homography_dma_0_slave_agent_rdata_fifo:in_valid
	wire   [33:0] homography_dma_0_slave_agent_rdata_fifo_src_data;                 // homography_dma_0_slave_agent:rdata_fifo_src_data -> homography_dma_0_slave_agent_rdata_fifo:in_data
	wire          homography_dma_0_slave_agent_rdata_fifo_src_ready;                // homography_dma_0_slave_agent_rdata_fifo:in_ready -> homography_dma_0_slave_agent:rdata_fifo_src_ready
	wire   [31:0] lwir_ul0304_0_slave_agent_m0_readdata;                            // lwir_ul0304_0_slave_translator:uav_readdata -> lwir_ul0304_0_slave_agent:m0_readdata
	wire          lwir_ul0304_0_slave_agent_m0_waitrequest;                         // lwir_ul0304_0_slave_translator:uav_waitrequest -> lwir_ul0304_0_slave_agent:m0_waitrequest
	wire          lwir_ul0304_0_slave_agent_m0_debugaccess;                         // lwir_ul0304_0_slave_agent:m0_debugaccess -> lwir_ul0304_0_slave_translator:uav_debugaccess
	wire   [20:0] lwir_ul0304_0_slave_agent_m0_address;                             // lwir_ul0304_0_slave_agent:m0_address -> lwir_ul0304_0_slave_translator:uav_address
	wire    [3:0] lwir_ul0304_0_slave_agent_m0_byteenable;                          // lwir_ul0304_0_slave_agent:m0_byteenable -> lwir_ul0304_0_slave_translator:uav_byteenable
	wire          lwir_ul0304_0_slave_agent_m0_read;                                // lwir_ul0304_0_slave_agent:m0_read -> lwir_ul0304_0_slave_translator:uav_read
	wire          lwir_ul0304_0_slave_agent_m0_readdatavalid;                       // lwir_ul0304_0_slave_translator:uav_readdatavalid -> lwir_ul0304_0_slave_agent:m0_readdatavalid
	wire          lwir_ul0304_0_slave_agent_m0_lock;                                // lwir_ul0304_0_slave_agent:m0_lock -> lwir_ul0304_0_slave_translator:uav_lock
	wire   [31:0] lwir_ul0304_0_slave_agent_m0_writedata;                           // lwir_ul0304_0_slave_agent:m0_writedata -> lwir_ul0304_0_slave_translator:uav_writedata
	wire          lwir_ul0304_0_slave_agent_m0_write;                               // lwir_ul0304_0_slave_agent:m0_write -> lwir_ul0304_0_slave_translator:uav_write
	wire    [2:0] lwir_ul0304_0_slave_agent_m0_burstcount;                          // lwir_ul0304_0_slave_agent:m0_burstcount -> lwir_ul0304_0_slave_translator:uav_burstcount
	wire          lwir_ul0304_0_slave_agent_rf_source_valid;                        // lwir_ul0304_0_slave_agent:rf_source_valid -> lwir_ul0304_0_slave_agent_rsp_fifo:in_valid
	wire  [118:0] lwir_ul0304_0_slave_agent_rf_source_data;                         // lwir_ul0304_0_slave_agent:rf_source_data -> lwir_ul0304_0_slave_agent_rsp_fifo:in_data
	wire          lwir_ul0304_0_slave_agent_rf_source_ready;                        // lwir_ul0304_0_slave_agent_rsp_fifo:in_ready -> lwir_ul0304_0_slave_agent:rf_source_ready
	wire          lwir_ul0304_0_slave_agent_rf_source_startofpacket;                // lwir_ul0304_0_slave_agent:rf_source_startofpacket -> lwir_ul0304_0_slave_agent_rsp_fifo:in_startofpacket
	wire          lwir_ul0304_0_slave_agent_rf_source_endofpacket;                  // lwir_ul0304_0_slave_agent:rf_source_endofpacket -> lwir_ul0304_0_slave_agent_rsp_fifo:in_endofpacket
	wire          lwir_ul0304_0_slave_agent_rsp_fifo_out_valid;                     // lwir_ul0304_0_slave_agent_rsp_fifo:out_valid -> lwir_ul0304_0_slave_agent:rf_sink_valid
	wire  [118:0] lwir_ul0304_0_slave_agent_rsp_fifo_out_data;                      // lwir_ul0304_0_slave_agent_rsp_fifo:out_data -> lwir_ul0304_0_slave_agent:rf_sink_data
	wire          lwir_ul0304_0_slave_agent_rsp_fifo_out_ready;                     // lwir_ul0304_0_slave_agent:rf_sink_ready -> lwir_ul0304_0_slave_agent_rsp_fifo:out_ready
	wire          lwir_ul0304_0_slave_agent_rsp_fifo_out_startofpacket;             // lwir_ul0304_0_slave_agent_rsp_fifo:out_startofpacket -> lwir_ul0304_0_slave_agent:rf_sink_startofpacket
	wire          lwir_ul0304_0_slave_agent_rsp_fifo_out_endofpacket;               // lwir_ul0304_0_slave_agent_rsp_fifo:out_endofpacket -> lwir_ul0304_0_slave_agent:rf_sink_endofpacket
	wire          lwir_ul0304_0_slave_agent_rdata_fifo_src_valid;                   // lwir_ul0304_0_slave_agent:rdata_fifo_src_valid -> lwir_ul0304_0_slave_agent_rdata_fifo:in_valid
	wire   [33:0] lwir_ul0304_0_slave_agent_rdata_fifo_src_data;                    // lwir_ul0304_0_slave_agent:rdata_fifo_src_data -> lwir_ul0304_0_slave_agent_rdata_fifo:in_data
	wire          lwir_ul0304_0_slave_agent_rdata_fifo_src_ready;                   // lwir_ul0304_0_slave_agent_rdata_fifo:in_ready -> lwir_ul0304_0_slave_agent:rdata_fifo_src_ready
	wire   [31:0] addvector_0_slave_1_agent_m0_readdata;                            // addVector_0_slave_1_translator:uav_readdata -> addVector_0_slave_1_agent:m0_readdata
	wire          addvector_0_slave_1_agent_m0_waitrequest;                         // addVector_0_slave_1_translator:uav_waitrequest -> addVector_0_slave_1_agent:m0_waitrequest
	wire          addvector_0_slave_1_agent_m0_debugaccess;                         // addVector_0_slave_1_agent:m0_debugaccess -> addVector_0_slave_1_translator:uav_debugaccess
	wire   [20:0] addvector_0_slave_1_agent_m0_address;                             // addVector_0_slave_1_agent:m0_address -> addVector_0_slave_1_translator:uav_address
	wire    [3:0] addvector_0_slave_1_agent_m0_byteenable;                          // addVector_0_slave_1_agent:m0_byteenable -> addVector_0_slave_1_translator:uav_byteenable
	wire          addvector_0_slave_1_agent_m0_read;                                // addVector_0_slave_1_agent:m0_read -> addVector_0_slave_1_translator:uav_read
	wire          addvector_0_slave_1_agent_m0_readdatavalid;                       // addVector_0_slave_1_translator:uav_readdatavalid -> addVector_0_slave_1_agent:m0_readdatavalid
	wire          addvector_0_slave_1_agent_m0_lock;                                // addVector_0_slave_1_agent:m0_lock -> addVector_0_slave_1_translator:uav_lock
	wire   [31:0] addvector_0_slave_1_agent_m0_writedata;                           // addVector_0_slave_1_agent:m0_writedata -> addVector_0_slave_1_translator:uav_writedata
	wire          addvector_0_slave_1_agent_m0_write;                               // addVector_0_slave_1_agent:m0_write -> addVector_0_slave_1_translator:uav_write
	wire    [2:0] addvector_0_slave_1_agent_m0_burstcount;                          // addVector_0_slave_1_agent:m0_burstcount -> addVector_0_slave_1_translator:uav_burstcount
	wire          addvector_0_slave_1_agent_rf_source_valid;                        // addVector_0_slave_1_agent:rf_source_valid -> addVector_0_slave_1_agent_rsp_fifo:in_valid
	wire  [118:0] addvector_0_slave_1_agent_rf_source_data;                         // addVector_0_slave_1_agent:rf_source_data -> addVector_0_slave_1_agent_rsp_fifo:in_data
	wire          addvector_0_slave_1_agent_rf_source_ready;                        // addVector_0_slave_1_agent_rsp_fifo:in_ready -> addVector_0_slave_1_agent:rf_source_ready
	wire          addvector_0_slave_1_agent_rf_source_startofpacket;                // addVector_0_slave_1_agent:rf_source_startofpacket -> addVector_0_slave_1_agent_rsp_fifo:in_startofpacket
	wire          addvector_0_slave_1_agent_rf_source_endofpacket;                  // addVector_0_slave_1_agent:rf_source_endofpacket -> addVector_0_slave_1_agent_rsp_fifo:in_endofpacket
	wire          addvector_0_slave_1_agent_rsp_fifo_out_valid;                     // addVector_0_slave_1_agent_rsp_fifo:out_valid -> addVector_0_slave_1_agent:rf_sink_valid
	wire  [118:0] addvector_0_slave_1_agent_rsp_fifo_out_data;                      // addVector_0_slave_1_agent_rsp_fifo:out_data -> addVector_0_slave_1_agent:rf_sink_data
	wire          addvector_0_slave_1_agent_rsp_fifo_out_ready;                     // addVector_0_slave_1_agent:rf_sink_ready -> addVector_0_slave_1_agent_rsp_fifo:out_ready
	wire          addvector_0_slave_1_agent_rsp_fifo_out_startofpacket;             // addVector_0_slave_1_agent_rsp_fifo:out_startofpacket -> addVector_0_slave_1_agent:rf_sink_startofpacket
	wire          addvector_0_slave_1_agent_rsp_fifo_out_endofpacket;               // addVector_0_slave_1_agent_rsp_fifo:out_endofpacket -> addVector_0_slave_1_agent:rf_sink_endofpacket
	wire          addvector_0_slave_1_agent_rdata_fifo_src_valid;                   // addVector_0_slave_1_agent:rdata_fifo_src_valid -> addVector_0_slave_1_agent_rdata_fifo:in_valid
	wire   [33:0] addvector_0_slave_1_agent_rdata_fifo_src_data;                    // addVector_0_slave_1_agent:rdata_fifo_src_data -> addVector_0_slave_1_agent_rdata_fifo:in_data
	wire          addvector_0_slave_1_agent_rdata_fifo_src_ready;                   // addVector_0_slave_1_agent_rdata_fifo:in_ready -> addVector_0_slave_1_agent:rdata_fifo_src_ready
	wire   [31:0] addvector_1_slave_1_agent_m0_readdata;                            // addVector_1_slave_1_translator:uav_readdata -> addVector_1_slave_1_agent:m0_readdata
	wire          addvector_1_slave_1_agent_m0_waitrequest;                         // addVector_1_slave_1_translator:uav_waitrequest -> addVector_1_slave_1_agent:m0_waitrequest
	wire          addvector_1_slave_1_agent_m0_debugaccess;                         // addVector_1_slave_1_agent:m0_debugaccess -> addVector_1_slave_1_translator:uav_debugaccess
	wire   [20:0] addvector_1_slave_1_agent_m0_address;                             // addVector_1_slave_1_agent:m0_address -> addVector_1_slave_1_translator:uav_address
	wire    [3:0] addvector_1_slave_1_agent_m0_byteenable;                          // addVector_1_slave_1_agent:m0_byteenable -> addVector_1_slave_1_translator:uav_byteenable
	wire          addvector_1_slave_1_agent_m0_read;                                // addVector_1_slave_1_agent:m0_read -> addVector_1_slave_1_translator:uav_read
	wire          addvector_1_slave_1_agent_m0_readdatavalid;                       // addVector_1_slave_1_translator:uav_readdatavalid -> addVector_1_slave_1_agent:m0_readdatavalid
	wire          addvector_1_slave_1_agent_m0_lock;                                // addVector_1_slave_1_agent:m0_lock -> addVector_1_slave_1_translator:uav_lock
	wire   [31:0] addvector_1_slave_1_agent_m0_writedata;                           // addVector_1_slave_1_agent:m0_writedata -> addVector_1_slave_1_translator:uav_writedata
	wire          addvector_1_slave_1_agent_m0_write;                               // addVector_1_slave_1_agent:m0_write -> addVector_1_slave_1_translator:uav_write
	wire    [2:0] addvector_1_slave_1_agent_m0_burstcount;                          // addVector_1_slave_1_agent:m0_burstcount -> addVector_1_slave_1_translator:uav_burstcount
	wire          addvector_1_slave_1_agent_rf_source_valid;                        // addVector_1_slave_1_agent:rf_source_valid -> addVector_1_slave_1_agent_rsp_fifo:in_valid
	wire  [118:0] addvector_1_slave_1_agent_rf_source_data;                         // addVector_1_slave_1_agent:rf_source_data -> addVector_1_slave_1_agent_rsp_fifo:in_data
	wire          addvector_1_slave_1_agent_rf_source_ready;                        // addVector_1_slave_1_agent_rsp_fifo:in_ready -> addVector_1_slave_1_agent:rf_source_ready
	wire          addvector_1_slave_1_agent_rf_source_startofpacket;                // addVector_1_slave_1_agent:rf_source_startofpacket -> addVector_1_slave_1_agent_rsp_fifo:in_startofpacket
	wire          addvector_1_slave_1_agent_rf_source_endofpacket;                  // addVector_1_slave_1_agent:rf_source_endofpacket -> addVector_1_slave_1_agent_rsp_fifo:in_endofpacket
	wire          addvector_1_slave_1_agent_rsp_fifo_out_valid;                     // addVector_1_slave_1_agent_rsp_fifo:out_valid -> addVector_1_slave_1_agent:rf_sink_valid
	wire  [118:0] addvector_1_slave_1_agent_rsp_fifo_out_data;                      // addVector_1_slave_1_agent_rsp_fifo:out_data -> addVector_1_slave_1_agent:rf_sink_data
	wire          addvector_1_slave_1_agent_rsp_fifo_out_ready;                     // addVector_1_slave_1_agent:rf_sink_ready -> addVector_1_slave_1_agent_rsp_fifo:out_ready
	wire          addvector_1_slave_1_agent_rsp_fifo_out_startofpacket;             // addVector_1_slave_1_agent_rsp_fifo:out_startofpacket -> addVector_1_slave_1_agent:rf_sink_startofpacket
	wire          addvector_1_slave_1_agent_rsp_fifo_out_endofpacket;               // addVector_1_slave_1_agent_rsp_fifo:out_endofpacket -> addVector_1_slave_1_agent:rf_sink_endofpacket
	wire          addvector_1_slave_1_agent_rdata_fifo_src_valid;                   // addVector_1_slave_1_agent:rdata_fifo_src_valid -> addVector_1_slave_1_agent_rdata_fifo:in_valid
	wire   [33:0] addvector_1_slave_1_agent_rdata_fifo_src_data;                    // addVector_1_slave_1_agent:rdata_fifo_src_data -> addVector_1_slave_1_agent_rdata_fifo:in_data
	wire          addvector_1_slave_1_agent_rdata_fifo_src_ready;                   // addVector_1_slave_1_agent_rdata_fifo:in_ready -> addVector_1_slave_1_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                     // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                      // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                     // router:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;             // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;               // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                      // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                       // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                      // router_001:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;              // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          led_s1_agent_rp_valid;                                            // led_s1_agent:rp_valid -> router_002:sink_valid
	wire  [117:0] led_s1_agent_rp_data;                                             // led_s1_agent:rp_data -> router_002:sink_data
	wire          led_s1_agent_rp_ready;                                            // router_002:sink_ready -> led_s1_agent:rp_ready
	wire          led_s1_agent_rp_startofpacket;                                    // led_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          led_s1_agent_rp_endofpacket;                                      // led_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                             // router_002:src_valid -> rsp_demux:sink_valid
	wire  [117:0] router_002_src_data;                                              // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                             // rsp_demux:sink_ready -> router_002:src_ready
	wire    [8:0] router_002_src_channel;                                           // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                     // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                       // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sw_s1_agent_rp_valid;                                             // sw_s1_agent:rp_valid -> router_003:sink_valid
	wire  [117:0] sw_s1_agent_rp_data;                                              // sw_s1_agent:rp_data -> router_003:sink_data
	wire          sw_s1_agent_rp_ready;                                             // router_003:sink_ready -> sw_s1_agent:rp_ready
	wire          sw_s1_agent_rp_startofpacket;                                     // sw_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          sw_s1_agent_rp_endofpacket;                                       // sw_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                             // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [117:0] router_003_src_data;                                              // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                             // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [8:0] router_003_src_channel;                                           // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                     // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                       // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          bridge_stsrcmmmaster_0_slave_agent_rp_valid;                      // bridge_stSrcMmMaster_0_slave_agent:rp_valid -> router_004:sink_valid
	wire  [117:0] bridge_stsrcmmmaster_0_slave_agent_rp_data;                       // bridge_stSrcMmMaster_0_slave_agent:rp_data -> router_004:sink_data
	wire          bridge_stsrcmmmaster_0_slave_agent_rp_ready;                      // router_004:sink_ready -> bridge_stSrcMmMaster_0_slave_agent:rp_ready
	wire          bridge_stsrcmmmaster_0_slave_agent_rp_startofpacket;              // bridge_stSrcMmMaster_0_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          bridge_stsrcmmmaster_0_slave_agent_rp_endofpacket;                // bridge_stSrcMmMaster_0_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                             // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [117:0] router_004_src_data;                                              // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                             // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [8:0] router_004_src_channel;                                           // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                     // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                       // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          swir_v400_0_slave_agent_rp_valid;                                 // swir_v400_0_slave_agent:rp_valid -> router_005:sink_valid
	wire  [117:0] swir_v400_0_slave_agent_rp_data;                                  // swir_v400_0_slave_agent:rp_data -> router_005:sink_data
	wire          swir_v400_0_slave_agent_rp_ready;                                 // router_005:sink_ready -> swir_v400_0_slave_agent:rp_ready
	wire          swir_v400_0_slave_agent_rp_startofpacket;                         // swir_v400_0_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          swir_v400_0_slave_agent_rp_endofpacket;                           // swir_v400_0_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                             // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [117:0] router_005_src_data;                                              // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                             // rsp_demux_003:sink_ready -> router_005:src_ready
	wire    [8:0] router_005_src_channel;                                           // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                     // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                       // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          bridge_stsrcmmmaster_1_slave_agent_rp_valid;                      // bridge_stSrcMmMaster_1_slave_agent:rp_valid -> router_006:sink_valid
	wire  [117:0] bridge_stsrcmmmaster_1_slave_agent_rp_data;                       // bridge_stSrcMmMaster_1_slave_agent:rp_data -> router_006:sink_data
	wire          bridge_stsrcmmmaster_1_slave_agent_rp_ready;                      // router_006:sink_ready -> bridge_stSrcMmMaster_1_slave_agent:rp_ready
	wire          bridge_stsrcmmmaster_1_slave_agent_rp_startofpacket;              // bridge_stSrcMmMaster_1_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          bridge_stsrcmmmaster_1_slave_agent_rp_endofpacket;                // bridge_stSrcMmMaster_1_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                             // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [117:0] router_006_src_data;                                              // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                             // rsp_demux_004:sink_ready -> router_006:src_ready
	wire    [8:0] router_006_src_channel;                                           // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                     // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                       // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          homography_dma_0_slave_agent_rp_valid;                            // homography_dma_0_slave_agent:rp_valid -> router_007:sink_valid
	wire  [117:0] homography_dma_0_slave_agent_rp_data;                             // homography_dma_0_slave_agent:rp_data -> router_007:sink_data
	wire          homography_dma_0_slave_agent_rp_ready;                            // router_007:sink_ready -> homography_dma_0_slave_agent:rp_ready
	wire          homography_dma_0_slave_agent_rp_startofpacket;                    // homography_dma_0_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          homography_dma_0_slave_agent_rp_endofpacket;                      // homography_dma_0_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                             // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [117:0] router_007_src_data;                                              // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                             // rsp_demux_005:sink_ready -> router_007:src_ready
	wire    [8:0] router_007_src_channel;                                           // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                     // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                       // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          lwir_ul0304_0_slave_agent_rp_valid;                               // lwir_ul0304_0_slave_agent:rp_valid -> router_008:sink_valid
	wire  [117:0] lwir_ul0304_0_slave_agent_rp_data;                                // lwir_ul0304_0_slave_agent:rp_data -> router_008:sink_data
	wire          lwir_ul0304_0_slave_agent_rp_ready;                               // router_008:sink_ready -> lwir_ul0304_0_slave_agent:rp_ready
	wire          lwir_ul0304_0_slave_agent_rp_startofpacket;                       // lwir_ul0304_0_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          lwir_ul0304_0_slave_agent_rp_endofpacket;                         // lwir_ul0304_0_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                             // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [117:0] router_008_src_data;                                              // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                             // rsp_demux_006:sink_ready -> router_008:src_ready
	wire    [8:0] router_008_src_channel;                                           // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                     // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                       // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          addvector_0_slave_1_agent_rp_valid;                               // addVector_0_slave_1_agent:rp_valid -> router_009:sink_valid
	wire  [117:0] addvector_0_slave_1_agent_rp_data;                                // addVector_0_slave_1_agent:rp_data -> router_009:sink_data
	wire          addvector_0_slave_1_agent_rp_ready;                               // router_009:sink_ready -> addVector_0_slave_1_agent:rp_ready
	wire          addvector_0_slave_1_agent_rp_startofpacket;                       // addVector_0_slave_1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          addvector_0_slave_1_agent_rp_endofpacket;                         // addVector_0_slave_1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                             // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [117:0] router_009_src_data;                                              // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                             // rsp_demux_007:sink_ready -> router_009:src_ready
	wire    [8:0] router_009_src_channel;                                           // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                     // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                       // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          addvector_1_slave_1_agent_rp_valid;                               // addVector_1_slave_1_agent:rp_valid -> router_010:sink_valid
	wire  [117:0] addvector_1_slave_1_agent_rp_data;                                // addVector_1_slave_1_agent:rp_data -> router_010:sink_data
	wire          addvector_1_slave_1_agent_rp_ready;                               // router_010:sink_ready -> addVector_1_slave_1_agent:rp_ready
	wire          addvector_1_slave_1_agent_rp_startofpacket;                       // addVector_1_slave_1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          addvector_1_slave_1_agent_rp_endofpacket;                         // addVector_1_slave_1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                             // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [117:0] router_010_src_data;                                              // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                             // rsp_demux_008:sink_ready -> router_010:src_ready
	wire    [8:0] router_010_src_channel;                                           // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                     // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                       // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_src_valid;                                                 // router:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [117:0] router_src_data;                                                  // router:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                 // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [8:0] router_src_channel;                                               // router:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                         // router:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                           // router:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [117:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                  // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                 // cmd_demux:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire    [8:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;               // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;         // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;           // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                // rsp_mux:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [117:0] rsp_mux_src_data;                                                 // rsp_mux:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [8:0] rsp_mux_src_channel;                                              // rsp_mux:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                        // rsp_mux:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                          // rsp_mux:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                 // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                  // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                 // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire    [8:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;               // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;         // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;           // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                             // router_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [117:0] router_001_src_data;                                              // router_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                             // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [8:0] router_001_src_channel;                                           // router_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                     // router_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                       // router_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [117:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                  // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                 // cmd_demux_001:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire    [8:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;               // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;         // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;           // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                            // rsp_mux_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [117:0] rsp_mux_001_src_data;                                             // rsp_mux_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                            // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [8:0] rsp_mux_001_src_channel;                                          // rsp_mux_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                    // rsp_mux_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                      // rsp_mux_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                 // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                  // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                 // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire    [8:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;               // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;         // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;           // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                // cmd_mux:src_valid -> led_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_src_data;                                                 // cmd_mux:src_data -> led_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                // led_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [8:0] cmd_mux_src_channel;                                              // cmd_mux:src_channel -> led_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                        // cmd_mux:src_startofpacket -> led_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                          // cmd_mux:src_endofpacket -> led_s1_burst_adapter:sink0_endofpacket
	wire          led_s1_burst_adapter_source0_valid;                               // led_s1_burst_adapter:source0_valid -> led_s1_agent:cp_valid
	wire  [117:0] led_s1_burst_adapter_source0_data;                                // led_s1_burst_adapter:source0_data -> led_s1_agent:cp_data
	wire          led_s1_burst_adapter_source0_ready;                               // led_s1_agent:cp_ready -> led_s1_burst_adapter:source0_ready
	wire    [8:0] led_s1_burst_adapter_source0_channel;                             // led_s1_burst_adapter:source0_channel -> led_s1_agent:cp_channel
	wire          led_s1_burst_adapter_source0_startofpacket;                       // led_s1_burst_adapter:source0_startofpacket -> led_s1_agent:cp_startofpacket
	wire          led_s1_burst_adapter_source0_endofpacket;                         // led_s1_burst_adapter:source0_endofpacket -> led_s1_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                            // cmd_mux_001:src_valid -> sw_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_001_src_data;                                             // cmd_mux_001:src_data -> sw_s1_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                            // sw_s1_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [8:0] cmd_mux_001_src_channel;                                          // cmd_mux_001:src_channel -> sw_s1_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                    // cmd_mux_001:src_startofpacket -> sw_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                      // cmd_mux_001:src_endofpacket -> sw_s1_burst_adapter:sink0_endofpacket
	wire          sw_s1_burst_adapter_source0_valid;                                // sw_s1_burst_adapter:source0_valid -> sw_s1_agent:cp_valid
	wire  [117:0] sw_s1_burst_adapter_source0_data;                                 // sw_s1_burst_adapter:source0_data -> sw_s1_agent:cp_data
	wire          sw_s1_burst_adapter_source0_ready;                                // sw_s1_agent:cp_ready -> sw_s1_burst_adapter:source0_ready
	wire    [8:0] sw_s1_burst_adapter_source0_channel;                              // sw_s1_burst_adapter:source0_channel -> sw_s1_agent:cp_channel
	wire          sw_s1_burst_adapter_source0_startofpacket;                        // sw_s1_burst_adapter:source0_startofpacket -> sw_s1_agent:cp_startofpacket
	wire          sw_s1_burst_adapter_source0_endofpacket;                          // sw_s1_burst_adapter:source0_endofpacket -> sw_s1_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                            // cmd_mux_002:src_valid -> bridge_stSrcMmMaster_0_slave_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_002_src_data;                                             // cmd_mux_002:src_data -> bridge_stSrcMmMaster_0_slave_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                            // bridge_stSrcMmMaster_0_slave_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [8:0] cmd_mux_002_src_channel;                                          // cmd_mux_002:src_channel -> bridge_stSrcMmMaster_0_slave_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                    // cmd_mux_002:src_startofpacket -> bridge_stSrcMmMaster_0_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                      // cmd_mux_002:src_endofpacket -> bridge_stSrcMmMaster_0_slave_burst_adapter:sink0_endofpacket
	wire          bridge_stsrcmmmaster_0_slave_burst_adapter_source0_valid;         // bridge_stSrcMmMaster_0_slave_burst_adapter:source0_valid -> bridge_stSrcMmMaster_0_slave_agent:cp_valid
	wire  [117:0] bridge_stsrcmmmaster_0_slave_burst_adapter_source0_data;          // bridge_stSrcMmMaster_0_slave_burst_adapter:source0_data -> bridge_stSrcMmMaster_0_slave_agent:cp_data
	wire          bridge_stsrcmmmaster_0_slave_burst_adapter_source0_ready;         // bridge_stSrcMmMaster_0_slave_agent:cp_ready -> bridge_stSrcMmMaster_0_slave_burst_adapter:source0_ready
	wire    [8:0] bridge_stsrcmmmaster_0_slave_burst_adapter_source0_channel;       // bridge_stSrcMmMaster_0_slave_burst_adapter:source0_channel -> bridge_stSrcMmMaster_0_slave_agent:cp_channel
	wire          bridge_stsrcmmmaster_0_slave_burst_adapter_source0_startofpacket; // bridge_stSrcMmMaster_0_slave_burst_adapter:source0_startofpacket -> bridge_stSrcMmMaster_0_slave_agent:cp_startofpacket
	wire          bridge_stsrcmmmaster_0_slave_burst_adapter_source0_endofpacket;   // bridge_stSrcMmMaster_0_slave_burst_adapter:source0_endofpacket -> bridge_stSrcMmMaster_0_slave_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                            // cmd_mux_003:src_valid -> swir_v400_0_slave_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_003_src_data;                                             // cmd_mux_003:src_data -> swir_v400_0_slave_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                            // swir_v400_0_slave_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [8:0] cmd_mux_003_src_channel;                                          // cmd_mux_003:src_channel -> swir_v400_0_slave_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                    // cmd_mux_003:src_startofpacket -> swir_v400_0_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                      // cmd_mux_003:src_endofpacket -> swir_v400_0_slave_burst_adapter:sink0_endofpacket
	wire          swir_v400_0_slave_burst_adapter_source0_valid;                    // swir_v400_0_slave_burst_adapter:source0_valid -> swir_v400_0_slave_agent:cp_valid
	wire  [117:0] swir_v400_0_slave_burst_adapter_source0_data;                     // swir_v400_0_slave_burst_adapter:source0_data -> swir_v400_0_slave_agent:cp_data
	wire          swir_v400_0_slave_burst_adapter_source0_ready;                    // swir_v400_0_slave_agent:cp_ready -> swir_v400_0_slave_burst_adapter:source0_ready
	wire    [8:0] swir_v400_0_slave_burst_adapter_source0_channel;                  // swir_v400_0_slave_burst_adapter:source0_channel -> swir_v400_0_slave_agent:cp_channel
	wire          swir_v400_0_slave_burst_adapter_source0_startofpacket;            // swir_v400_0_slave_burst_adapter:source0_startofpacket -> swir_v400_0_slave_agent:cp_startofpacket
	wire          swir_v400_0_slave_burst_adapter_source0_endofpacket;              // swir_v400_0_slave_burst_adapter:source0_endofpacket -> swir_v400_0_slave_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                            // cmd_mux_004:src_valid -> bridge_stSrcMmMaster_1_slave_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_004_src_data;                                             // cmd_mux_004:src_data -> bridge_stSrcMmMaster_1_slave_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                            // bridge_stSrcMmMaster_1_slave_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire    [8:0] cmd_mux_004_src_channel;                                          // cmd_mux_004:src_channel -> bridge_stSrcMmMaster_1_slave_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                    // cmd_mux_004:src_startofpacket -> bridge_stSrcMmMaster_1_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                      // cmd_mux_004:src_endofpacket -> bridge_stSrcMmMaster_1_slave_burst_adapter:sink0_endofpacket
	wire          bridge_stsrcmmmaster_1_slave_burst_adapter_source0_valid;         // bridge_stSrcMmMaster_1_slave_burst_adapter:source0_valid -> bridge_stSrcMmMaster_1_slave_agent:cp_valid
	wire  [117:0] bridge_stsrcmmmaster_1_slave_burst_adapter_source0_data;          // bridge_stSrcMmMaster_1_slave_burst_adapter:source0_data -> bridge_stSrcMmMaster_1_slave_agent:cp_data
	wire          bridge_stsrcmmmaster_1_slave_burst_adapter_source0_ready;         // bridge_stSrcMmMaster_1_slave_agent:cp_ready -> bridge_stSrcMmMaster_1_slave_burst_adapter:source0_ready
	wire    [8:0] bridge_stsrcmmmaster_1_slave_burst_adapter_source0_channel;       // bridge_stSrcMmMaster_1_slave_burst_adapter:source0_channel -> bridge_stSrcMmMaster_1_slave_agent:cp_channel
	wire          bridge_stsrcmmmaster_1_slave_burst_adapter_source0_startofpacket; // bridge_stSrcMmMaster_1_slave_burst_adapter:source0_startofpacket -> bridge_stSrcMmMaster_1_slave_agent:cp_startofpacket
	wire          bridge_stsrcmmmaster_1_slave_burst_adapter_source0_endofpacket;   // bridge_stSrcMmMaster_1_slave_burst_adapter:source0_endofpacket -> bridge_stSrcMmMaster_1_slave_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                            // cmd_mux_005:src_valid -> homography_dma_0_slave_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_005_src_data;                                             // cmd_mux_005:src_data -> homography_dma_0_slave_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                            // homography_dma_0_slave_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire    [8:0] cmd_mux_005_src_channel;                                          // cmd_mux_005:src_channel -> homography_dma_0_slave_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                    // cmd_mux_005:src_startofpacket -> homography_dma_0_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                      // cmd_mux_005:src_endofpacket -> homography_dma_0_slave_burst_adapter:sink0_endofpacket
	wire          homography_dma_0_slave_burst_adapter_source0_valid;               // homography_dma_0_slave_burst_adapter:source0_valid -> homography_dma_0_slave_agent:cp_valid
	wire  [117:0] homography_dma_0_slave_burst_adapter_source0_data;                // homography_dma_0_slave_burst_adapter:source0_data -> homography_dma_0_slave_agent:cp_data
	wire          homography_dma_0_slave_burst_adapter_source0_ready;               // homography_dma_0_slave_agent:cp_ready -> homography_dma_0_slave_burst_adapter:source0_ready
	wire    [8:0] homography_dma_0_slave_burst_adapter_source0_channel;             // homography_dma_0_slave_burst_adapter:source0_channel -> homography_dma_0_slave_agent:cp_channel
	wire          homography_dma_0_slave_burst_adapter_source0_startofpacket;       // homography_dma_0_slave_burst_adapter:source0_startofpacket -> homography_dma_0_slave_agent:cp_startofpacket
	wire          homography_dma_0_slave_burst_adapter_source0_endofpacket;         // homography_dma_0_slave_burst_adapter:source0_endofpacket -> homography_dma_0_slave_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                            // cmd_mux_006:src_valid -> lwir_ul0304_0_slave_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_006_src_data;                                             // cmd_mux_006:src_data -> lwir_ul0304_0_slave_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                            // lwir_ul0304_0_slave_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire    [8:0] cmd_mux_006_src_channel;                                          // cmd_mux_006:src_channel -> lwir_ul0304_0_slave_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                    // cmd_mux_006:src_startofpacket -> lwir_ul0304_0_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                      // cmd_mux_006:src_endofpacket -> lwir_ul0304_0_slave_burst_adapter:sink0_endofpacket
	wire          lwir_ul0304_0_slave_burst_adapter_source0_valid;                  // lwir_ul0304_0_slave_burst_adapter:source0_valid -> lwir_ul0304_0_slave_agent:cp_valid
	wire  [117:0] lwir_ul0304_0_slave_burst_adapter_source0_data;                   // lwir_ul0304_0_slave_burst_adapter:source0_data -> lwir_ul0304_0_slave_agent:cp_data
	wire          lwir_ul0304_0_slave_burst_adapter_source0_ready;                  // lwir_ul0304_0_slave_agent:cp_ready -> lwir_ul0304_0_slave_burst_adapter:source0_ready
	wire    [8:0] lwir_ul0304_0_slave_burst_adapter_source0_channel;                // lwir_ul0304_0_slave_burst_adapter:source0_channel -> lwir_ul0304_0_slave_agent:cp_channel
	wire          lwir_ul0304_0_slave_burst_adapter_source0_startofpacket;          // lwir_ul0304_0_slave_burst_adapter:source0_startofpacket -> lwir_ul0304_0_slave_agent:cp_startofpacket
	wire          lwir_ul0304_0_slave_burst_adapter_source0_endofpacket;            // lwir_ul0304_0_slave_burst_adapter:source0_endofpacket -> lwir_ul0304_0_slave_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                            // cmd_mux_007:src_valid -> addVector_0_slave_1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_007_src_data;                                             // cmd_mux_007:src_data -> addVector_0_slave_1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                            // addVector_0_slave_1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire    [8:0] cmd_mux_007_src_channel;                                          // cmd_mux_007:src_channel -> addVector_0_slave_1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                    // cmd_mux_007:src_startofpacket -> addVector_0_slave_1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                      // cmd_mux_007:src_endofpacket -> addVector_0_slave_1_burst_adapter:sink0_endofpacket
	wire          addvector_0_slave_1_burst_adapter_source0_valid;                  // addVector_0_slave_1_burst_adapter:source0_valid -> addVector_0_slave_1_agent:cp_valid
	wire  [117:0] addvector_0_slave_1_burst_adapter_source0_data;                   // addVector_0_slave_1_burst_adapter:source0_data -> addVector_0_slave_1_agent:cp_data
	wire          addvector_0_slave_1_burst_adapter_source0_ready;                  // addVector_0_slave_1_agent:cp_ready -> addVector_0_slave_1_burst_adapter:source0_ready
	wire    [8:0] addvector_0_slave_1_burst_adapter_source0_channel;                // addVector_0_slave_1_burst_adapter:source0_channel -> addVector_0_slave_1_agent:cp_channel
	wire          addvector_0_slave_1_burst_adapter_source0_startofpacket;          // addVector_0_slave_1_burst_adapter:source0_startofpacket -> addVector_0_slave_1_agent:cp_startofpacket
	wire          addvector_0_slave_1_burst_adapter_source0_endofpacket;            // addVector_0_slave_1_burst_adapter:source0_endofpacket -> addVector_0_slave_1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                            // cmd_mux_008:src_valid -> addVector_1_slave_1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_008_src_data;                                             // cmd_mux_008:src_data -> addVector_1_slave_1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                            // addVector_1_slave_1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire    [8:0] cmd_mux_008_src_channel;                                          // cmd_mux_008:src_channel -> addVector_1_slave_1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                    // cmd_mux_008:src_startofpacket -> addVector_1_slave_1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                      // cmd_mux_008:src_endofpacket -> addVector_1_slave_1_burst_adapter:sink0_endofpacket
	wire          addvector_1_slave_1_burst_adapter_source0_valid;                  // addVector_1_slave_1_burst_adapter:source0_valid -> addVector_1_slave_1_agent:cp_valid
	wire  [117:0] addvector_1_slave_1_burst_adapter_source0_data;                   // addVector_1_slave_1_burst_adapter:source0_data -> addVector_1_slave_1_agent:cp_data
	wire          addvector_1_slave_1_burst_adapter_source0_ready;                  // addVector_1_slave_1_agent:cp_ready -> addVector_1_slave_1_burst_adapter:source0_ready
	wire    [8:0] addvector_1_slave_1_burst_adapter_source0_channel;                // addVector_1_slave_1_burst_adapter:source0_channel -> addVector_1_slave_1_agent:cp_channel
	wire          addvector_1_slave_1_burst_adapter_source0_startofpacket;          // addVector_1_slave_1_burst_adapter:source0_startofpacket -> addVector_1_slave_1_agent:cp_startofpacket
	wire          addvector_1_slave_1_burst_adapter_source0_endofpacket;            // addVector_1_slave_1_burst_adapter:source0_endofpacket -> addVector_1_slave_1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [117:0] cmd_demux_src0_data;                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [8:0] cmd_demux_src0_channel;                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                             // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [117:0] cmd_demux_src1_data;                                              // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                             // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [8:0] cmd_demux_src1_channel;                                           // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                     // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                       // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                             // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [117:0] cmd_demux_src2_data;                                              // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                             // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [8:0] cmd_demux_src2_channel;                                           // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                     // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                       // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                             // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [117:0] cmd_demux_src4_data;                                              // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                             // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [8:0] cmd_demux_src4_channel;                                           // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                     // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                       // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                             // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [117:0] cmd_demux_src5_data;                                              // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                             // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire    [8:0] cmd_demux_src5_channel;                                           // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                     // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                       // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                             // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [117:0] cmd_demux_src7_data;                                              // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                             // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire    [8:0] cmd_demux_src7_channel;                                           // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                     // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                       // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                             // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [117:0] cmd_demux_src8_data;                                              // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                             // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire    [8:0] cmd_demux_src8_channel;                                           // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                     // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                       // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                         // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [117:0] cmd_demux_001_src0_data;                                          // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                         // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [8:0] cmd_demux_001_src0_channel;                                       // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                 // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                   // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                         // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [117:0] cmd_demux_001_src1_data;                                          // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                         // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [8:0] cmd_demux_001_src1_channel;                                       // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                 // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                   // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                         // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [117:0] cmd_demux_001_src2_data;                                          // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                         // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [8:0] cmd_demux_001_src2_channel;                                       // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                 // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                   // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                         // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [117:0] cmd_demux_001_src4_data;                                          // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                         // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire    [8:0] cmd_demux_001_src4_channel;                                       // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                 // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                   // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                         // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [117:0] cmd_demux_001_src5_data;                                          // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                         // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire    [8:0] cmd_demux_001_src5_channel;                                       // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                 // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                   // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                         // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [117:0] cmd_demux_001_src7_data;                                          // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src7_ready;                                         // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire    [8:0] cmd_demux_001_src7_channel;                                       // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                 // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                   // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                         // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire  [117:0] cmd_demux_001_src8_data;                                          // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src8_ready;                                         // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire    [8:0] cmd_demux_001_src8_channel;                                       // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                 // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                   // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [117:0] rsp_demux_src0_data;                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [8:0] rsp_demux_src0_channel;                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                             // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [117:0] rsp_demux_src1_data;                                              // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                             // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [8:0] rsp_demux_src1_channel;                                           // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                     // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                       // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                         // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [117:0] rsp_demux_001_src0_data;                                          // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                         // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [8:0] rsp_demux_001_src0_channel;                                       // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                 // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                   // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                         // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [117:0] rsp_demux_001_src1_data;                                          // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                         // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [8:0] rsp_demux_001_src1_channel;                                       // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                 // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                   // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                         // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [117:0] rsp_demux_002_src0_data;                                          // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                         // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [8:0] rsp_demux_002_src0_channel;                                       // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                 // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                   // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                         // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [117:0] rsp_demux_002_src1_data;                                          // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                         // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [8:0] rsp_demux_002_src1_channel;                                       // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                 // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                   // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_004_src0_valid;                                         // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [117:0] rsp_demux_004_src0_data;                                          // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                         // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [8:0] rsp_demux_004_src0_channel;                                       // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                 // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                   // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                         // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [117:0] rsp_demux_004_src1_data;                                          // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                         // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire    [8:0] rsp_demux_004_src1_channel;                                       // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                 // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                   // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                         // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [117:0] rsp_demux_005_src0_data;                                          // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                         // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire    [8:0] rsp_demux_005_src0_channel;                                       // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                 // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                   // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                         // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [117:0] rsp_demux_005_src1_data;                                          // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                         // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire    [8:0] rsp_demux_005_src1_channel;                                       // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                                 // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                   // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_007_src0_valid;                                         // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [117:0] rsp_demux_007_src0_data;                                          // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                         // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire    [8:0] rsp_demux_007_src0_channel;                                       // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                 // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                   // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                         // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [117:0] rsp_demux_007_src1_data;                                          // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src1_ready;                                         // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire    [8:0] rsp_demux_007_src1_channel;                                       // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                                 // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                   // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                         // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [117:0] rsp_demux_008_src0_data;                                          // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                         // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire    [8:0] rsp_demux_008_src0_channel;                                       // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                 // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                   // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                         // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire  [117:0] rsp_demux_008_src1_data;                                          // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src1_ready;                                         // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire    [8:0] rsp_demux_008_src1_channel;                                       // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                                 // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                   // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          cmd_demux_src3_valid;                                             // cmd_demux:src3_valid -> crosser:in_valid
	wire  [117:0] cmd_demux_src3_data;                                              // cmd_demux:src3_data -> crosser:in_data
	wire          cmd_demux_src3_ready;                                             // crosser:in_ready -> cmd_demux:src3_ready
	wire    [8:0] cmd_demux_src3_channel;                                           // cmd_demux:src3_channel -> crosser:in_channel
	wire          cmd_demux_src3_startofpacket;                                     // cmd_demux:src3_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                       // cmd_demux:src3_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                // crosser:out_valid -> cmd_mux_003:sink0_valid
	wire  [117:0] crosser_out_data;                                                 // crosser:out_data -> cmd_mux_003:sink0_data
	wire          crosser_out_ready;                                                // cmd_mux_003:sink0_ready -> crosser:out_ready
	wire    [8:0] crosser_out_channel;                                              // crosser:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_out_startofpacket;                                        // crosser:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          crosser_out_endofpacket;                                          // crosser:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                             // cmd_demux:src6_valid -> crosser_001:in_valid
	wire  [117:0] cmd_demux_src6_data;                                              // cmd_demux:src6_data -> crosser_001:in_data
	wire          cmd_demux_src6_ready;                                             // crosser_001:in_ready -> cmd_demux:src6_ready
	wire    [8:0] cmd_demux_src6_channel;                                           // cmd_demux:src6_channel -> crosser_001:in_channel
	wire          cmd_demux_src6_startofpacket;                                     // cmd_demux:src6_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                       // cmd_demux:src6_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                            // crosser_001:out_valid -> cmd_mux_006:sink0_valid
	wire  [117:0] crosser_001_out_data;                                             // crosser_001:out_data -> cmd_mux_006:sink0_data
	wire          crosser_001_out_ready;                                            // cmd_mux_006:sink0_ready -> crosser_001:out_ready
	wire    [8:0] crosser_001_out_channel;                                          // crosser_001:out_channel -> cmd_mux_006:sink0_channel
	wire          crosser_001_out_startofpacket;                                    // crosser_001:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                      // crosser_001:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                         // cmd_demux_001:src3_valid -> crosser_002:in_valid
	wire  [117:0] cmd_demux_001_src3_data;                                          // cmd_demux_001:src3_data -> crosser_002:in_data
	wire          cmd_demux_001_src3_ready;                                         // crosser_002:in_ready -> cmd_demux_001:src3_ready
	wire    [8:0] cmd_demux_001_src3_channel;                                       // cmd_demux_001:src3_channel -> crosser_002:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                 // cmd_demux_001:src3_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                   // cmd_demux_001:src3_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                            // crosser_002:out_valid -> cmd_mux_003:sink1_valid
	wire  [117:0] crosser_002_out_data;                                             // crosser_002:out_data -> cmd_mux_003:sink1_data
	wire          crosser_002_out_ready;                                            // cmd_mux_003:sink1_ready -> crosser_002:out_ready
	wire    [8:0] crosser_002_out_channel;                                          // crosser_002:out_channel -> cmd_mux_003:sink1_channel
	wire          crosser_002_out_startofpacket;                                    // crosser_002:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          crosser_002_out_endofpacket;                                      // crosser_002:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                         // cmd_demux_001:src6_valid -> crosser_003:in_valid
	wire  [117:0] cmd_demux_001_src6_data;                                          // cmd_demux_001:src6_data -> crosser_003:in_data
	wire          cmd_demux_001_src6_ready;                                         // crosser_003:in_ready -> cmd_demux_001:src6_ready
	wire    [8:0] cmd_demux_001_src6_channel;                                       // cmd_demux_001:src6_channel -> crosser_003:in_channel
	wire          cmd_demux_001_src6_startofpacket;                                 // cmd_demux_001:src6_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                   // cmd_demux_001:src6_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                            // crosser_003:out_valid -> cmd_mux_006:sink1_valid
	wire  [117:0] crosser_003_out_data;                                             // crosser_003:out_data -> cmd_mux_006:sink1_data
	wire          crosser_003_out_ready;                                            // cmd_mux_006:sink1_ready -> crosser_003:out_ready
	wire    [8:0] crosser_003_out_channel;                                          // crosser_003:out_channel -> cmd_mux_006:sink1_channel
	wire          crosser_003_out_startofpacket;                                    // crosser_003:out_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          crosser_003_out_endofpacket;                                      // crosser_003:out_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                         // rsp_demux_003:src0_valid -> crosser_004:in_valid
	wire  [117:0] rsp_demux_003_src0_data;                                          // rsp_demux_003:src0_data -> crosser_004:in_data
	wire          rsp_demux_003_src0_ready;                                         // crosser_004:in_ready -> rsp_demux_003:src0_ready
	wire    [8:0] rsp_demux_003_src0_channel;                                       // rsp_demux_003:src0_channel -> crosser_004:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                 // rsp_demux_003:src0_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                   // rsp_demux_003:src0_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                            // crosser_004:out_valid -> rsp_mux:sink3_valid
	wire  [117:0] crosser_004_out_data;                                             // crosser_004:out_data -> rsp_mux:sink3_data
	wire          crosser_004_out_ready;                                            // rsp_mux:sink3_ready -> crosser_004:out_ready
	wire    [8:0] crosser_004_out_channel;                                          // crosser_004:out_channel -> rsp_mux:sink3_channel
	wire          crosser_004_out_startofpacket;                                    // crosser_004:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          crosser_004_out_endofpacket;                                      // crosser_004:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                         // rsp_demux_003:src1_valid -> crosser_005:in_valid
	wire  [117:0] rsp_demux_003_src1_data;                                          // rsp_demux_003:src1_data -> crosser_005:in_data
	wire          rsp_demux_003_src1_ready;                                         // crosser_005:in_ready -> rsp_demux_003:src1_ready
	wire    [8:0] rsp_demux_003_src1_channel;                                       // rsp_demux_003:src1_channel -> crosser_005:in_channel
	wire          rsp_demux_003_src1_startofpacket;                                 // rsp_demux_003:src1_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                   // rsp_demux_003:src1_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                            // crosser_005:out_valid -> rsp_mux_001:sink3_valid
	wire  [117:0] crosser_005_out_data;                                             // crosser_005:out_data -> rsp_mux_001:sink3_data
	wire          crosser_005_out_ready;                                            // rsp_mux_001:sink3_ready -> crosser_005:out_ready
	wire    [8:0] crosser_005_out_channel;                                          // crosser_005:out_channel -> rsp_mux_001:sink3_channel
	wire          crosser_005_out_startofpacket;                                    // crosser_005:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          crosser_005_out_endofpacket;                                      // crosser_005:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_006_src0_valid;                                         // rsp_demux_006:src0_valid -> crosser_006:in_valid
	wire  [117:0] rsp_demux_006_src0_data;                                          // rsp_demux_006:src0_data -> crosser_006:in_data
	wire          rsp_demux_006_src0_ready;                                         // crosser_006:in_ready -> rsp_demux_006:src0_ready
	wire    [8:0] rsp_demux_006_src0_channel;                                       // rsp_demux_006:src0_channel -> crosser_006:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                 // rsp_demux_006:src0_startofpacket -> crosser_006:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                   // rsp_demux_006:src0_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                            // crosser_006:out_valid -> rsp_mux:sink6_valid
	wire  [117:0] crosser_006_out_data;                                             // crosser_006:out_data -> rsp_mux:sink6_data
	wire          crosser_006_out_ready;                                            // rsp_mux:sink6_ready -> crosser_006:out_ready
	wire    [8:0] crosser_006_out_channel;                                          // crosser_006:out_channel -> rsp_mux:sink6_channel
	wire          crosser_006_out_startofpacket;                                    // crosser_006:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          crosser_006_out_endofpacket;                                      // crosser_006:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                         // rsp_demux_006:src1_valid -> crosser_007:in_valid
	wire  [117:0] rsp_demux_006_src1_data;                                          // rsp_demux_006:src1_data -> crosser_007:in_data
	wire          rsp_demux_006_src1_ready;                                         // crosser_007:in_ready -> rsp_demux_006:src1_ready
	wire    [8:0] rsp_demux_006_src1_channel;                                       // rsp_demux_006:src1_channel -> crosser_007:in_channel
	wire          rsp_demux_006_src1_startofpacket;                                 // rsp_demux_006:src1_startofpacket -> crosser_007:in_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                   // rsp_demux_006:src1_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                            // crosser_007:out_valid -> rsp_mux_001:sink6_valid
	wire  [117:0] crosser_007_out_data;                                             // crosser_007:out_data -> rsp_mux_001:sink6_data
	wire          crosser_007_out_ready;                                            // rsp_mux_001:sink6_ready -> crosser_007:out_ready
	wire    [8:0] crosser_007_out_channel;                                          // crosser_007:out_channel -> rsp_mux_001:sink6_channel
	wire          crosser_007_out_startofpacket;                                    // crosser_007:out_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          crosser_007_out_endofpacket;                                      // crosser_007:out_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire    [8:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [8:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          led_s1_agent_rdata_fifo_out_valid;                                // led_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] led_s1_agent_rdata_fifo_out_data;                                 // led_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          led_s1_agent_rdata_fifo_out_ready;                                // avalon_st_adapter:in_0_ready -> led_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                    // avalon_st_adapter:out_0_valid -> led_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                     // avalon_st_adapter:out_0_data -> led_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                    // led_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                    // avalon_st_adapter:out_0_error -> led_s1_agent:rdata_fifo_sink_error
	wire          sw_s1_agent_rdata_fifo_out_valid;                                 // sw_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] sw_s1_agent_rdata_fifo_out_data;                                  // sw_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          sw_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_001:in_0_ready -> sw_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                // avalon_st_adapter_001:out_0_valid -> sw_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                 // avalon_st_adapter_001:out_0_data -> sw_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                // sw_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                // avalon_st_adapter_001:out_0_error -> sw_s1_agent:rdata_fifo_sink_error
	wire          bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_out_valid;          // bridge_stSrcMmMaster_0_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_out_data;           // bridge_stSrcMmMaster_0_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter_002:in_0_ready -> bridge_stSrcMmMaster_0_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                // avalon_st_adapter_002:out_0_valid -> bridge_stSrcMmMaster_0_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                 // avalon_st_adapter_002:out_0_data -> bridge_stSrcMmMaster_0_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                // bridge_stSrcMmMaster_0_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                // avalon_st_adapter_002:out_0_error -> bridge_stSrcMmMaster_0_slave_agent:rdata_fifo_sink_error
	wire          swir_v400_0_slave_agent_rdata_fifo_out_valid;                     // swir_v400_0_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] swir_v400_0_slave_agent_rdata_fifo_out_data;                      // swir_v400_0_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          swir_v400_0_slave_agent_rdata_fifo_out_ready;                     // avalon_st_adapter_003:in_0_ready -> swir_v400_0_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                // avalon_st_adapter_003:out_0_valid -> swir_v400_0_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                 // avalon_st_adapter_003:out_0_data -> swir_v400_0_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                // swir_v400_0_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                // avalon_st_adapter_003:out_0_error -> swir_v400_0_slave_agent:rdata_fifo_sink_error
	wire          bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_out_valid;          // bridge_stSrcMmMaster_1_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_out_data;           // bridge_stSrcMmMaster_1_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter_004:in_0_ready -> bridge_stSrcMmMaster_1_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                // avalon_st_adapter_004:out_0_valid -> bridge_stSrcMmMaster_1_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                 // avalon_st_adapter_004:out_0_data -> bridge_stSrcMmMaster_1_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                // bridge_stSrcMmMaster_1_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                // avalon_st_adapter_004:out_0_error -> bridge_stSrcMmMaster_1_slave_agent:rdata_fifo_sink_error
	wire          homography_dma_0_slave_agent_rdata_fifo_out_valid;                // homography_dma_0_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] homography_dma_0_slave_agent_rdata_fifo_out_data;                 // homography_dma_0_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          homography_dma_0_slave_agent_rdata_fifo_out_ready;                // avalon_st_adapter_005:in_0_ready -> homography_dma_0_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                // avalon_st_adapter_005:out_0_valid -> homography_dma_0_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                 // avalon_st_adapter_005:out_0_data -> homography_dma_0_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                // homography_dma_0_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                // avalon_st_adapter_005:out_0_error -> homography_dma_0_slave_agent:rdata_fifo_sink_error
	wire          lwir_ul0304_0_slave_agent_rdata_fifo_out_valid;                   // lwir_ul0304_0_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] lwir_ul0304_0_slave_agent_rdata_fifo_out_data;                    // lwir_ul0304_0_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          lwir_ul0304_0_slave_agent_rdata_fifo_out_ready;                   // avalon_st_adapter_006:in_0_ready -> lwir_ul0304_0_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                // avalon_st_adapter_006:out_0_valid -> lwir_ul0304_0_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                 // avalon_st_adapter_006:out_0_data -> lwir_ul0304_0_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                // lwir_ul0304_0_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                // avalon_st_adapter_006:out_0_error -> lwir_ul0304_0_slave_agent:rdata_fifo_sink_error
	wire          addvector_0_slave_1_agent_rdata_fifo_out_valid;                   // addVector_0_slave_1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] addvector_0_slave_1_agent_rdata_fifo_out_data;                    // addVector_0_slave_1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          addvector_0_slave_1_agent_rdata_fifo_out_ready;                   // avalon_st_adapter_007:in_0_ready -> addVector_0_slave_1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                // avalon_st_adapter_007:out_0_valid -> addVector_0_slave_1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                 // avalon_st_adapter_007:out_0_data -> addVector_0_slave_1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                // addVector_0_slave_1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                // avalon_st_adapter_007:out_0_error -> addVector_0_slave_1_agent:rdata_fifo_sink_error
	wire          addvector_1_slave_1_agent_rdata_fifo_out_valid;                   // addVector_1_slave_1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] addvector_1_slave_1_agent_rdata_fifo_out_data;                    // addVector_1_slave_1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          addvector_1_slave_1_agent_rdata_fifo_out_ready;                   // avalon_st_adapter_008:in_0_ready -> addVector_1_slave_1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                // avalon_st_adapter_008:out_0_valid -> addVector_1_slave_1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                 // avalon_st_adapter_008:out_0_data -> addVector_1_slave_1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                // addVector_1_slave_1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                // avalon_st_adapter_008:out_0_error -> addVector_1_slave_1_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_s1_translator (
		.clk                    (clk_0_clk_clk),                         //                      clk.clk
		.reset                  (led_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (led_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (led_s1_agent_m0_read),                  //                         .read
		.uav_write              (led_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (led_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (led_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (led_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (led_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (led_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (led_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (led_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (led_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (led_s1_write),                          //                         .write
		.av_readdata            (led_s1_readdata),                       //                         .readdata
		.av_writedata           (led_s1_writedata),                      //                         .writedata
		.av_chipselect          (led_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sw_s1_translator (
		.clk                    (clk_0_clk_clk),                         //                      clk.clk
		.reset                  (led_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sw_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (sw_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (sw_s1_agent_m0_read),                   //                         .read
		.uav_write              (sw_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (sw_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (sw_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (sw_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (sw_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (sw_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (sw_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (sw_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (sw_s1_address),                         //      avalon_anti_slave_0.address
		.av_readdata            (sw_s1_readdata),                        //                         .readdata
		.av_write               (),                                      //              (terminated)
		.av_read                (),                                      //              (terminated)
		.av_writedata           (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) bridge_stsrcmmmaster_0_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (led_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (bridge_stsrcmmmaster_0_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (bridge_stsrcmmmaster_0_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (bridge_stsrcmmmaster_0_slave_agent_m0_read),          //                         .read
		.uav_write              (bridge_stsrcmmmaster_0_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (bridge_stsrcmmmaster_0_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (bridge_stsrcmmmaster_0_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (bridge_stsrcmmmaster_0_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (bridge_stsrcmmmaster_0_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (bridge_stsrcmmmaster_0_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (bridge_stsrcmmmaster_0_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (bridge_stsrcmmmaster_0_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (bridge_stSrcMmMaster_0_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (bridge_stSrcMmMaster_0_slave_write),                  //                         .write
		.av_read                (bridge_stSrcMmMaster_0_slave_read),                   //                         .read
		.av_readdata            (bridge_stSrcMmMaster_0_slave_readdata),               //                         .readdata
		.av_writedata           (bridge_stSrcMmMaster_0_slave_writedata),              //                         .writedata
		.av_readdatavalid       (bridge_stSrcMmMaster_0_slave_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (bridge_stSrcMmMaster_0_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (bridge_stSrcMmMaster_0_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) swir_v400_0_slave_translator (
		.clk                    (pll_0_outclk0_clk),                                  //                      clk.clk
		.reset                  (swir_v400_0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (swir_v400_0_slave_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (swir_v400_0_slave_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (swir_v400_0_slave_agent_m0_read),                    //                         .read
		.uav_write              (swir_v400_0_slave_agent_m0_write),                   //                         .write
		.uav_waitrequest        (swir_v400_0_slave_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (swir_v400_0_slave_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (swir_v400_0_slave_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (swir_v400_0_slave_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (swir_v400_0_slave_agent_m0_writedata),               //                         .writedata
		.uav_lock               (swir_v400_0_slave_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (swir_v400_0_slave_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (swir_v400_0_slave_address),                          //      avalon_anti_slave_0.address
		.av_write               (swir_v400_0_slave_write),                            //                         .write
		.av_read                (swir_v400_0_slave_read),                             //                         .read
		.av_readdata            (swir_v400_0_slave_readdata),                         //                         .readdata
		.av_writedata           (swir_v400_0_slave_writedata),                        //                         .writedata
		.av_byteenable          (swir_v400_0_slave_byteenable),                       //                         .byteenable
		.av_readdatavalid       (swir_v400_0_slave_readdatavalid),                    //                         .readdatavalid
		.av_waitrequest         (swir_v400_0_slave_waitrequest),                      //                         .waitrequest
		.av_chipselect          (swir_v400_0_slave_chipselect),                       //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) bridge_stsrcmmmaster_1_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (led_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (bridge_stsrcmmmaster_1_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (bridge_stsrcmmmaster_1_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (bridge_stsrcmmmaster_1_slave_agent_m0_read),          //                         .read
		.uav_write              (bridge_stsrcmmmaster_1_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (bridge_stsrcmmmaster_1_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (bridge_stsrcmmmaster_1_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (bridge_stsrcmmmaster_1_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (bridge_stsrcmmmaster_1_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (bridge_stsrcmmmaster_1_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (bridge_stsrcmmmaster_1_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (bridge_stsrcmmmaster_1_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (bridge_stSrcMmMaster_1_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (bridge_stSrcMmMaster_1_slave_write),                  //                         .write
		.av_read                (bridge_stSrcMmMaster_1_slave_read),                   //                         .read
		.av_readdata            (bridge_stSrcMmMaster_1_slave_readdata),               //                         .readdata
		.av_writedata           (bridge_stSrcMmMaster_1_slave_writedata),              //                         .writedata
		.av_readdatavalid       (bridge_stSrcMmMaster_1_slave_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (bridge_stSrcMmMaster_1_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (bridge_stSrcMmMaster_1_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) homography_dma_0_slave_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (led_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (homography_dma_0_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (homography_dma_0_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (homography_dma_0_slave_agent_m0_read),          //                         .read
		.uav_write              (homography_dma_0_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (homography_dma_0_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (homography_dma_0_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (homography_dma_0_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (homography_dma_0_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (homography_dma_0_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (homography_dma_0_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (homography_dma_0_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (homography_dma_0_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (homography_dma_0_slave_write),                  //                         .write
		.av_read                (homography_dma_0_slave_read),                   //                         .read
		.av_readdata            (homography_dma_0_slave_readdata),               //                         .readdata
		.av_writedata           (homography_dma_0_slave_writedata),              //                         .writedata
		.av_readdatavalid       (homography_dma_0_slave_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (homography_dma_0_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (homography_dma_0_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lwir_ul0304_0_slave_translator (
		.clk                    (pll_0_outclk1_clk),                                    //                      clk.clk
		.reset                  (lwir_ul0304_0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (lwir_ul0304_0_slave_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (lwir_ul0304_0_slave_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (lwir_ul0304_0_slave_agent_m0_read),                    //                         .read
		.uav_write              (lwir_ul0304_0_slave_agent_m0_write),                   //                         .write
		.uav_waitrequest        (lwir_ul0304_0_slave_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (lwir_ul0304_0_slave_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (lwir_ul0304_0_slave_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (lwir_ul0304_0_slave_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (lwir_ul0304_0_slave_agent_m0_writedata),               //                         .writedata
		.uav_lock               (lwir_ul0304_0_slave_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (lwir_ul0304_0_slave_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (lwir_ul0304_0_slave_address),                          //      avalon_anti_slave_0.address
		.av_write               (lwir_ul0304_0_slave_write),                            //                         .write
		.av_read                (lwir_ul0304_0_slave_read),                             //                         .read
		.av_readdata            (lwir_ul0304_0_slave_readdata),                         //                         .readdata
		.av_writedata           (lwir_ul0304_0_slave_writedata),                        //                         .writedata
		.av_byteenable          (lwir_ul0304_0_slave_byteenable),                       //                         .byteenable
		.av_readdatavalid       (lwir_ul0304_0_slave_readdatavalid),                    //                         .readdatavalid
		.av_waitrequest         (lwir_ul0304_0_slave_waitrequest),                      //                         .waitrequest
		.av_chipselect          (lwir_ul0304_0_slave_chipselect),                       //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) addvector_0_slave_1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (led_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (addvector_0_slave_1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (addvector_0_slave_1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (addvector_0_slave_1_agent_m0_read),          //                         .read
		.uav_write              (addvector_0_slave_1_agent_m0_write),         //                         .write
		.uav_waitrequest        (addvector_0_slave_1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (addvector_0_slave_1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (addvector_0_slave_1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (addvector_0_slave_1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (addvector_0_slave_1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (addvector_0_slave_1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (addvector_0_slave_1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (addVector_0_slave_1_address),                //      avalon_anti_slave_0.address
		.av_write               (addVector_0_slave_1_write),                  //                         .write
		.av_read                (addVector_0_slave_1_read),                   //                         .read
		.av_readdata            (addVector_0_slave_1_readdata),               //                         .readdata
		.av_writedata           (addVector_0_slave_1_writedata),              //                         .writedata
		.av_byteenable          (addVector_0_slave_1_byteenable),             //                         .byteenable
		.av_readdatavalid       (addVector_0_slave_1_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (addVector_0_slave_1_waitrequest),            //                         .waitrequest
		.av_chipselect          (addVector_0_slave_1_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) addvector_1_slave_1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (led_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (addvector_1_slave_1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (addvector_1_slave_1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (addvector_1_slave_1_agent_m0_read),          //                         .read
		.uav_write              (addvector_1_slave_1_agent_m0_write),         //                         .write
		.uav_waitrequest        (addvector_1_slave_1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (addvector_1_slave_1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (addvector_1_slave_1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (addvector_1_slave_1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (addvector_1_slave_1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (addvector_1_slave_1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (addvector_1_slave_1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (addVector_1_slave_1_address),                //      avalon_anti_slave_0.address
		.av_write               (addVector_1_slave_1_write),                  //                         .write
		.av_read                (addVector_1_slave_1_read),                   //                         .read
		.av_readdata            (addVector_1_slave_1_readdata),               //                         .readdata
		.av_writedata           (addVector_1_slave_1_writedata),              //                         .writedata
		.av_byteenable          (addVector_1_slave_1_byteenable),             //                         .byteenable
		.av_readdatavalid       (addVector_1_slave_1_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (addVector_1_slave_1_waitrequest),            //                         .waitrequest
		.av_chipselect          (addVector_1_slave_1_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (94),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.ID                        (0)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                        //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_s1_agent (
		.clk                     (clk_0_clk_clk),                              //             clk.clk
		.reset                   (led_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (led_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (led_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (led_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (led_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (led_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (led_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (led_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (led_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (led_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),              //                .error
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                           //       clk.clk
		.reset             (led_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),             //        in.data
		.in_valid          (led_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (led_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                         //       clk.clk
		.reset             (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (led_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (led_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (led_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (led_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (led_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sw_s1_agent (
		.clk                     (clk_0_clk_clk),                             //             clk.clk
		.reset                   (led_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (sw_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sw_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sw_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sw_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sw_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sw_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sw_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sw_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sw_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sw_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sw_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sw_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sw_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sw_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sw_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sw_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sw_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sw_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sw_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sw_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sw_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sw_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sw_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sw_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sw_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sw_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sw_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sw_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sw_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sw_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sw_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sw_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),         //                .error
		.rdata_fifo_src_ready    (sw_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sw_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sw_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                          //       clk.clk
		.reset             (led_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (sw_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sw_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sw_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sw_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sw_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sw_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sw_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sw_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sw_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sw_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                  // (terminated)
		.csr_read          (1'b0),                                   // (terminated)
		.csr_write         (1'b0),                                   // (terminated)
		.csr_readdata      (),                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),   // (terminated)
		.almost_full_data  (),                                       // (terminated)
		.almost_empty_data (),                                       // (terminated)
		.in_empty          (1'b0),                                   // (terminated)
		.out_empty         (),                                       // (terminated)
		.in_error          (1'b0),                                   // (terminated)
		.out_error         (),                                       // (terminated)
		.in_channel        (1'b0),                                   // (terminated)
		.out_channel       ()                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                         //       clk.clk
		.reset             (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sw_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (sw_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (sw_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (sw_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (sw_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (sw_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) bridge_stsrcmmmaster_0_slave_agent (
		.clk                     (clk_0_clk_clk),                                                    //             clk.clk
		.reset                   (led_reset_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (bridge_stsrcmmmaster_0_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (bridge_stsrcmmmaster_0_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (bridge_stsrcmmmaster_0_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (bridge_stsrcmmmaster_0_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (bridge_stsrcmmmaster_0_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (bridge_stsrcmmmaster_0_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (bridge_stsrcmmmaster_0_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (bridge_stsrcmmmaster_0_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (bridge_stsrcmmmaster_0_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (bridge_stsrcmmmaster_0_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (bridge_stsrcmmmaster_0_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (bridge_stsrcmmmaster_0_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (bridge_stsrcmmmaster_0_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (bridge_stsrcmmmaster_0_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (bridge_stsrcmmmaster_0_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (bridge_stsrcmmmaster_0_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (bridge_stsrcmmmaster_0_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (bridge_stsrcmmmaster_0_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (bridge_stsrcmmmaster_0_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (bridge_stsrcmmmaster_0_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (bridge_stsrcmmmaster_0_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (bridge_stsrcmmmaster_0_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (bridge_stsrcmmmaster_0_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (bridge_stsrcmmmaster_0_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (bridge_stsrcmmmaster_0_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (bridge_stsrcmmmaster_0_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (bridge_stsrcmmmaster_0_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (bridge_stsrcmmmaster_0_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (bridge_stsrcmmmaster_0_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (bridge_stsrcmmmaster_0_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (bridge_stsrcmmmaster_0_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (bridge_stsrcmmmaster_0_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) bridge_stsrcmmmaster_0_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (led_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (bridge_stsrcmmmaster_0_slave_agent_rf_source_data),             //        in.data
		.in_valid          (bridge_stsrcmmmaster_0_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (bridge_stsrcmmmaster_0_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (bridge_stsrcmmmaster_0_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (bridge_stsrcmmmaster_0_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (bridge_stsrcmmmaster_0_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (bridge_stsrcmmmaster_0_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (bridge_stsrcmmmaster_0_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (bridge_stsrcmmmaster_0_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (bridge_stsrcmmmaster_0_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) bridge_stsrcmmmaster_0_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (led_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                    // (terminated)
		.out_startofpacket (),                                                        // (terminated)
		.out_endofpacket   (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) swir_v400_0_slave_agent (
		.clk                     (pll_0_outclk0_clk),                                     //             clk.clk
		.reset                   (swir_v400_0_reset_sink_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (swir_v400_0_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (swir_v400_0_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (swir_v400_0_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (swir_v400_0_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (swir_v400_0_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (swir_v400_0_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (swir_v400_0_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (swir_v400_0_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (swir_v400_0_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (swir_v400_0_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (swir_v400_0_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (swir_v400_0_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (swir_v400_0_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (swir_v400_0_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (swir_v400_0_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (swir_v400_0_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (swir_v400_0_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (swir_v400_0_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (swir_v400_0_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (swir_v400_0_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (swir_v400_0_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (swir_v400_0_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (swir_v400_0_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (swir_v400_0_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (swir_v400_0_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (swir_v400_0_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (swir_v400_0_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (swir_v400_0_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (swir_v400_0_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (swir_v400_0_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (swir_v400_0_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (swir_v400_0_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (swir_v400_0_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (swir_v400_0_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (swir_v400_0_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) swir_v400_0_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                  //       clk.clk
		.reset             (swir_v400_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (swir_v400_0_slave_agent_rf_source_data),             //        in.data
		.in_valid          (swir_v400_0_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (swir_v400_0_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (swir_v400_0_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (swir_v400_0_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (swir_v400_0_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (swir_v400_0_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (swir_v400_0_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (swir_v400_0_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (swir_v400_0_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) swir_v400_0_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                  //       clk.clk
		.reset             (swir_v400_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (swir_v400_0_slave_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (swir_v400_0_slave_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (swir_v400_0_slave_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (swir_v400_0_slave_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (swir_v400_0_slave_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (swir_v400_0_slave_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) bridge_stsrcmmmaster_1_slave_agent (
		.clk                     (clk_0_clk_clk),                                                    //             clk.clk
		.reset                   (led_reset_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (bridge_stsrcmmmaster_1_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (bridge_stsrcmmmaster_1_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (bridge_stsrcmmmaster_1_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (bridge_stsrcmmmaster_1_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (bridge_stsrcmmmaster_1_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (bridge_stsrcmmmaster_1_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (bridge_stsrcmmmaster_1_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (bridge_stsrcmmmaster_1_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (bridge_stsrcmmmaster_1_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (bridge_stsrcmmmaster_1_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (bridge_stsrcmmmaster_1_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (bridge_stsrcmmmaster_1_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (bridge_stsrcmmmaster_1_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (bridge_stsrcmmmaster_1_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (bridge_stsrcmmmaster_1_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (bridge_stsrcmmmaster_1_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (bridge_stsrcmmmaster_1_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (bridge_stsrcmmmaster_1_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (bridge_stsrcmmmaster_1_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (bridge_stsrcmmmaster_1_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (bridge_stsrcmmmaster_1_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (bridge_stsrcmmmaster_1_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (bridge_stsrcmmmaster_1_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (bridge_stsrcmmmaster_1_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (bridge_stsrcmmmaster_1_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (bridge_stsrcmmmaster_1_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (bridge_stsrcmmmaster_1_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (bridge_stsrcmmmaster_1_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (bridge_stsrcmmmaster_1_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (bridge_stsrcmmmaster_1_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (bridge_stsrcmmmaster_1_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (bridge_stsrcmmmaster_1_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) bridge_stsrcmmmaster_1_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (led_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (bridge_stsrcmmmaster_1_slave_agent_rf_source_data),             //        in.data
		.in_valid          (bridge_stsrcmmmaster_1_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (bridge_stsrcmmmaster_1_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (bridge_stsrcmmmaster_1_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (bridge_stsrcmmmaster_1_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (bridge_stsrcmmmaster_1_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (bridge_stsrcmmmaster_1_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (bridge_stsrcmmmaster_1_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (bridge_stsrcmmmaster_1_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (bridge_stsrcmmmaster_1_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) bridge_stsrcmmmaster_1_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (led_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                    // (terminated)
		.out_startofpacket (),                                                        // (terminated)
		.out_endofpacket   (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) homography_dma_0_slave_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (led_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (homography_dma_0_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (homography_dma_0_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (homography_dma_0_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (homography_dma_0_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (homography_dma_0_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (homography_dma_0_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (homography_dma_0_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (homography_dma_0_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (homography_dma_0_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (homography_dma_0_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (homography_dma_0_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (homography_dma_0_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (homography_dma_0_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (homography_dma_0_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (homography_dma_0_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (homography_dma_0_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (homography_dma_0_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (homography_dma_0_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (homography_dma_0_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (homography_dma_0_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (homography_dma_0_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (homography_dma_0_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (homography_dma_0_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (homography_dma_0_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (homography_dma_0_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (homography_dma_0_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (homography_dma_0_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (homography_dma_0_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (homography_dma_0_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (homography_dma_0_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (homography_dma_0_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (homography_dma_0_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (homography_dma_0_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (homography_dma_0_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (homography_dma_0_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) homography_dma_0_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (led_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (homography_dma_0_slave_agent_rf_source_data),             //        in.data
		.in_valid          (homography_dma_0_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (homography_dma_0_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (homography_dma_0_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (homography_dma_0_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (homography_dma_0_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (homography_dma_0_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (homography_dma_0_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (homography_dma_0_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (homography_dma_0_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) homography_dma_0_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (led_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (homography_dma_0_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (homography_dma_0_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (homography_dma_0_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (homography_dma_0_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (homography_dma_0_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (homography_dma_0_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lwir_ul0304_0_slave_agent (
		.clk                     (pll_0_outclk1_clk),                                       //             clk.clk
		.reset                   (lwir_ul0304_0_reset_sink_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (lwir_ul0304_0_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (lwir_ul0304_0_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (lwir_ul0304_0_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (lwir_ul0304_0_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (lwir_ul0304_0_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (lwir_ul0304_0_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (lwir_ul0304_0_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (lwir_ul0304_0_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (lwir_ul0304_0_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (lwir_ul0304_0_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (lwir_ul0304_0_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (lwir_ul0304_0_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (lwir_ul0304_0_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (lwir_ul0304_0_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (lwir_ul0304_0_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (lwir_ul0304_0_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (lwir_ul0304_0_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (lwir_ul0304_0_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (lwir_ul0304_0_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (lwir_ul0304_0_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (lwir_ul0304_0_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (lwir_ul0304_0_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (lwir_ul0304_0_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (lwir_ul0304_0_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (lwir_ul0304_0_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (lwir_ul0304_0_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (lwir_ul0304_0_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (lwir_ul0304_0_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (lwir_ul0304_0_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (lwir_ul0304_0_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (lwir_ul0304_0_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (lwir_ul0304_0_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (lwir_ul0304_0_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lwir_ul0304_0_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (lwir_ul0304_0_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lwir_ul0304_0_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk1_clk),                                    //       clk.clk
		.reset             (lwir_ul0304_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (lwir_ul0304_0_slave_agent_rf_source_data),             //        in.data
		.in_valid          (lwir_ul0304_0_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (lwir_ul0304_0_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lwir_ul0304_0_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lwir_ul0304_0_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lwir_ul0304_0_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lwir_ul0304_0_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lwir_ul0304_0_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lwir_ul0304_0_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lwir_ul0304_0_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lwir_ul0304_0_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk1_clk),                                    //       clk.clk
		.reset             (lwir_ul0304_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (lwir_ul0304_0_slave_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (lwir_ul0304_0_slave_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (lwir_ul0304_0_slave_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (lwir_ul0304_0_slave_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (lwir_ul0304_0_slave_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (lwir_ul0304_0_slave_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) addvector_0_slave_1_agent (
		.clk                     (clk_0_clk_clk),                                           //             clk.clk
		.reset                   (led_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (addvector_0_slave_1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (addvector_0_slave_1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (addvector_0_slave_1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (addvector_0_slave_1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (addvector_0_slave_1_agent_m0_lock),                       //                .lock
		.m0_readdata             (addvector_0_slave_1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (addvector_0_slave_1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (addvector_0_slave_1_agent_m0_read),                       //                .read
		.m0_waitrequest          (addvector_0_slave_1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (addvector_0_slave_1_agent_m0_writedata),                  //                .writedata
		.m0_write                (addvector_0_slave_1_agent_m0_write),                      //                .write
		.rp_endofpacket          (addvector_0_slave_1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (addvector_0_slave_1_agent_rp_ready),                      //                .ready
		.rp_valid                (addvector_0_slave_1_agent_rp_valid),                      //                .valid
		.rp_data                 (addvector_0_slave_1_agent_rp_data),                       //                .data
		.rp_startofpacket        (addvector_0_slave_1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (addvector_0_slave_1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (addvector_0_slave_1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (addvector_0_slave_1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (addvector_0_slave_1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (addvector_0_slave_1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (addvector_0_slave_1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (addvector_0_slave_1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (addvector_0_slave_1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (addvector_0_slave_1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (addvector_0_slave_1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (addvector_0_slave_1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (addvector_0_slave_1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (addvector_0_slave_1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (addvector_0_slave_1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (addvector_0_slave_1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (addvector_0_slave_1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (addvector_0_slave_1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (addvector_0_slave_1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (addvector_0_slave_1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) addvector_0_slave_1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (led_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (addvector_0_slave_1_agent_rf_source_data),             //        in.data
		.in_valid          (addvector_0_slave_1_agent_rf_source_valid),            //          .valid
		.in_ready          (addvector_0_slave_1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (addvector_0_slave_1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (addvector_0_slave_1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (addvector_0_slave_1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (addvector_0_slave_1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (addvector_0_slave_1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (addvector_0_slave_1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (addvector_0_slave_1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) addvector_0_slave_1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (led_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (addvector_0_slave_1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (addvector_0_slave_1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (addvector_0_slave_1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (addvector_0_slave_1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (addvector_0_slave_1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (addvector_0_slave_1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) addvector_1_slave_1_agent (
		.clk                     (clk_0_clk_clk),                                           //             clk.clk
		.reset                   (led_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (addvector_1_slave_1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (addvector_1_slave_1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (addvector_1_slave_1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (addvector_1_slave_1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (addvector_1_slave_1_agent_m0_lock),                       //                .lock
		.m0_readdata             (addvector_1_slave_1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (addvector_1_slave_1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (addvector_1_slave_1_agent_m0_read),                       //                .read
		.m0_waitrequest          (addvector_1_slave_1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (addvector_1_slave_1_agent_m0_writedata),                  //                .writedata
		.m0_write                (addvector_1_slave_1_agent_m0_write),                      //                .write
		.rp_endofpacket          (addvector_1_slave_1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (addvector_1_slave_1_agent_rp_ready),                      //                .ready
		.rp_valid                (addvector_1_slave_1_agent_rp_valid),                      //                .valid
		.rp_data                 (addvector_1_slave_1_agent_rp_data),                       //                .data
		.rp_startofpacket        (addvector_1_slave_1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (addvector_1_slave_1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (addvector_1_slave_1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (addvector_1_slave_1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (addvector_1_slave_1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (addvector_1_slave_1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (addvector_1_slave_1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (addvector_1_slave_1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (addvector_1_slave_1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (addvector_1_slave_1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (addvector_1_slave_1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (addvector_1_slave_1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (addvector_1_slave_1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (addvector_1_slave_1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (addvector_1_slave_1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (addvector_1_slave_1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (addvector_1_slave_1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (addvector_1_slave_1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (addvector_1_slave_1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (addvector_1_slave_1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) addvector_1_slave_1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (led_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (addvector_1_slave_1_agent_rf_source_data),             //        in.data
		.in_valid          (addvector_1_slave_1_agent_rf_source_valid),            //          .valid
		.in_ready          (addvector_1_slave_1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (addvector_1_slave_1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (addvector_1_slave_1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (addvector_1_slave_1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (addvector_1_slave_1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (addvector_1_slave_1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (addvector_1_slave_1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (addvector_1_slave_1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) addvector_1_slave_1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (led_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (addvector_1_slave_1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (addvector_1_slave_1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (addvector_1_slave_1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (addvector_1_slave_1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (addvector_1_slave_1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (addvector_1_slave_1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	cycloneV_soc_mm_interconnect_4_router router (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                    //       src.ready
		.src_valid          (router_src_valid),                                                    //          .valid
		.src_data           (router_src_data),                                                     //          .data
		.src_channel        (router_src_channel),                                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                               //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_router router_001 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //       src.ready
		.src_valid          (router_001_src_valid),                                                //          .valid
		.src_data           (router_001_src_data),                                                 //          .data
		.src_channel        (router_001_src_channel),                                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_router_002 router_002 (
		.sink_ready         (led_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                 //          .valid
		.sink_data          (led_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                         //       clk.clk
		.reset              (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                  //       src.ready
		.src_valid          (router_002_src_valid),                  //          .valid
		.src_data           (router_002_src_data),                   //          .data
		.src_channel        (router_002_src_channel),                //          .channel
		.src_startofpacket  (router_002_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)             //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_router_002 router_003 (
		.sink_ready         (sw_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (sw_s1_agent_rp_valid),                  //          .valid
		.sink_data          (sw_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (sw_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (sw_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                         //       clk.clk
		.reset              (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                  //       src.ready
		.src_valid          (router_003_src_valid),                  //          .valid
		.src_data           (router_003_src_data),                   //          .data
		.src_channel        (router_003_src_channel),                //          .channel
		.src_startofpacket  (router_003_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)             //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_router_002 router_004 (
		.sink_ready         (bridge_stsrcmmmaster_0_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (bridge_stsrcmmmaster_0_slave_agent_rp_valid),         //          .valid
		.sink_data          (bridge_stsrcmmmaster_0_slave_agent_rp_data),          //          .data
		.sink_startofpacket (bridge_stsrcmmmaster_0_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (bridge_stsrcmmmaster_0_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (led_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_004_src_ready),                                //       src.ready
		.src_valid          (router_004_src_valid),                                //          .valid
		.src_data           (router_004_src_data),                                 //          .data
		.src_channel        (router_004_src_channel),                              //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                           //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_router_002 router_005 (
		.sink_ready         (swir_v400_0_slave_agent_rp_ready),                   //      sink.ready
		.sink_valid         (swir_v400_0_slave_agent_rp_valid),                   //          .valid
		.sink_data          (swir_v400_0_slave_agent_rp_data),                    //          .data
		.sink_startofpacket (swir_v400_0_slave_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (swir_v400_0_slave_agent_rp_endofpacket),             //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                  //       clk.clk
		.reset              (swir_v400_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                               //       src.ready
		.src_valid          (router_005_src_valid),                               //          .valid
		.src_data           (router_005_src_data),                                //          .data
		.src_channel        (router_005_src_channel),                             //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                          //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_router_002 router_006 (
		.sink_ready         (bridge_stsrcmmmaster_1_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (bridge_stsrcmmmaster_1_slave_agent_rp_valid),         //          .valid
		.sink_data          (bridge_stsrcmmmaster_1_slave_agent_rp_data),          //          .data
		.sink_startofpacket (bridge_stsrcmmmaster_1_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (bridge_stsrcmmmaster_1_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (led_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_006_src_ready),                                //       src.ready
		.src_valid          (router_006_src_valid),                                //          .valid
		.src_data           (router_006_src_data),                                 //          .data
		.src_channel        (router_006_src_channel),                              //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                           //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_router_002 router_007 (
		.sink_ready         (homography_dma_0_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (homography_dma_0_slave_agent_rp_valid),         //          .valid
		.sink_data          (homography_dma_0_slave_agent_rp_data),          //          .data
		.sink_startofpacket (homography_dma_0_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (homography_dma_0_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (led_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_007_src_ready),                          //       src.ready
		.src_valid          (router_007_src_valid),                          //          .valid
		.src_data           (router_007_src_data),                           //          .data
		.src_channel        (router_007_src_channel),                        //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                     //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_router_002 router_008 (
		.sink_ready         (lwir_ul0304_0_slave_agent_rp_ready),                   //      sink.ready
		.sink_valid         (lwir_ul0304_0_slave_agent_rp_valid),                   //          .valid
		.sink_data          (lwir_ul0304_0_slave_agent_rp_data),                    //          .data
		.sink_startofpacket (lwir_ul0304_0_slave_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (lwir_ul0304_0_slave_agent_rp_endofpacket),             //          .endofpacket
		.clk                (pll_0_outclk1_clk),                                    //       clk.clk
		.reset              (lwir_ul0304_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                 //       src.ready
		.src_valid          (router_008_src_valid),                                 //          .valid
		.src_data           (router_008_src_data),                                  //          .data
		.src_channel        (router_008_src_channel),                               //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                            //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_router_002 router_009 (
		.sink_ready         (addvector_0_slave_1_agent_rp_ready),         //      sink.ready
		.sink_valid         (addvector_0_slave_1_agent_rp_valid),         //          .valid
		.sink_data          (addvector_0_slave_1_agent_rp_data),          //          .data
		.sink_startofpacket (addvector_0_slave_1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (addvector_0_slave_1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (led_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_009_src_ready),                       //       src.ready
		.src_valid          (router_009_src_valid),                       //          .valid
		.src_data           (router_009_src_data),                        //          .data
		.src_channel        (router_009_src_channel),                     //          .channel
		.src_startofpacket  (router_009_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                  //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_router_002 router_010 (
		.sink_ready         (addvector_1_slave_1_agent_rp_ready),         //      sink.ready
		.sink_valid         (addvector_1_slave_1_agent_rp_valid),         //          .valid
		.sink_data          (addvector_1_slave_1_agent_rp_data),          //          .data
		.sink_startofpacket (addvector_1_slave_1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (addvector_1_slave_1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (led_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_010_src_ready),                       //       src.ready
		.src_valid          (router_010_src_valid),                       //          .valid
		.src_data           (router_010_src_data),                        //          .data
		.src_channel        (router_010_src_channel),                     //          .channel
		.src_startofpacket  (router_010_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                  //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.VALID_WIDTH               (9),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                    //          .valid
		.cmd_sink_data          (router_src_data),                                                     //          .data
		.cmd_sink_channel       (router_src_channel),                                                  //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                            //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                              //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                   //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                 //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.VALID_WIDTH               (9),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                //          .valid
		.cmd_sink_data          (router_001_src_data),                                                 //          .data
		.cmd_sink_channel       (router_001_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) led_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                              //       cr0.clk
		.reset                 (led_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                           //          .data
		.sink0_channel         (cmd_mux_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                          //          .ready
		.source0_valid         (led_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (led_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (led_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (led_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (led_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (led_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sw_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                             //       cr0.clk
		.reset                 (led_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                     //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                      //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                   //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),               //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                     //          .ready
		.source0_valid         (sw_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sw_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sw_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sw_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sw_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sw_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) bridge_stsrcmmmaster_0_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                    //       cr0.clk
		.reset                 (led_reset_reset_bridge_in_reset_reset),                            // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                            //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                             //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                          //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                      //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                            //          .ready
		.source0_valid         (bridge_stsrcmmmaster_0_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (bridge_stsrcmmmaster_0_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (bridge_stsrcmmmaster_0_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (bridge_stsrcmmmaster_0_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (bridge_stsrcmmmaster_0_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (bridge_stsrcmmmaster_0_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) swir_v400_0_slave_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                     //       cr0.clk
		.reset                 (swir_v400_0_reset_sink_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                 //          .ready
		.source0_valid         (swir_v400_0_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (swir_v400_0_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (swir_v400_0_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (swir_v400_0_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (swir_v400_0_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (swir_v400_0_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) bridge_stsrcmmmaster_1_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                    //       cr0.clk
		.reset                 (led_reset_reset_bridge_in_reset_reset),                            // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                            //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                             //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                          //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                      //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                            //          .ready
		.source0_valid         (bridge_stsrcmmmaster_1_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (bridge_stsrcmmmaster_1_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (bridge_stsrcmmmaster_1_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (bridge_stsrcmmmaster_1_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (bridge_stsrcmmmaster_1_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (bridge_stsrcmmmaster_1_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) homography_dma_0_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                              //       cr0.clk
		.reset                 (led_reset_reset_bridge_in_reset_reset),                      // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                      //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                       //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                                    //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                                //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                      //          .ready
		.source0_valid         (homography_dma_0_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (homography_dma_0_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (homography_dma_0_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (homography_dma_0_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (homography_dma_0_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (homography_dma_0_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) lwir_ul0304_0_slave_burst_adapter (
		.clk                   (pll_0_outclk1_clk),                                       //       cr0.clk
		.reset                 (lwir_ul0304_0_reset_sink_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                   //          .ready
		.source0_valid         (lwir_ul0304_0_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (lwir_ul0304_0_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (lwir_ul0304_0_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (lwir_ul0304_0_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (lwir_ul0304_0_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (lwir_ul0304_0_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) addvector_0_slave_1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                           //       cr0.clk
		.reset                 (led_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                                   //          .ready
		.source0_valid         (addvector_0_slave_1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (addvector_0_slave_1_burst_adapter_source0_data),          //          .data
		.source0_channel       (addvector_0_slave_1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (addvector_0_slave_1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (addvector_0_slave_1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (addvector_0_slave_1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) addvector_1_slave_1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                           //       cr0.clk
		.reset                 (led_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                                   //          .ready
		.source0_valid         (addvector_1_slave_1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (addvector_1_slave_1_burst_adapter_source0_data),          //          .data
		.source0_channel       (addvector_1_slave_1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (addvector_1_slave_1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (addvector_1_slave_1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (addvector_1_slave_1_burst_adapter_source0_ready)          //          .ready
	);

	cycloneV_soc_mm_interconnect_4_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                       //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                //           .valid
		.src0_data          (cmd_demux_src0_data),                                                 //           .data
		.src0_channel       (cmd_demux_src0_channel),                                              //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                          //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                //           .valid
		.src1_data          (cmd_demux_src1_data),                                                 //           .data
		.src1_channel       (cmd_demux_src1_channel),                                              //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                          //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                //           .valid
		.src2_data          (cmd_demux_src2_data),                                                 //           .data
		.src2_channel       (cmd_demux_src2_channel),                                              //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                          //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                                //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                                //           .valid
		.src3_data          (cmd_demux_src3_data),                                                 //           .data
		.src3_channel       (cmd_demux_src3_channel),                                              //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                        //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                          //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                                //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                                //           .valid
		.src4_data          (cmd_demux_src4_data),                                                 //           .data
		.src4_channel       (cmd_demux_src4_channel),                                              //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                        //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                                          //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                                //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                                //           .valid
		.src5_data          (cmd_demux_src5_data),                                                 //           .data
		.src5_channel       (cmd_demux_src5_channel),                                              //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                                        //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                                          //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                                //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                                //           .valid
		.src6_data          (cmd_demux_src6_data),                                                 //           .data
		.src6_channel       (cmd_demux_src6_channel),                                              //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                                        //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                                          //           .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                                                //       src7.ready
		.src7_valid         (cmd_demux_src7_valid),                                                //           .valid
		.src7_data          (cmd_demux_src7_data),                                                 //           .data
		.src7_channel       (cmd_demux_src7_channel),                                              //           .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                                        //           .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                                          //           .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                                                //       src8.ready
		.src8_valid         (cmd_demux_src8_valid),                                                //           .valid
		.src8_data          (cmd_demux_src8_data),                                                 //           .data
		.src8_channel       (cmd_demux_src8_channel),                                              //           .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                                        //           .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket)                                           //           .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                                       //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                      //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                            //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                            //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                             //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                          //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                                      //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                            //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                            //           .valid
		.src3_data          (cmd_demux_001_src3_data),                                             //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                                          //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                                      //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                                            //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                                            //           .valid
		.src4_data          (cmd_demux_001_src4_data),                                             //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                                          //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                                      //           .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                                            //       src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                                            //           .valid
		.src5_data          (cmd_demux_001_src5_data),                                             //           .data
		.src5_channel       (cmd_demux_001_src5_channel),                                          //           .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),                                    //           .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),                                      //           .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                                            //       src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                                            //           .valid
		.src6_data          (cmd_demux_001_src6_data),                                             //           .data
		.src6_channel       (cmd_demux_001_src6_channel),                                          //           .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),                                    //           .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket),                                      //           .endofpacket
		.src7_ready         (cmd_demux_001_src7_ready),                                            //       src7.ready
		.src7_valid         (cmd_demux_001_src7_valid),                                            //           .valid
		.src7_data          (cmd_demux_001_src7_data),                                             //           .data
		.src7_channel       (cmd_demux_001_src7_channel),                                          //           .channel
		.src7_startofpacket (cmd_demux_001_src7_startofpacket),                                    //           .startofpacket
		.src7_endofpacket   (cmd_demux_001_src7_endofpacket),                                      //           .endofpacket
		.src8_ready         (cmd_demux_001_src8_ready),                                            //       src8.ready
		.src8_valid         (cmd_demux_001_src8_valid),                                            //           .valid
		.src8_data          (cmd_demux_001_src8_data),                                             //           .data
		.src8_channel       (cmd_demux_001_src8_channel),                                          //           .channel
		.src8_startofpacket (cmd_demux_001_src8_startofpacket),                                    //           .startofpacket
		.src8_endofpacket   (cmd_demux_001_src8_endofpacket)                                       //           .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                         //       clk.clk
		.reset               (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_src_valid),                     //          .valid
		.src_data            (cmd_mux_src_data),                      //          .data
		.src_channel         (cmd_mux_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                //          .channel
		.sink0_data          (cmd_demux_src0_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src0_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)         //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                         //       clk.clk
		.reset               (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                 //          .valid
		.src_data            (cmd_mux_001_src_data),                  //          .data
		.src_channel         (cmd_mux_001_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                //          .channel
		.sink0_data          (cmd_demux_src1_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src1_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)         //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                         //       clk.clk
		.reset               (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                 //          .valid
		.src_data            (cmd_mux_002_src_data),                  //          .data
		.src_channel         (cmd_mux_002_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                //          .channel
		.sink0_data          (cmd_demux_src2_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src2_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)         //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_cmd_mux cmd_mux_003 (
		.clk                 (pll_0_outclk0_clk),                                  //       clk.clk
		.reset               (swir_v400_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                              //          .valid
		.src_data            (cmd_mux_003_src_data),                               //          .data
		.src_channel         (cmd_mux_003_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                  //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                  //          .valid
		.sink0_channel       (crosser_out_channel),                                //          .channel
		.sink0_data          (crosser_out_data),                                   //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                            //          .endofpacket
		.sink1_ready         (crosser_002_out_ready),                              //     sink1.ready
		.sink1_valid         (crosser_002_out_valid),                              //          .valid
		.sink1_channel       (crosser_002_out_channel),                            //          .channel
		.sink1_data          (crosser_002_out_data),                               //          .data
		.sink1_startofpacket (crosser_002_out_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (crosser_002_out_endofpacket)                         //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                         //       clk.clk
		.reset               (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                 //          .valid
		.src_data            (cmd_mux_004_src_data),                  //          .data
		.src_channel         (cmd_mux_004_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                //          .channel
		.sink0_data          (cmd_demux_src4_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src4_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)         //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                         //       clk.clk
		.reset               (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                 //          .valid
		.src_data            (cmd_mux_005_src_data),                  //          .data
		.src_channel         (cmd_mux_005_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                //          .channel
		.sink0_data          (cmd_demux_src5_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src5_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)         //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_cmd_mux cmd_mux_006 (
		.clk                 (pll_0_outclk1_clk),                                    //       clk.clk
		.reset               (lwir_ul0304_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                //          .valid
		.src_data            (cmd_mux_006_src_data),                                 //          .data
		.src_channel         (cmd_mux_006_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                //          .valid
		.sink0_channel       (crosser_001_out_channel),                              //          .channel
		.sink0_data          (crosser_001_out_data),                                 //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                          //          .endofpacket
		.sink1_ready         (crosser_003_out_ready),                                //     sink1.ready
		.sink1_valid         (crosser_003_out_valid),                                //          .valid
		.sink1_channel       (crosser_003_out_channel),                              //          .channel
		.sink1_data          (crosser_003_out_data),                                 //          .data
		.sink1_startofpacket (crosser_003_out_startofpacket),                        //          .startofpacket
		.sink1_endofpacket   (crosser_003_out_endofpacket)                           //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                         //       clk.clk
		.reset               (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                 //          .valid
		.src_data            (cmd_mux_007_src_data),                  //          .data
		.src_channel         (cmd_mux_007_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                //          .channel
		.sink0_data          (cmd_demux_src7_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src7_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)         //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                         //       clk.clk
		.reset               (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                 //          .valid
		.src_data            (cmd_mux_008_src_data),                  //          .data
		.src_channel         (cmd_mux_008_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                //          .channel
		.sink0_data          (cmd_demux_src8_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src8_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)         //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                         //       clk.clk
		.reset              (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                  //      sink.ready
		.sink_channel       (router_002_src_channel),                //          .channel
		.sink_data          (router_002_src_data),                   //          .data
		.sink_startofpacket (router_002_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_002_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_src0_data),                   //          .data
		.src0_channel       (rsp_demux_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),            //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                  //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                  //          .valid
		.src1_data          (rsp_demux_src1_data),                   //          .data
		.src1_channel       (rsp_demux_src1_channel),                //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)             //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                         //       clk.clk
		.reset              (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                  //      sink.ready
		.sink_channel       (router_003_src_channel),                //          .channel
		.sink_data          (router_003_src_data),                   //          .data
		.sink_startofpacket (router_003_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_003_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),              //          .valid
		.src0_data          (rsp_demux_001_src0_data),               //          .data
		.src0_channel       (rsp_demux_001_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),              //          .valid
		.src1_data          (rsp_demux_001_src1_data),               //          .data
		.src1_channel       (rsp_demux_001_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)         //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                         //       clk.clk
		.reset              (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                  //      sink.ready
		.sink_channel       (router_004_src_channel),                //          .channel
		.sink_data          (router_004_src_data),                   //          .data
		.sink_startofpacket (router_004_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_004_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),              //          .valid
		.src0_data          (rsp_demux_002_src0_data),               //          .data
		.src0_channel       (rsp_demux_002_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),              //          .valid
		.src1_data          (rsp_demux_002_src1_data),               //          .data
		.src1_channel       (rsp_demux_002_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)         //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_rsp_demux_003 rsp_demux_003 (
		.clk                (pll_0_outclk0_clk),                                  //       clk.clk
		.reset              (swir_v400_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                               //      sink.ready
		.sink_channel       (router_005_src_channel),                             //          .channel
		.sink_data          (router_005_src_data),                                //          .data
		.sink_startofpacket (router_005_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_005_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_003_src0_data),                            //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_003_src1_data),                            //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                      //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                         //       clk.clk
		.reset              (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                  //      sink.ready
		.sink_channel       (router_006_src_channel),                //          .channel
		.sink_data          (router_006_src_data),                   //          .data
		.sink_startofpacket (router_006_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_006_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),              //          .valid
		.src0_data          (rsp_demux_004_src0_data),               //          .data
		.src0_channel       (rsp_demux_004_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),              //          .valid
		.src1_data          (rsp_demux_004_src1_data),               //          .data
		.src1_channel       (rsp_demux_004_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)         //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                         //       clk.clk
		.reset              (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                  //      sink.ready
		.sink_channel       (router_007_src_channel),                //          .channel
		.sink_data          (router_007_src_data),                   //          .data
		.sink_startofpacket (router_007_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_007_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),              //          .valid
		.src0_data          (rsp_demux_005_src0_data),               //          .data
		.src0_channel       (rsp_demux_005_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),              //          .valid
		.src1_data          (rsp_demux_005_src1_data),               //          .data
		.src1_channel       (rsp_demux_005_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)         //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_rsp_demux_006 rsp_demux_006 (
		.clk                (pll_0_outclk1_clk),                                    //       clk.clk
		.reset              (lwir_ul0304_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                 //      sink.ready
		.sink_channel       (router_008_src_channel),                               //          .channel
		.sink_data          (router_008_src_data),                                  //          .data
		.sink_startofpacket (router_008_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_008_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_006_src0_data),                              //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_006_src1_data),                              //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                        //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                         //       clk.clk
		.reset              (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                  //      sink.ready
		.sink_channel       (router_009_src_channel),                //          .channel
		.sink_data          (router_009_src_data),                   //          .data
		.sink_startofpacket (router_009_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_009_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),              //          .valid
		.src0_data          (rsp_demux_007_src0_data),               //          .data
		.src0_channel       (rsp_demux_007_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),              //          .valid
		.src1_data          (rsp_demux_007_src1_data),               //          .data
		.src1_channel       (rsp_demux_007_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)         //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                         //       clk.clk
		.reset              (led_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                  //      sink.ready
		.sink_channel       (router_010_src_channel),                //          .channel
		.sink_data          (router_010_src_data),                   //          .data
		.sink_startofpacket (router_010_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_010_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),              //          .valid
		.src0_data          (rsp_demux_008_src0_data),               //          .data
		.src0_channel       (rsp_demux_008_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),              //          .valid
		.src1_data          (rsp_demux_008_src1_data),               //          .data
		.src1_channel       (rsp_demux_008_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)         //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                   //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                   //          .valid
		.src_data            (rsp_mux_src_data),                                                    //          .data
		.src_channel         (rsp_mux_src_channel),                                                 //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                              //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                 //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                          //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                          //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                          //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                      //          .endofpacket
		.sink3_ready         (crosser_004_out_ready),                                               //     sink3.ready
		.sink3_valid         (crosser_004_out_valid),                                               //          .valid
		.sink3_channel       (crosser_004_out_channel),                                             //          .channel
		.sink3_data          (crosser_004_out_data),                                                //          .data
		.sink3_startofpacket (crosser_004_out_startofpacket),                                       //          .startofpacket
		.sink3_endofpacket   (crosser_004_out_endofpacket),                                         //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                            //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                            //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                          //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                             //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                                      //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                            //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                            //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                                          //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                             //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                                      //          .endofpacket
		.sink6_ready         (crosser_006_out_ready),                                               //     sink6.ready
		.sink6_valid         (crosser_006_out_valid),                                               //          .valid
		.sink6_channel       (crosser_006_out_channel),                                             //          .channel
		.sink6_data          (crosser_006_out_data),                                                //          .data
		.sink6_startofpacket (crosser_006_out_startofpacket),                                       //          .startofpacket
		.sink6_endofpacket   (crosser_006_out_endofpacket),                                         //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                                            //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                                            //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                                          //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                                             //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),                                      //          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),                                            //     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),                                            //          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),                                          //          .channel
		.sink8_data          (rsp_demux_008_src0_data),                                             //          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket)                                       //          .endofpacket
	);

	cycloneV_soc_mm_interconnect_4_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                               //          .valid
		.src_data            (rsp_mux_001_src_data),                                                //          .data
		.src_channel         (rsp_mux_001_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                                //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                                //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                              //          .channel
		.sink0_data          (rsp_demux_src1_data),                                                 //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                                          //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                          //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                          //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                                      //          .endofpacket
		.sink3_ready         (crosser_005_out_ready),                                               //     sink3.ready
		.sink3_valid         (crosser_005_out_valid),                                               //          .valid
		.sink3_channel       (crosser_005_out_channel),                                             //          .channel
		.sink3_data          (crosser_005_out_data),                                                //          .data
		.sink3_startofpacket (crosser_005_out_startofpacket),                                       //          .startofpacket
		.sink3_endofpacket   (crosser_005_out_endofpacket),                                         //          .endofpacket
		.sink4_ready         (rsp_demux_004_src1_ready),                                            //     sink4.ready
		.sink4_valid         (rsp_demux_004_src1_valid),                                            //          .valid
		.sink4_channel       (rsp_demux_004_src1_channel),                                          //          .channel
		.sink4_data          (rsp_demux_004_src1_data),                                             //          .data
		.sink4_startofpacket (rsp_demux_004_src1_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src1_endofpacket),                                      //          .endofpacket
		.sink5_ready         (rsp_demux_005_src1_ready),                                            //     sink5.ready
		.sink5_valid         (rsp_demux_005_src1_valid),                                            //          .valid
		.sink5_channel       (rsp_demux_005_src1_channel),                                          //          .channel
		.sink5_data          (rsp_demux_005_src1_data),                                             //          .data
		.sink5_startofpacket (rsp_demux_005_src1_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src1_endofpacket),                                      //          .endofpacket
		.sink6_ready         (crosser_007_out_ready),                                               //     sink6.ready
		.sink6_valid         (crosser_007_out_valid),                                               //          .valid
		.sink6_channel       (crosser_007_out_channel),                                             //          .channel
		.sink6_data          (crosser_007_out_data),                                                //          .data
		.sink6_startofpacket (crosser_007_out_startofpacket),                                       //          .startofpacket
		.sink6_endofpacket   (crosser_007_out_endofpacket),                                         //          .endofpacket
		.sink7_ready         (rsp_demux_007_src1_ready),                                            //     sink7.ready
		.sink7_valid         (rsp_demux_007_src1_valid),                                            //          .valid
		.sink7_channel       (rsp_demux_007_src1_channel),                                          //          .channel
		.sink7_data          (rsp_demux_007_src1_data),                                             //          .data
		.sink7_startofpacket (rsp_demux_007_src1_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src1_endofpacket),                                      //          .endofpacket
		.sink8_ready         (rsp_demux_008_src1_ready),                                            //     sink8.ready
		.sink8_valid         (rsp_demux_008_src1_valid),                                            //          .valid
		.sink8_channel       (rsp_demux_008_src1_channel),                                          //          .channel
		.sink8_data          (rsp_demux_008_src1_data),                                             //          .data
		.sink8_startofpacket (rsp_demux_008_src1_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src1_endofpacket)                                       //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (118),
		.BITS_PER_SYMBOL     (118),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (9),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                                   //       out_clk.clk
		.out_reset         (swir_v400_0_reset_sink_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src3_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                                              //              .channel
		.in_data           (cmd_demux_src3_data),                                                 //              .data
		.out_ready         (crosser_out_ready),                                                   //           out.ready
		.out_valid         (crosser_out_valid),                                                   //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                           //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                             //              .endofpacket
		.out_channel       (crosser_out_channel),                                                 //              .channel
		.out_data          (crosser_out_data),                                                    //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (118),
		.BITS_PER_SYMBOL     (118),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (9),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                                   //       out_clk.clk
		.out_reset         (lwir_ul0304_0_reset_sink_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src6_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src6_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src6_channel),                                              //              .channel
		.in_data           (cmd_demux_src6_data),                                                 //              .data
		.out_ready         (crosser_001_out_ready),                                               //           out.ready
		.out_valid         (crosser_001_out_valid),                                               //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                             //              .channel
		.out_data          (crosser_001_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (118),
		.BITS_PER_SYMBOL     (118),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (9),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                                   //       out_clk.clk
		.out_reset         (swir_v400_0_reset_sink_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                                            //            in.ready
		.in_valid          (cmd_demux_001_src3_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_001_src3_channel),                                          //              .channel
		.in_data           (cmd_demux_001_src3_data),                                             //              .data
		.out_ready         (crosser_002_out_ready),                                               //           out.ready
		.out_valid         (crosser_002_out_valid),                                               //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                             //              .channel
		.out_data          (crosser_002_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (118),
		.BITS_PER_SYMBOL     (118),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (9),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                                   //       out_clk.clk
		.out_reset         (lwir_ul0304_0_reset_sink_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src6_ready),                                            //            in.ready
		.in_valid          (cmd_demux_001_src6_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_001_src6_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src6_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_001_src6_channel),                                          //              .channel
		.in_data           (cmd_demux_001_src6_data),                                             //              .data
		.out_ready         (crosser_003_out_ready),                                               //           out.ready
		.out_valid         (crosser_003_out_valid),                                               //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                             //              .channel
		.out_data          (crosser_003_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (118),
		.BITS_PER_SYMBOL     (118),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (9),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (pll_0_outclk0_clk),                                                   //        in_clk.clk
		.in_reset          (swir_v400_0_reset_sink_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_003_src0_data),                                             //              .data
		.out_ready         (crosser_004_out_ready),                                               //           out.ready
		.out_valid         (crosser_004_out_valid),                                               //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                             //              .channel
		.out_data          (crosser_004_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (118),
		.BITS_PER_SYMBOL     (118),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (9),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (pll_0_outclk0_clk),                                                   //        in_clk.clk
		.in_reset          (swir_v400_0_reset_sink_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_003_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_003_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_003_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_003_src1_data),                                             //              .data
		.out_ready         (crosser_005_out_ready),                                               //           out.ready
		.out_valid         (crosser_005_out_valid),                                               //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                             //              .channel
		.out_data          (crosser_005_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (118),
		.BITS_PER_SYMBOL     (118),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (9),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (pll_0_outclk1_clk),                                                   //        in_clk.clk
		.in_reset          (lwir_ul0304_0_reset_sink_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_006_src0_data),                                             //              .data
		.out_ready         (crosser_006_out_ready),                                               //           out.ready
		.out_valid         (crosser_006_out_valid),                                               //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                             //              .channel
		.out_data          (crosser_006_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (118),
		.BITS_PER_SYMBOL     (118),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (9),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (pll_0_outclk1_clk),                                                   //        in_clk.clk
		.in_reset          (lwir_ul0304_0_reset_sink_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_006_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_006_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_006_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_006_src1_data),                                             //              .data
		.out_ready         (crosser_007_out_ready),                                               //           out.ready
		.out_valid         (crosser_007_out_valid),                                               //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                             //              .channel
		.out_data          (crosser_007_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	cycloneV_soc_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (led_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (led_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (led_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)          //         .error
	);

	cycloneV_soc_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (led_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sw_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (sw_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (sw_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)      //         .error
	);

	cycloneV_soc_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (led_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (bridge_stsrcmmmaster_0_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                        //         .error
	);

	cycloneV_soc_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (swir_v400_0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (swir_v400_0_slave_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (swir_v400_0_slave_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (swir_v400_0_slave_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                   //         .error
	);

	cycloneV_soc_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (led_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (bridge_stsrcmmmaster_1_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                        //         .error
	);

	cycloneV_soc_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (led_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (homography_dma_0_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (homography_dma_0_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (homography_dma_0_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                  //         .error
	);

	cycloneV_soc_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (pll_0_outclk1_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (lwir_ul0304_0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (lwir_ul0304_0_slave_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (lwir_ul0304_0_slave_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (lwir_ul0304_0_slave_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                     //         .error
	);

	cycloneV_soc_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (led_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (addvector_0_slave_1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (addvector_0_slave_1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (addvector_0_slave_1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)               //         .error
	);

	cycloneV_soc_mm_interconnect_3_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (led_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (addvector_1_slave_1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (addvector_1_slave_1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (addvector_1_slave_1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)               //         .error
	);

endmodule
