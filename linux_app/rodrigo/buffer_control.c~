#include <stdio.h>
#include <stdlib.h>
#include <sys/mman.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdint.h>

#define FRAME_ADDR 0xFF210000
#define FRAME_SPAN 0x10

#define REG_ADDR_OFFSET 0
#define REG_REQBUFFER_OFFSET 1 

void* frame_base;

void requestBuffer(void* mem)
{
	*((int*)(mem) + REG_REQBUFFER_OFFSET) = 1;	
}

void freeBuffer(void* mem)
{
	*((int*)(mem) + REG_REQBUFFER_OFFSET) = 0;
}

uint32_t getBufferAddr(void* mem)
{
	uint32_t buffer_addr = *(int*) (mem + REG_ADDR_OFFSET);
	return buffer_addr;
}

int checkBufferStatus(void* mem) //1 - livre ; 0 - busy
{
	int status = *((int*)(mem) + REG_REQBUFFER_OFFSET);
	if (status) printf("***Buffer Status : BUFFER FREE TO USE\n");
	//else printf("***Buffer Status: BUFFER LOCKED\n");
	return status;
}

int getBufferNumber(void* mem, uint32_t addr1, uint32_t addr2)
{
  while (!checkBufferStatus(mem)) printf("waiting buffer free\n");
  uint32_t addr = getBufferAddr(mem);
  if (addr == addr1) return 0;
  else if (addr = addr2) return 1;
  else return -1;
}    

uint32_t* getBufferPointer(void* mem)
{
  uint32_t* pointer = (uint32_t*) getBufferAddr(mem);
  return pointer;
}    

int main(){
	int i=0;
	FILE* fout;


	int fd = open("/dev/mem", (O_RDWR|O_SYNC));
	frame_base = mmap(NULL,FRAME_SPAN,(PROT_READ|PROT_WRITE),MAP_SHARED,fd,FRAME_ADDR);
	while(1)
	{
	requestBuffer(frame_base);
	printf("BUFF NUMBER: %i\n", getBufferNumber(frame_base, 0x38000000, 0x38500000));
	checkBufferStatus(frame_base);
	int addr = getBufferAddr(frame_base);
	freeBuffer(frame_base);

	printf("BUFFER ADDR: %x\n", addr);
	}
}


